(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[2],{

/***/ "./src/utils/utils.js":
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/
/*! exports provided: translateTree, addSessionStorage, find_key, getRowInfoByIndex, setChangeCellResult, addRows, m_formate, compareName, isStatic, cloneObj, distinct, round, getTime, debounce, throttle, codeObj */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(swal) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateTree", function() { return translateTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addSessionStorage", function() { return addSessionStorage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find_key", function() { return find_key; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRowInfoByIndex", function() { return getRowInfoByIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setChangeCellResult", function() { return setChangeCellResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addRows", function() { return addRows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m_formate", function() { return m_formate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareName", function() { return compareName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStatic", function() { return isStatic; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneObj", function() { return cloneObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distinct", function() { return distinct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTime", function() { return getTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return throttle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "codeObj", function() { return codeObj; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function translateTree(data) {
  //通过t_pid来组树结构
  var array = [];

  var insert = function insert(children, parents) {
    parents.forEach(function (parent) {
      children.forEach(function (child, index) {
        if (child.t_pid == parent.t_id) {
          var temp = JSON.parse(JSON.stringify(children));
          temp.splice(index, 1);
          insert(temp, [child]);
          typeof parent.children !== 'undefined' ? parent.children.push(child) : parent.children = [child];
        }
      });
    });
  };
  /* 含有顶级组织的排序有顶级组织的权限 */


  var parents = data.filter(function (item) {
    return !parseInt(item.t_pid);
  });
  var children = data.filter(function (item) {
    return item.t_pid;
  });
  insert(children, parents);
  array.push.apply(array, _toConsumableArray(parents));
  return array;
} //处理sessionstorage超出限制的问题

function addSessionStorage(key, storeObj) {
  //定义一个前缀，表示只删除自己定义的缓存
  var cachePrefix = 'SERVICE_QR_'; // sessionStorage对大小是有限制的，所以要进行try catch
  // 500KB左右的东西保存起来就会令到Resources变卡
  // 2M左右就可以令到Resources卡死，操作不了
  // 5M就到了Chrome的极限
  // 超过之后会抛出如下异常：
  // DOMException: Failed to execute 'setItem' on 'Storage': Setting the value of 'basket-http://file.com/ykq/wap/v3Templates/timeout/timeout/large.js' exceeded the quota

  try {
    sessionStorage.setItem(cachePrefix + key, JSON.stringify(storeObj));
  } catch (e) {
    // sessionStorage容量不够，根据保存的时间删除已缓存到 sessionStorage
    if (e.name.toUpperCase().indexOf('QUOTA') >= 0) {
      var item;
      var tempArr = []; // 先把所有的缓存对象来出来，放到 tempArr 里

      for (item in sessionStorage) {
        if (item.indexOf(cachePrefix) === 0) {
          tempArr.push(JSON.parse(sessionStorage[item]));
        }
      } // 如果有缓存对象


      if (tempArr.length) {
        // 按缓存时间升序排列数组
        tempArr.sort(function (a, b) {
          return a.stamp - b.stamp;
        }); // 删除缓存时间最早的

        sessionStorage.removeItem(tempArr[0].key); // 删除后在再添加，利用递归完成

        addSessionStorage(key, storeObj);
      }
    }
  }
}
function find_key(value, valueArr, keyArr) {
  //h-下拉框选key的方法
  if (valueArr.indexOf(value) != -1) {
    return keyArr[valueArr.indexOf(value)];
  }

  console.log('下拉框取key失败，返回undefined');
  return;
}
function getRowInfoByIndex(index, data, hot) {
  //获取hdtable,行真实信息的方法
  var physicalRow = hot.toPhysicalRow(index);
  var info = data[physicalRow];
  return info;
}
/*
 修改下拉选项前判断幅值
 @param valueSource下拉选项的值列表
 @param valueSource_key下拉选项的key列表
 @param change_newVal下拉选项更改后的值
 @param change_index更改的行号
 * */

function setChangeCellResult(valueSource, valueSource_key, change_newVal, change_index) {
  var valueArr = valueSource;
  var keyArr = valueSource_key;
  var index = valueArr.indexOf(change_newVal);

  if (index == -1) {
    swal({
      title: "提示",
      text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u9009\u9879!"),
      button: "确认"
    });
    return false;
  } else {
    return keyArr[index];
  }
}
function addRows(hot, data, row) {
  if (row == -1) {
    //通过点击新建按钮进入的方法，默认在最后一行添加
    row = 0;
  }

  hot.alter('insert_row', row);
}
/**
 * 四舍五入
 * 返回数值
 */

function m_formate(value, num) {
  if (value == null) {
    return "无数据";
  } else {
    var t_value = Math.abs(value);

    if (t_value >= Math.pow(10, 8) || t_value <= -Math.pow(10, 8)) {
      //超出8位用科学计数法表示
      return "无数据";
    }

    if (num == 255) {
      //num=255，采用默认规则保留有效位
      if (value == 0) {
        //直接返回0值
        return 0;
      } else if (value >= 1000) {
        //保留整数
        num = 0;
      } else if (value >= 10) {
        //保留1位小数
        num = 1;
      } else {
        //保留3个有效数字
        num = 0;
        t_value = value;

        while (Math.abs(t_value) < 1) {
          t_value *= 10;
          num++;
        }

        num += 2;
      }
    }

    var len_value = Math.pow(10, num);
    return Math.round(value * len_value) / len_value;
  }
}
/**
 * 对象根据值进行排序名称
 * */

function compareName(property) {
  return function (a, b) {
    var nameA = a[property].toUpperCase(); // ignore upper and lowercase

    var nameB = b[property].toUpperCase(); // ignore upper and lowercase

    if (nameA < nameB) {
      return -1;
    }

    if (nameA > nameB) {
      return 1;
    }

    return 0;
  };
} // 判断数据是否为原始类型

function isStatic(val) {
  return typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean' || typeof val === 'undefined' || val === null;
} // 深度复制对象

function cloneObj(val, deep) {
  if (isStatic(val)) return val;

  if (Array.isArray(val)) {
    return val.map(function (item) {
      return deep ? cloneObj(item, deep) : item;
    });
  } else if (_typeof(val) === 'object') {
    var wType = ['Error', 'Date', 'RegExp'];
    var type = Object.prototype.toString.call(val).slice(8, -1);
    if (wType.includes(type)) return new window[type](val);
    var tag = {};

    for (var key in val) {
      tag[key] = deep ? cloneObj(val[key], deep) : val[key];
    }

    return tag;
  }
} // 数组去重方法

function distinct(a, b) {
  var arr = a.concat(b);
  var result = [];
  var obj = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var i = _step.value;

      if (!obj[i]) {
        result.push(i);
        obj[i] = 1;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
} // 特征值表

var codeObj = {
  /* 测点类型对应特征值 */
  1: [
  /* 转速 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed_value',
    name: '测点转速值',
    code: 16000
  },
  /* 转速测点转速值 */
  {
    filed: 'speed_dc',
    name: '转速直流量',
    code: 28000
  }
  /* 转速直流量 */
  ],
  2: [
  /* 过程量 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'value',
    name: '过程量值',
    code: 8000
  }
  /* 过程量值 */
  ],
  3: [
  /* 振动 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'vib_rms',
    name: '有效值',
    code: 2000
  },
  /* 振动有效值 */
  {
    filed: 'vib_p',
    name: '峰值',
    code: 3000
  },
  /* 振动峰值 */
  {
    filed: 'vib_pp',
    name: '峰峰值',
    code: 4000
  },
  /* 振动峰峰值 */
  {
    filed: 'pow_rms',
    name: '能量有效值',
    code: 19000
  },
  /* 能量有效值 */
  {
    filed: 'vib_pf',
    name: '峰值因数',
    code: 15000
  },
  /* 峰值因数=振动峰值/振动有效值 */
  {
    filed: 'gap',
    name: '偏置电压',
    code: 14000
  },
  /* 偏置电压 */
  {
    filed: 'vib_k',
    name: '峭度',
    code: 24000
  },
  /* 峭度 */
  {
    filed: 'vib_cf',
    name: '裕度',
    code: 25000
  },
  /* 裕度 */
  {
    filed: 'vib_sf',
    name: '歪度',
    code: 26000
  },
  /* 歪度 */
  {
    filed: 'sv',
    name: '冲击值',
    code: 46000
  },
  /* 冲击值 */
  {
    filed: 'vib_rms1',
    name: '1x幅值',
    code: 53000
  },
  /* 1x幅值 */
  {
    filed: 'vib_rms2',
    name: '1x相位',
    code: 54000
  },
  /* 1x相位 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx1_scale',
    name: '频段1因数',
    code: 13001
  },
  /* 可选频段频谱幅值最大值与频谱幅值的比值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx2_scale',
    name: '频段2因数',
    code: 13002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx3_scale',
    name: '频段3因数',
    code: 13003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx4_scale',
    name: '频段4因数',
    code: 13004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx5_scale',
    name: '频段5因数',
    code: 13005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx6_scale',
    name: '频段6因数',
    code: 13006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx7_scale',
    name: '频段7因数',
    code: 13007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }, {
    filed: 'vib_vsx8_scale',
    name: '频段8因数',
    code: 13008
  }],
  4: [
  /* 包络 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'spm_rms',
    name: '包络解调值',
    code: 5000
  },
  /* 包络解调值 */
  {
    filed: 'spm_pp',
    name: '包络特征值',
    code: 6000
  },
  /* 包络特征值 */
  {
    filed: 'pow_rms',
    name: '能量有效值',
    code: 19000
  },
  /* 能量有效值 */
  {
    filed: 'gap',
    name: '偏置电压',
    code: 14000
  },
  /* 偏置电压 */
  {
    filed: 'sv',
    name: '冲击值',
    code: 46000
  },
  /* 冲击值 */
  {
    filed: 'sv0',
    name: '1x幅值',
    code: 55000
  },
  /* 1x幅值 */
  {
    filed: 'sv1',
    name: '1x相位',
    code: 56000
  },
  /* 1x相位 */
  {
    filed: 'sv0',
    name: '保持架对外环',
    code: 52001
  },
  /* 保持架对外环频率 */
  {
    filed: 'sv1',
    name: '保持架对内环',
    code: 52002
  },
  /* 保持架对内环频率 */
  {
    filed: 'sv2',
    name: '外环内滚道',
    code: 52003
  },
  /* 外环内滚道频率 */
  {
    filed: 'sv3',
    name: '内环外滚道',
    code: 52004
  },
  /* 内环外滚道频率 */
  {
    filed: 'sv4',
    name: '滚单',
    code: 52005
  },
  /* 滚单频率 */
  {
    filed: 'sv5',
    name: '滚双',
    code: 52006
  },
  /* 滚双频率 */
  {
    filed: 'sv6',
    name: '踏面',
    code: 52007
  },
  /* 踏面频率 */
  {
    filed: 'sv7',
    name: '邻轴齿轮',
    code: 52008
  },
  /* 邻轴齿轮频率 */
  {
    filed: 'sv8',
    name: '本轴齿轮',
    code: 52009
  },
  /* 本轴齿轮频率 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx1_scale',
    name: '频段1因数',
    code: 13001
  },
  /* 可选频段频谱幅值最大值与频谱幅值的比值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx2_scale',
    name: '频段2因数',
    code: 13002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx3_scale',
    name: '频段3因数',
    code: 13003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx4_scale',
    name: '频段4因数',
    code: 13004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx5_scale',
    name: '频段5因数',
    code: 13005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx6_scale',
    name: '频段6因数',
    code: 13006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx7_scale',
    name: '频段7因数',
    code: 13007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }, {
    filed: 'vib_vsx8_scale',
    name: '频段8因数',
    code: 13008
  }],
  5: [
  /* 数字量 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'digital_value',
    name: '数字量值',
    code: 7000
  }
  /* 数字量值 */
  ],
  6: [
  /* 晃度 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'rock_rms',
    name: '有效值',
    code: 9000
  },
  /* 晃度有效值 */
  {
    filed: 'rock_p',
    name: '峰值',
    code: 10000
  },
  /* 晃度峰值 */
  {
    filed: 'rock_pp',
    name: '峰峰值',
    code: 11000
  },
  /* 晃度峰峰值 */
  {
    filed: 'rock_s',
    name: '位移',
    code: 29000
  },
  /* 晃度位移 */
  {
    filed: 'pow_rms',
    name: '能量有效值',
    code: 19000
  },
  /* 能量有效值 */
  {
    filed: 'gap',
    name: '偏置电压',
    code: 14000
  },
  /* 偏置电压 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }],
  7: [
  /* 温度 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'value',
    name: '温度值',
    code: 23000
  }
  /* 温度值 */
  ],
  8: [
  /* 振动阶次 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'vib_rms',
    name: '有效值',
    code: 2000
  },
  /* 振动有效值 */
  {
    filed: 'vib_p',
    name: '峰值',
    code: 3000
  },
  /* 振动峰值 */
  {
    filed: 'vib_pp',
    name: '峰峰值',
    code: 4000
  },
  /* 振动峰峰值 */
  {
    filed: 'pow_rms',
    name: '能量有效值',
    code: 19000
  },
  /* 能量有效值 */
  {
    filed: 'vib_pf',
    name: '峰值因数',
    code: 15000
  },
  /* 峰值因数=振动峰值/振动有效值 */
  {
    filed: 'gap',
    name: '偏置电压',
    code: 14000
  },
  /* 偏置电压 */
  {
    filed: 'vib_k',
    name: '峭度',
    code: 24000
  },
  /* 峭度 */
  {
    filed: 'vib_cf',
    name: '裕度',
    code: 25000
  },
  /* 裕度 */
  {
    filed: 'vib_sf',
    name: '歪度',
    code: 26000
  },
  /* 歪度 */
  {
    filed: 'sv',
    name: '冲击值',
    code: 46000
  },
  /* 冲击值 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx1_scale',
    name: '频段1因数',
    code: 13001
  },
  /* 可选频段频谱幅值最大值与频谱幅值的比值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx2_scale',
    name: '频段2因数',
    code: 13002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx3_scale',
    name: '频段3因数',
    code: 13003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx4_scale',
    name: '频段4因数',
    code: 13004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx5_scale',
    name: '频段5因数',
    code: 13005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx6_scale',
    name: '频段6因数',
    code: 13006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx7_scale',
    name: '频段7因数',
    code: 13007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }, {
    filed: 'vib_vsx8_scale',
    name: '频段8因数',
    code: 13008
  }],
  9: [
  /* 包络阶次 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'spm_rms',
    name: '包络解调值',
    code: 5000
  },
  /* 包络有效值 */
  {
    filed: 'spm_pp',
    name: '包络特征值',
    code: 6000
  },
  /* 包络峰峰值 */
  {
    filed: 'pow_rms',
    name: '能量有效值',
    code: 19000
  },
  /* 能量有效值 */
  {
    filed: 'gap',
    name: '偏置电压',
    code: 14000
  },
  /* 偏置电压 */
  {
    filed: 'sv',
    name: '冲击值',
    code: 46000
  },
  /* 冲击值 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx1_scale',
    name: '频段1因数',
    code: 13001
  },
  /* 可选频段频谱幅值最大值与频谱幅值的比值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx2_scale',
    name: '频段2因数',
    code: 13002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx3_scale',
    name: '频段3因数',
    code: 13003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx4_scale',
    name: '频段4因数',
    code: 13004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx5_scale',
    name: '频段5因数',
    code: 13005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx6_scale',
    name: '频段6因数',
    code: 13006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx7_scale',
    name: '频段7因数',
    code: 13007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }, {
    filed: 'vib_vsx8_scale',
    name: '频段8因数',
    code: 13008
  }, {
    filed: 'sv0',
    name: '保持架对外环',
    code: 52001
  },
  /* 保持架对外环频率 */
  {
    filed: 'sv1',
    name: '保持架对内环',
    code: 52002
  },
  /* 保持架对内环频率 */
  {
    filed: 'sv2',
    name: '外环内滚道',
    code: 52003
  },
  /* 外环内滚道频率 */
  {
    filed: 'sv3',
    name: '内环外滚道',
    code: 52004
  },
  /* 内环外滚道频率 */
  {
    filed: 'sv4',
    name: '滚单',
    code: 52005
  },
  /* 滚单频率 */
  {
    filed: 'sv5',
    name: '滚双',
    code: 52006
  },
  /* 滚双频率 */
  {
    filed: 'sv6',
    name: '踏面',
    code: 52007
  },
  /* 踏面频率 */
  {
    filed: 'sv7',
    name: '邻轴齿轮',
    code: 52008
  },
  /* 邻轴齿轮频率 */
  {
    filed: 'sv8',
    name: '本轴齿轮',
    code: 52009
  }
  /* 本轴齿轮频率 */
  ],
  10: [
  /* 工艺量 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'value',
    name: '工艺量',
    code: 27000
  }
  /* 工艺量 */
  ],
  11: [
  /* 倾覆 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'overturn_rms',
    name: '有效值',
    code: 20000
  },
  /* 倾覆值 */
  {
    filed: 'overturn_p',
    name: '峰值',
    code: 30000
  },
  /* 倾覆峰值 */
  {
    filed: 'overturn_pp',
    name: '峰峰值',
    code: 31000
  },
  /* 倾覆峰峰值 */
  {
    filed: 'overturn_s',
    name: '位移',
    code: 32000
  },
  /* 倾覆位移值 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }],
  12: [
  /* 倾角 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'rock_rms',
    name: '有效值',
    code: 33000
  },
  /* 倾角有效值 */
  {
    filed: 'rock_p',
    name: '峰值',
    code: 34000
  },
  /* 倾角峰值 */
  {
    filed: 'rock_pp',
    name: '峰峰值',
    code: 35000
  },
  /* 倾角峰峰值 */
  {
    filed: 'rock_avg',
    name: '平均值',
    code: 36000
  },
  /* 倾角平均值 */
  {
    filed: 'rock_s',
    name: '位移',
    code: 47000
  },
  /* 倾角位移值 */
  {
    filed: 'temperature',
    name: '温度值',
    code: 51000
  },
  /* 温度值 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }],
  13: [
  /* 合成倾角 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'overturn_rms',
    name: '有效值',
    code: 37000
  },
  /* 合成倾角有效值 */
  {
    filed: 'overturn_p',
    name: '峰值',
    code: 38000
  },
  /* 合成倾角峰值 */
  {
    filed: 'overturn_pp',
    name: '峰峰值',
    code: 39000
  },
  /* 合成倾角峰峰值 */
  {
    filed: 'rock_avg',
    name: ['平均值', '沉降角度'],
    code: 40000
  },
  /* 合成倾角平均值/沉降角度 */
  {
    filed: 'rock_pp',
    name: '沉降量',
    code: 43000
  },
  /* （合成）沉降量 */
  {
    filed: 'rock_rms',
    name: '平均值方位',
    code: 41000
  },
  /* （合成）平均值相位 */
  {
    filed: 'rock_p',
    name: '峰值方位',
    code: 42000
  },
  /* （合成）峰值相位 */
  {
    filed: 'overturn_s',
    name: '位移',
    code: 48000
  },
  /* （合成）倾角位移值 */
  {
    filed: 'temperature',
    name: '温度值',
    code: 51000
  },
  /* 温度值 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }],
  14: [
  /* 螺栓 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed_value',
    name: '预紧力值',
    code: 44000
  },
  /* 预紧力值 */
  {
    filed: 'speed_dc',
    name: '温度值',
    code: 45000
  }
  /* 温度值 */
  ],
  15: [
  /* 冲击 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'spm_rms',
    name: '包络解调值',
    code: 5000
  },
  /* 包络解调值 */
  {
    filed: 'spm_pp',
    name: '包络特征值',
    code: 6000
  },
  /* 包络特征值 */
  {
    filed: 'pow_rms',
    name: '能量有效值',
    code: 19000
  },
  /* 能量有效值 */
  {
    filed: 'gap',
    name: '偏置电压',
    code: 14000
  },
  /* 偏置电压 */
  {
    filed: 'sv',
    name: '冲击值',
    code: 46000
  },
  /* 冲击值 */
  {
    filed: 'sv0',
    name: '1x幅值',
    code: 55000
  },
  /* 1x幅值 */
  {
    filed: 'sv1',
    name: '1x相位',
    code: 56000
  },
  /* 1x相位 */
  {
    filed: 'sv0',
    name: '保持架对外环',
    code: 52001
  },
  /* 保持架对外环频率 */
  {
    filed: 'sv1',
    name: '保持架对内环',
    code: 52002
  },
  /* 保持架对内环频率 */
  {
    filed: 'sv2',
    name: '外环内滚道',
    code: 52003
  },
  /* 外环内滚道频率 */
  {
    filed: 'sv3',
    name: '内环外滚道',
    code: 52004
  },
  /* 内环外滚道频率 */
  {
    filed: 'sv4',
    name: '滚单',
    code: 52005
  },
  /* 滚单频率 */
  {
    filed: 'sv5',
    name: '滚双',
    code: 52006
  },
  /* 滚双频率 */
  {
    filed: 'sv6',
    name: '踏面',
    code: 52007
  },
  /* 踏面频率 */
  {
    filed: 'sv7',
    name: '邻轴齿轮',
    code: 52008
  },
  /* 邻轴齿轮频率 */
  {
    filed: 'sv8',
    name: '本轴齿轮',
    code: 52009
  },
  /* 本轴齿轮频率 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx1_scale',
    name: '频段1因数',
    code: 13001
  },
  /* 可选频段频谱幅值最大值与频谱幅值的比值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx2_scale',
    name: '频段2因数',
    code: 13002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx3_scale',
    name: '频段3因数',
    code: 13003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx4_scale',
    name: '频段4因数',
    code: 13004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx5_scale',
    name: '频段5因数',
    code: 13005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx6_scale',
    name: '频段6因数',
    code: 13006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx7_scale',
    name: '频段7因数',
    code: 13007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }, {
    filed: 'vib_vsx8_scale',
    name: '频段8因数',
    code: 13008
  }],
  16: [
  /* 冲击阶次 */
  {
    filed: 'saveTime_Com',
    name: '时间',
    code: 0
  }, {
    filed: 'speed',
    name: '转速',
    code: 1000
  },
  /* 转速（振动和包络字段） */
  {
    filed: 'spm_rms',
    name: '包络解调值',
    code: 5000
  },
  /* 包络有效值 */
  {
    filed: 'spm_pp',
    name: '包络特征值',
    code: 6000
  },
  /* 包络峰峰值 */
  {
    filed: 'pow_rms',
    name: '能量有效值',
    code: 19000
  },
  /* 能量有效值 */
  {
    filed: 'gap',
    name: '偏置电压',
    code: 14000
  },
  /* 偏置电压 */
  {
    filed: 'sv',
    name: '冲击值',
    code: 46000
  },
  /* 冲击值 */
  {
    filed: 'vib_vsx1',
    name: '频段1',
    code: 12001
  },
  /* 可选频段频谱幅值可选频段n */
  {
    filed: 'vib_vsx1_scale',
    name: '频段1因数',
    code: 13001
  },
  /* 可选频段频谱幅值最大值与频谱幅值的比值可选频段n */
  {
    filed: 'vib_vsx2',
    name: '频段2',
    code: 12002
  }, {
    filed: 'vib_vsx2_scale',
    name: '频段2因数',
    code: 13002
  }, {
    filed: 'vib_vsx3',
    name: '频段3',
    code: 12003
  }, {
    filed: 'vib_vsx3_scale',
    name: '频段3因数',
    code: 13003
  }, {
    filed: 'vib_vsx4',
    name: '频段4',
    code: 12004
  }, {
    filed: 'vib_vsx4_scale',
    name: '频段4因数',
    code: 13004
  }, {
    filed: 'vib_vsx5',
    name: '频段5',
    code: 12005
  }, {
    filed: 'vib_vsx5_scale',
    name: '频段5因数',
    code: 13005
  }, {
    filed: 'vib_vsx6',
    name: '频段6',
    code: 12006
  }, {
    filed: 'vib_vsx6_scale',
    name: '频段6因数',
    code: 13006
  }, {
    filed: 'vib_vsx7',
    name: '频段7',
    code: 12007
  }, {
    filed: 'vib_vsx7_scale',
    name: '频段7因数',
    code: 13007
  }, {
    filed: 'vib_vsx8',
    name: '频段8',
    code: 12008
  }, {
    filed: 'vib_vsx8_scale',
    name: '频段8因数',
    code: 13008
  }, {
    filed: 'sv0',
    name: '保持架对外环',
    code: 52001
  },
  /* 保持架对外环频率 */
  {
    filed: 'sv1',
    name: '保持架对内环',
    code: 52002
  },
  /* 保持架对内环频率 */
  {
    filed: 'sv2',
    name: '外环内滚道',
    code: 52003
  },
  /* 外环内滚道频率 */
  {
    filed: 'sv3',
    name: '内环外滚道',
    code: 52004
  },
  /* 内环外滚道频率 */
  {
    filed: 'sv4',
    name: '滚单',
    code: 52005
  },
  /* 滚单频率 */
  {
    filed: 'sv5',
    name: '滚双',
    code: 52006
  },
  /* 滚双频率 */
  {
    filed: 'sv6',
    name: '踏面',
    code: 52007
  },
  /* /踏面频率 */
  {
    filed: 'sv7',
    name: '邻轴齿轮',
    code: 52008
  },
  /* 邻轴齿轮频率 */
  {
    filed: 'sv8',
    name: '本轴齿轮',
    code: 52009
  }
  /* 本轴齿轮频率 */
  ]
}; // 保留小数

function round(num) {
  var dig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 255;
  var val = Math.abs(num);

  if (val >= Math.pow(10, 8) || val <= Math.pow(10, -8) || val === 0) {
    return val;
  }

  if (dig === 255) {
    dig = 0;
    var value = val;

    while (value < 1) {
      value *= 10;
      dig++;
    }

    dig += 2;
    val >= 1000 && (dig = 0);
    val >= 10 && (dig = 1);
  }

  var len = Math.pow(10, dig);
  return Math.round(num * len) / len;
} // 处理时间格式

function getTime(date) {
  var time = new Date(date);
  var YY = time.getFullYear();
  var MM = time.getMonth() + 1;
  MM < 10 && (MM = '0' + MM);
  var DD = time.getDate();
  DD < 10 && (DD = '0' + DD);
  var hh = time.getHours();
  hh < 10 && (hh = '0' + hh);
  var mm = time.getMinutes();
  mm < 10 && (mm = '0' + mm);
  var ss = time.getSeconds();
  if (date === 1578647264789) console.log(ss);
  ss < 10 && (ss = '0' + ss);
  return "".concat(YY, "-").concat(MM, "-").concat(DD, "  ").concat(hh, ":").concat(mm, ":").concat(ss);
}
/**
 * @desc 函数防抖---“立即执行版本” 和 “非立即执行版本” 的组合版本
 * @param func 需要执行的函数
 * @param wait 延迟执行时间（毫秒）
 * @param immediate---true 表立即执行，false 表非立即执行
 **/

function debounce(func, wait, immediate) {
  var timer;
  return function () {
    var context = this;
    var args = arguments;
    if (timer) clearTimeout(timer);

    if (immediate) {
      var callNow = !timer;
      timer = setTimeout(function () {
        timer = null;
      }, wait);
      if (callNow) func.apply(context, args);
    } else {
      timer = setTimeout(function () {
        func.apply(context, args);
      }, wait);
    }
  };
}
/*节流函数*/

function throttle(fn, delay) {
  var valid = true;
  return function () {
    if (!valid) {
      //休息时间 暂不接客
      return false;
    } // 工作时间，执行函数并且在间隔期内把状态位设为无效


    valid = false;
    setTimeout(function () {
      fn();
      valid = true;
    }, delay);
  };
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! sweetalert */ "./node_modules/sweetalert/dist/sweetalert.min.js")))

/***/ })

}]);
//# sourceMappingURL=2-a84c6dfccf16ff9ec5bf.js.map