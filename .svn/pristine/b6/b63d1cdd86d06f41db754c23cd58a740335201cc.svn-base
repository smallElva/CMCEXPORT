(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[8],{

/***/ "./src/components/content/system/position/table/js/pos_info.js":
/*!*********************************************************************!*\
  !*** ./src/components/content/system/position/table/js/pos_info.js ***!
  \*********************************************************************/
/*! exports provided: over_pos_loc_ch, syn_pos_loc_ch, getPositionInfo, createPosition, changePosition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "over_pos_loc_ch", function() { return over_pos_loc_ch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "syn_pos_loc_ch", function() { return syn_pos_loc_ch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPositionInfo", function() { return getPositionInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPosition", function() { return createPosition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "changePosition", function() { return changePosition; });
/* harmony import */ var _pos_methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pos_methods.js */ "./src/components/content/system/position/table/js/pos_methods.js");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


/* 固定参数 */

var isalarm_choose = {
  '0': '不报警',
  '1': '报警'
};
var isalarm_vib_choose = {
  '0': '不报警',
  '1': '报警',
  '2': '仅屏蔽故障频率报警',
  '3': '仅屏蔽特征值报警'
}; //振动、包络、阶次、倾角、晃度  这些测点有波形显示这四个选项

var resampling_choose = {
  '0': '是',
  '1': '否'
};
var pos_activity_choose = {
  '0': '有效',
  '1': '无效'
};
var task_id_choose = {
  '0': '任务1',
  '1': '任务2',
  '2': '任务3'
};
var optfreq_type_choose = {
  '0': '能量有效值',
  '1': '速度值',
  '2': '加速度值'
};
var filter_choose = {
  '0': '滤波器1',
  '1': '滤波器2',
  '2': '滤波器3'
};
var dip_model_choose = {
  '0': 'WindIT 2917BV',
  '1': 'WindIT 2917BH',
  '2': 'WindIT 2917TV-9',
  '3': 'WindIT 2917TV-18',
  '4': 'WindIT 2914BH',
  '5': 'WindIT 2918TH'
};
var sourceType_choose = {
  '0': '振动通道',
  '5': '串口'
};
var datamode_choose = {
  '0': '读保持寄存器',
  '1': '输入寄存器',
  '2': '亚当模块'
};
var calc_method_choose = {
  '0': '计数',
  '1': '高低电平'
};
var method_choose = {
  '0': '定时采样',
  '1': '手动采样'
};
var tt_pos_loc_source = {
  '0': '机舱',
  '1': '塔顶',
  '2': '塔底'
};
var over_pos_loc_ch = ["机舱", "塔顶"];
var syn_pos_loc_ch = ["机舱", "塔顶", "塔底"];
var pos_loc = {
  "15": "机舱X",
  "16": "机舱Y",
  "17": "塔顶X",
  "18": "塔顶Y",
  "24": "塔底X",
  "25": "塔底Y",
  "45": "塔筒1X",
  "46": "塔筒1Y",
  "47": "塔筒2X",
  "48": "塔筒2Y",
  "49": "塔筒3X",
  "50": "塔筒3Y",
  "51": "塔筒4X",
  "52": "塔筒4Y",
  "53": "塔筒5X",
  "54": "塔筒5Y",
  'dd': "module_name",
  'kk': "module_id"
};
function getPositionInfo(res, type) {
  if (res.msg == 0) {
    var pos_folderList = {}; //所有的组织列表，组织里面存组织ID和组织name

    var pos_machineList = {}; //所有的机组列表,（组织id：[{机组type，机组name，机组ID}]）

    var pos_dgmList = {}; //所有的采集器列表（机组id：[{采集器id,采集器name，采集器type}]）

    var pos_chaList = {}; //所有的通道列表{采集器id:[所有通道]

    var cap_chaList = {}; //长采样序号对应振动的通道列表，根据ID来查询

    var cap_sequenceNum = {}; //长采样序号列表

    var rock_chaList = {}; //晃度的通道列表

    var pos_dgmIdList = []; //临时存储（tId_macId_dgmID）唯一的采集器

    var mac_pos_id_list = {}; //一个机组下面的该类型所有通道id，保证新建测点的id不冲突

    var rock_pos_id_list = {}; //一个机组下面 存放晃度和倾角的pos_id的列表

    var task_idSources = {}; //一个通道下面所有的任务，保证任务不冲突{dgm_id:{ch_name:{[task_id_sources],[indexs]}}}

    var invalidPos = []; //失效测点集合

    var data = []; //测点集合

    var position = {}; //单个测点

    var rock_list = {}; //存放倾角测点

    if (!res.new_position_list.length > 0) {
      return;
    } else {
      //组织数据结构（多machine_info.positions属性）
      res.new_position_list.forEach(function (new_position) {
        pos_folderList[new_position.t_name] = new_position.t_id;
        pos_machineList[new_position.t_name] = {};
        new_position.machine_info.forEach(function (machine_info) {
          pos_machineList[new_position.t_name][machine_info.mac_me] = {
            'mac_id': machine_info.mac_id,
            'm_type': machine_info.m_type
          };
          mac_pos_id_list[machine_info.mac_id] = []; //获得所有mac_id 的集合对象(额外用途)测点Id列表

          rock_pos_id_list[machine_info.mac_id] = [];
          pos_dgmList[machine_info.mac_id] = {};

          if (type == 10 || type == 13 || type == 12) {
            //倾角、合成倾角、工艺量测点需要加上虚拟采集器的通道
            if (res.model != undefined) {
              machine_info.bindDgm_list.push(res.model);
            }
          }

          machine_info.bindDgm_list.forEach(function (bindDgm_list) {
            pos_dgmIdList.push(new_position.t_id + '_' + machine_info.mac_id + '_' + bindDgm_list.dgm_id); //获取所有的采集器id，不存在采集器的测点屏蔽

            pos_dgmList[machine_info.mac_id][bindDgm_list.dgm_name] = {
              "dgm_id": bindDgm_list.dgm_id,
              "dgm_type": bindDgm_list.dgm_type
            };

            if (type == 11 || type == 13) {
              //倾覆或者倾角的组织结构方式不一样
              rock_chaList[bindDgm_list.dgm_id] = {};

              for (var key in pos_loc) {
                rock_chaList[bindDgm_list.dgm_id][pos_loc[key]] = {};
              }
            }

            pos_chaList[bindDgm_list.dgm_id] = {};
            cap_chaList[bindDgm_list.dgm_id] = {};
            cap_sequenceNum[bindDgm_list.dgm_id] = {};
            task_idSources[bindDgm_list.dgm_id] = {};
            var taskArr = [3, 4, 8, 9, 15, 16]; //振动、包络、阶次,冲击

            bindDgm_list.channel_list.forEach(function (channel) {
              var ch_name = channel.ch_name;
              var ch_id = channel.ch_id;
              var ch_type = channel.ch_type;

              if (type == 11) {
                //如果是倾覆测点
                over_pos_loc_ch.forEach(function (item) {
                  if (bindDgm_list.dgm_type == 1 || bindDgm_list.dgm_type == 4) {
                    task_idSources[bindDgm_list.dgm_id][item] = ["0"];
                  } else {
                    task_idSources[bindDgm_list.dgm_id][item] = ["0", "1", "2"];
                  }
                });
              } else if (taskArr.indexOf(type) > -1 && (bindDgm_list.dgm_type == 2 || bindDgm_list.dgm_type == 3 || bindDgm_list.dgm_type == 7)) {
                task_idSources[bindDgm_list.dgm_id][ch_name] = ["0", "1", "2"]; //制造一个全满的任务,DGU2200 DGU2000V2 tms2000三个任务
              } else {
                task_idSources[bindDgm_list.dgm_id][ch_name] = ["0"]; //其他只有一个任务（暂时没用）
              }

              if (type == 11 || type == 13) {
                //仅在机舱、塔顶、塔底形成任务
                if (pos_loc[channel.pos_loc] !== undefined) {
                  rock_chaList[bindDgm_list.dgm_id][pos_loc[channel.pos_loc]] = {
                    "ch_id": ch_id,
                    "ch_name": ch_name,
                    "ch_type": ch_type
                  };
                }

                if (ch_type == "5" || ch_type == '14') {
                  //串口||虚拟采集器
                  rock_chaList[bindDgm_list.dgm_id]["module_name"][ch_name] = {
                    "ch_id": ch_id,
                    "ch_type": ch_type
                  };
                  rock_chaList[bindDgm_list.dgm_id]["module_id"][ch_id] = {
                    "ch_name": ch_name,
                    "ch_type": ch_type
                  };
                }
              }

              if (type == 200) {
                //长采样的通道
                if (ch_type == "0") {
                  //振动通道
                  pos_chaList[bindDgm_list.dgm_id][ch_name] = {
                    "ch_id": ch_id,
                    "ch_type": ch_type
                  };
                  cap_chaList[bindDgm_list.dgm_id][ch_id] = {
                    "ch_name": ch_name
                  };
                } else if (ch_type == "11" && channel.ch1 != 255 && channel.ch1 != null) {
                  //长采样序号通道
                  cap_sequenceNum[bindDgm_list.dgm_id][ch_id] = {
                    "vib_id": channel.ch1
                  };
                }
              } else {
                pos_chaList[bindDgm_list.dgm_id][ch_name] = {
                  "ch_id": ch_id,
                  "ch_type": ch_type
                };
              }
            });
          });
        });
      });
      res.position_list.forEach(function (position_list) {
        //第一遍遍历在任务集合中删除已经存在的任务
        position_list.machine_info.forEach(function (machine_info) {
          machine_info.positions.forEach(function (positions) {
            if (!pos_dgmIdList.includes(position_list.t_id + '_' + positions.mac_id + '_' + positions.dgm_id)) {
              //如果这个测点绑定的采集器不存在则跳过这个测点
              return;
            } else if (!mac_pos_id_list[machine_info.mac_id]) {
              //没机组的测点直接删除
              console.log("没有机组" + position_list.t_id, positions);
              return;
            } else {
              var pos_tast = task_idSources[positions.dgm_id][positions.ch_name]; //删除集合中对应的任务

              if (pos_tast instanceof Array && pos_tast.indexOf(positions.task_id) != -1) {
                //集合中存在这个测点的任务
                pos_tast.splice(pos_tast.indexOf(positions.task_id), 1); //删除这个任务
              } else if (positions.task_id === "") {
                console.log('没有task_id');
              } else if (positions.task_id == 0) {
                console.log('任务1', positions);
              } else {
                console.log('重复任务,或没有该通道', positions);
              }
            }
          });
        });
      });
      res.position_list.forEach(function (position_list) {
        position_list.machine_info.forEach(function (machine_info) {
          if (type == 11 || type == 13) {
            //如果是倾覆和倾角测点，需要循环出rock_list
            machine_info.rock_list.forEach(function (rock_pos) {
              var key = "".concat(rock_pos.mac_id, "_").concat(rock_pos.pos_type, "_").concat(rock_pos.pos_id);
              rock_list[key] = rock_pos;
            });
          }

          machine_info.positions.forEach(function (positions) {
            //获取每个机组的测点ID,id就是数组的下标
            if (positions.baseInfo && Object.keys(positions.baseInfo).length == 0) {
              positions.t_name = position_list.t_name;
              positions.mac_name = machine_info.mac_me;
              invalidPos.push(positions);
              console.log("baseInfo为空", positions);
              return;
            }

            var baseInfo = positions.baseInfo;

            if (!mac_pos_id_list[machine_info.mac_id]) {
              //没机组的测点直接忽略
              console.log("缺少机组" + position_list.t_id, positions);
              /* 将失效测点保存起来统一处理 */

              positions.t_name = position_list.t_name;
              positions.mac_name = machine_info.mac_me;
              invalidPos.push(positions);
              return;
            }
            /* 搜集rock pos_id */


            if (type == 11 || type == 13) {
              //如果是倾覆和合成倾角，需要保存对应的晃度和倾角的pos_id
              rock_pos_id_list[machine_info.mac_id][baseInfo.rock1_id] = baseInfo.rock1_id;
              rock_pos_id_list[machine_info.mac_id][baseInfo.rock2_id] = baseInfo.rock2_id;
            }

            mac_pos_id_list[machine_info.mac_id][positions.pos_id] = positions.pos_id; // 组装测点id 的集合，保证新建测点的id不重复

            /* 不显示没有采集器的测点 */

            if (!pos_dgmIdList.includes(position_list.t_id + '_' + positions.mac_id + '_' + positions.dgm_id)) {
              //没采集器的测点屏蔽
              console.log("缺少采集器", positions);
              positions.t_name = position_list.t_name;
              positions.mac_name = machine_info.mac_me;
              invalidPos.push(positions);
              return;
            }
            /* 不显示没有通道的测点 */


            if (pos_chaList[positions.dgm_id][positions.ch_name] === undefined) {
              console.log('该测点缺少通道', positions);
              positions.t_name = position_list.t_name;
              positions.mac_name = machine_info.mac_me;
              invalidPos.push(positions);
              return;
            }

            var task_id_sources = task_idSources[positions.dgm_id][positions.ch_name]; //克隆这个数组

            task_id_sources = task_id_sources.slice(); //添加上自己任务的id

            task_id_sources.push(positions.task_id);
            task_id_sources = Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_0__["taskArray"])(task_id_sources); //数组排序
            //获取每个测点的可选通道 ch_sources

            var ch_sources = [];

            if (type == 11) {
              ch_sources = over_pos_loc_ch;
            } else if (type == 13) {
              ch_sources = syn_pos_loc_ch;
            } else {
              ch_sources = Object.keys(pos_chaList[positions.dgm_id]);
            }

            position = {
              operate: 0,
              //可修改行标记
              oldInfo: {},
              //标记测点修改之前的信息
              updateTime: positions.updateTime,
              t_id: position_list.t_id,
              t_name: position_list.t_name,
              t_sources: Object.keys(pos_folderList).sort(),
              m_type: positions.m_type,
              mac_id: positions.mac_id,
              mac_me: machine_info.mac_me,
              macName_sources: [],
              dgm_id: positions.dgm_id,
              dgm_type: positions.dgm_type,
              dgm_name: positions.dgm_name,
              dgm_sources: [],
              ch_id: positions.ch_id,
              ch_type: positions.ch_type,
              ch_name: positions.ch_name,
              ch_sources: ch_sources.sort(),
              pos_id: positions.pos_id,
              pos_name: positions.pos_name,
              pos_type: type,
              pos_type_name: Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_0__["posType_name"])(type),
              pos_activity: positions.pos_activity == "" ? "0" : positions.pos_activity,
              pos_activity_val: positions.pos_activity == "" ? pos_activity_choose["0"] : pos_activity_choose[positions.pos_activity],
              //是否有效
              pos_activity_sources: Object.values(pos_activity_choose),
              pos_activity_sources_key: Object.keys(pos_activity_choose),
              isalarm: positions.isalarm == "" ? "0" : positions.isalarm,
              isalarm_val: positions.isalarm == "" ? isalarm_vib_choose["0"] : isalarm_vib_choose[positions.isalarm],
              //是否报警
              isalarm_sources: Object.values(isalarm_choose),
              isalarm_sources_key: Object.keys(isalarm_choose),
              task_id: positions.task_id,
              task_id_val: task_id_choose[positions.task_id],
              //任务Id
              task_id_sources: task_id_sources,
              //每个通道的任务id源，不包括自身的任务
              task_id_choose: Object.values(task_id_choose),
              task_id_choose_key: Object.keys(task_id_choose),
              // alarm_smooth_a:baseInfo.alarm_smooth_a,//报警投票机制a
              // alarm_smooth_b:baseInfo.alarm_smooth_b,//报警投票机制b
              baseInfo: {}
            };

            if (type == 3 || type == 15 || type == 4 || type == 8 || type == 16 || type == 9 || type == 6 || type == 11 || type == 12 || type == 13) {
              //振动系列测点
              //组测点数据
              position.isalarm_sources = Object.values(isalarm_vib_choose);
              position.isalarm_sources_key = Object.keys(isalarm_vib_choose);
              var frequency_source = Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_0__["frequencySources"])(positions, baseInfo.filter);
              position.baseInfo = {
                alarmList: baseInfo.alarmList,
                filter: baseInfo.filter,
                filter_val: filter_choose[baseInfo.filter],
                filter_sources: Object.values(filter_choose),
                filter_sources_key: Object.keys(filter_choose),
                frequency: baseInfo.frequency,
                //分析频率 采样周期(order)
                frequency_val: frequency_source[baseInfo.frequency],
                frequency_sources: Object.values(frequency_source),
                frequency_sources_key: Object.keys(frequency_source),
                spectral: baseInfo.spectral,
                //谱线数 采样点数(order)
                spectral_sources: Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_0__["spectralSources"])(positions.dgm_type, positions.pos_type),
                resampling: baseInfo.resampling,
                resampling_val: resampling_choose[baseInfo.resampling],
                resampling_sources: Object.values(resampling_choose),
                resampling_sources_key: Object.keys(resampling_choose)
              };

              if (type == 3) {
                //振动测点微信报警信息
                Object.assign(position.baseInfo, {
                  alarm_smooth_a: baseInfo.alarm_smooth_a,
                  //报警投票机制a
                  alarm_smooth_b: baseInfo.alarm_smooth_b,
                  //报警投票机制b
                  levelRms: baseInfo.levelRms,
                  //过滤阈值：这个可以填小数
                  areaRatio: baseInfo.areaRatio,
                  //增长百分比：正数，填20，就是20%的意思
                  sampHours: baseInfo.sampHours,
                  //平均值计算时间：正整数，多少小时的意思
                  death_time: baseInfo.death_time,
                  //死区时间，单位小时，新增：正整数
                  packn: baseInfo.packn //连续n包，新增：正整数

                });
              }

              Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_0__["computed__frequency_spectral"])(position);

              for (var k = 0; k < 8; k++) {
                var band = baseInfo.band;
                position.baseInfo["band".concat(k)] = {
                  dwOpt_freq_selected: band[k].dwOpt_freq_selected == "" ? "0" : band[k].dwOpt_freq_selected,
                  //是否选择频段
                  dwOpt_freq_name: band[k].dwOpt_freq_name == "" ? "\u9891\u6BB5".concat(k + 1) : band[k].dwOpt_freq_name,
                  //是否有频段名称
                  optfreq_type: band[k].optfreq_type == "" ? "0" : band[k].optfreq_type,
                  //频段类型，如果没有默认给能量有效值
                  optfreq_type_val: band[k].optfreq_type == "" ? optfreq_type_choose['0'] : optfreq_type_choose[band[k].optfreq_type],
                  optfreq_type_sources: Object.values(optfreq_type_choose),
                  optfreq_type_sources_key: Object.keys(optfreq_type_choose),
                  dwOpt_freq_begin: band[k].dwOpt_freq_begin == "" ? "0.1" : band[k].dwOpt_freq_begin,
                  dwOpt_freq_end: band[k].dwOpt_freq_end == "" ? "10" : band[k].dwOpt_freq_end
                };
              }

              if (type == 11 || type == 13) {
                //倾覆和合成倾角共有部分
                Object.assign(position.baseInfo, {
                  tt_sensor_name: baseInfo.tt_sensor_name,
                  //传感器名称
                  tt_ch_type: baseInfo.tt_ch_type,
                  // 关联通道（虚拟） 倾覆或合成倾角的测点类型
                  tt_ch_id: baseInfo.tt_ch_id,
                  //关联通道（虚拟） 倾覆或合成倾角的测点id
                  tt_pos_loc: baseInfo.tt_pos_loc,
                  //安装位置 塔顶、机舱、塔底
                  tt_pos_loc_source: Object.values(tt_pos_loc_source),
                  tt_pos_loc_source_key: Object.keys(tt_pos_loc_source),
                  rock1_id: baseInfo.rock1_id,
                  rock1_pos_name: baseInfo.rock1_pos_name,
                  // 晃度X名称
                  rock1_ch_id: baseInfo.rock1_ch_id,
                  rock2_id: baseInfo.rock2_id,
                  rock2_pos_name: baseInfo.rock2_pos_name,
                  // 晃度Y名称
                  rock2_ch_id: baseInfo.rock2_ch_id
                });

                if (type == 11) {
                  //倾覆独有部分
                  Object.assign(position.baseInfo, {
                    rock1_ch_name: rock_chaList[positions.dgm_id][positions.ch_name + "X"].ch_name,
                    //晃度X关联通道名称
                    rock1_ch_type: rock_chaList[positions.dgm_id][positions.ch_name + "X"].ch_type,
                    //关联通道的类型
                    rock2_ch_name: rock_chaList[positions.dgm_id][positions.ch_name + "Y"].ch_name,
                    //晃度Y关联通道
                    rock2_ch_type: rock_chaList[positions.dgm_id][positions.ch_name + "Y"].ch_type,
                    //关联通道的类型
                    sUnitName: baseInfo.sUnitName,
                    self1: baseInfo.self1,
                    self2: baseInfo.self2
                  });
                }

                if (type == 13) {
                  //合成倾角独有部分
                  var rock1_ch_name;
                  var rock2_ch_name;
                  var rock_ch_type;
                  var rockSource;

                  if (baseInfo.sourceType == 5) {
                    //串口
                    var moduleList = rock_chaList[position.dgm_id]['module_name'];
                    rockSource = Object.keys(moduleList);
                    rock1_ch_name = rock2_ch_name = rock_chaList[positions.dgm_id]["module_id"][baseInfo.rock1_ch_id].ch_name;
                    rock_ch_type = 5; //串口通道
                  } else if (baseInfo.sourceType == 0) {
                    //振动
                    rock1_ch_name = rock_chaList[positions.dgm_id][positions.ch_name + "X"].ch_name;
                    rock2_ch_name = rock_chaList[positions.dgm_id][positions.ch_name + "Y"].ch_name;
                    rock_ch_type = 0; //振动通道
                  }

                  Object.assign(position.baseInfo, {
                    rock1_ch_name: rock1_ch_name,
                    //
                    rock1_ch_type: rock_ch_type,
                    rock2_ch_name: rock2_ch_name,
                    //晃度Y关联通道
                    rock2_ch_type: rock_ch_type,
                    rock1_ch_sources: rockSource,
                    //rock可选通道
                    rock2_ch_sources: rockSource,
                    offset_angle: baseInfo.offset_angle,
                    //偏置角度
                    dip_model: baseInfo.dip_model,
                    //传感器类型
                    dip_model_val: dip_model_choose[baseInfo.dip_model],
                    dip_model_sources: Object.values(dip_model_choose),
                    dip_model_sources_key: Object.keys(dip_model_choose),
                    sourceType: baseInfo.sourceType,
                    //数据来源
                    sourceType_val: sourceType_choose[baseInfo.sourceType],
                    sourceType_sources: Object.values(sourceType_choose),
                    sourceType_sources_key: Object.keys(sourceType_choose),
                    diameter: baseInfo.diameter,
                    //基础直径
                    offset1: baseInfo.offset1,
                    //偏移量1
                    slaveid1: baseInfo.slaveid1,
                    //从设备号1
                    offset2: baseInfo.offset2,
                    //偏移量2
                    slaveid2: baseInfo.slaveid2,
                    //从设备号2
                    datamode1: baseInfo.datamode1,
                    //过程量类型
                    datamode1_val: datamode_choose[baseInfo.datamode1],
                    datamode1_sources: Object.values(datamode_choose),
                    datamode1_sources_key: Object.keys(datamode_choose),
                    datamode2: baseInfo.datamode2,
                    datamode2_val: datamode_choose[baseInfo.datamode2],
                    datamode2_sources: Object.values(datamode_choose),
                    datamode2_sources_key: Object.keys(datamode_choose)
                  });
                }
              }
            }

            if (type == 1) {
              //转速测点
              position.baseInfo = {
                baseRate: baseInfo.baseRate,
                byUnit: baseInfo.byUnit,
                speedRate: baseInfo.speedRate,
                min_speed: baseInfo.min_speed,
                max_speed: baseInfo.max_speed,
                svibsList: baseInfo.svibsList
              };
            }

            if (type == 7 || type == 2) {
              //温度过程量测点
              position.baseInfo = {
                h_limit: baseInfo.h_limit,
                hh_limit: baseInfo.hh_limit,
                l_limit: baseInfo.l_limit,
                ll_limit: baseInfo.ll_limit
              };
            }

            if (type == 5) {
              //数字量
              position.baseInfo = {
                hh_limit: baseInfo.hh_limit,
                h_limit: baseInfo.h_limit,
                calc_method: baseInfo.calc_method,
                calc_method_val: calc_method_choose[baseInfo.calc_method],
                calc_method_sources: Object.values(calc_method_choose),
                calc_method_sources_key: Object.keys(calc_method_choose)
              };
            }

            if (type == 14) {
              //螺栓测点
              position.baseInfo = {
                alarmList: baseInfo.alarmList,
                alarm_smooth_a: baseInfo.alarm_smooth_a,
                alarm_smooth_b: baseInfo.alarm_smooth_b,
                posShow: baseInfo.posShow,
                alarm_grow: baseInfo.alarm_grow,
                warn_grow: baseInfo.warn_grow
              };
            }

            if (type == 10) {
              //工艺量测点
              position.baseInfo = {
                byUnit: baseInfo.byUnit,
                //单位索引
                normal: baseInfo.normal,
                //过程量正常类型转换
                byUnitName: baseInfo.byUnitName,
                //名称
                unitNum: baseInfo.unitNum,
                //数据有效位
                hh_limit: baseInfo.hh_limit,
                //报警高
                h_limit: baseInfo.h_limit,
                //预警高
                l_limit: baseInfo.l_limit,
                //预警低
                ll_limit: baseInfo.ll_limit,
                //报警低
                hi_value: baseInfo.hi_value,
                //工程量输入范围高
                low_value: baseInfo.low_value,
                //工程量输入范围低
                ref_vol: baseInfo.ref_vol,
                //信号输入范围高
                ref_eng: baseInfo.ref_eng,
                //信号输入范围低
                scale: baseInfo.scale,
                //校正参数
                corr: baseInfo.corr,
                //零点偏移
                dataaddress: baseInfo.dataaddress,
                //数据地址
                datamode: baseInfo.datamode,
                //过程量类型
                datamode_val: datamode_choose[baseInfo.datamode],
                datamode_sources: Object.values(datamode_choose),
                datamode_sources_key: Object.keys(datamode_choose),
                slaveid: baseInfo.slaveid,
                //从设备号
                value_left: baseInfo.value_left,
                //左比较值
                value_right: baseInfo.value_right //右比较值

              };
            }

            if (type == 200) {
              //长采样测点
              var capture_byId = baseInfo.capture_byId;
              var capture_sources = [];
              var capture_chName_sources = [];

              if (baseInfo.capture_mode == 0) {
                //定时采样

                /* 序号可选 */
                capture_sources = Object.keys(cap_sequenceNum[positions.dgm_id]);
                /* 通道不可选 */

                capture_chName_sources = [positions.ch_name];
              } else if (baseInfo.capture_mode == 1) {
                /* 序号不可选 */
                capture_sources = [];
                /* 通道可选 */

                capture_chName_sources = Object.keys(pos_chaList[positions.dgm_id]);
              }

              position.baseInfo = {
                capture_mode: baseInfo.capture_mode,
                //采样方式 0=定时 1=手动
                method_val: method_choose[baseInfo.capture_mode],
                method_sources: Object.values(method_choose),
                method_sources_key: Object.keys(method_choose),
                capture_byId: capture_byId,
                //定时长采样序号
                capture_sources: capture_sources,
                //定时长采样序号可选
                capture_chName: positions.ch_name,
                //定时长采样通道
                capture_chName_sources: capture_chName_sources //长采样通道的可选

              };
            }

            data.push(position);
          });
        });
      });
      return {
        pos_folderList: pos_folderList,
        pos_machineList: pos_machineList,
        pos_dgmList: pos_dgmList,
        pos_chaList: pos_chaList,
        mac_pos_id_list: mac_pos_id_list,
        task_idSources: task_idSources,
        rock_chaList: rock_chaList,
        cap_sequenceNum: cap_sequenceNum,
        cap_chaList: cap_chaList,
        rock_pos_id_list: rock_pos_id_list,
        rock_list: rock_list,
        invalidPos: invalidPos,
        data: data
      };
    }
  }
}
function createPosition(type) {
  var position = {
    operate: 1,
    oldInfo: {},
    //标记测点修改之前的信息
    updateTime: 0,
    //未添加的属性在后续函数中添加
    t_id: '',
    t_name: '',
    t_sources: '',
    //下拉列表
    mac_id: '',
    m_type: '',
    mac_me: '',
    macName_sources: {},
    //下拉列表
    dgm_id: '',
    dgm_type: '',
    dgm_name: '',
    dgm_sources: {},
    //下拉列表
    ch_id: "",
    ch_type: "",
    ch_name: '',
    ch_sources: {},
    pos_id: "",
    pos_name: "",
    pos_type: type,
    pos_type_name: Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_0__["posType_name"])(type),
    pos_activity: "0",
    pos_activity_val: "有效",
    pos_activity_sources: Object.values(pos_activity_choose),
    pos_activity_sources_key: Object.keys(pos_activity_choose),
    isalarm: "0",
    isalarm_val: "不报警",
    isalarm_sources: Object.values(isalarm_choose),
    isalarm_sources_key: Object.keys(isalarm_choose),
    task_id: "",
    task_id_old: "",
    task_id_val: "",
    task_id_sources: "",
    task_id_choose: Object.values(task_id_choose),
    task_id_choose_key: Object.keys(task_id_choose),
    baseInfo: _defineProperty({
      posShow: "0",
      //是否显示在总貌图
      alarm_smooth_a: '1',
      alarm_smooth_b: '1',
      alarmList: [],
      //报警值

      /* 转速 */
      speedRate: '1',
      baseRate: '1',
      byUnit: 'rpm',
      min_speed: 7,
      max_speed: 25,
      svibsList: [],

      /* 温度过程量系列 */
      hh_limit: "20",
      h_limit: "10",
      l_limit: "-10",
      ll_limit: "-20",

      /* 数字量系列 */
      calc_method: "0",
      //计算方式
      calc_method_val: "计数",
      calc_method_sources: Object.values(calc_method_choose),
      calc_method_sources_key: Object.keys(calc_method_choose),
      // hh_limit:"20",//报警（高）
      // h_limit:"10",//预警（高）

      /* 振动测点 */
      levelRms: '0',
      //过滤阈值：这个可以填小数
      areaRatio: '20',
      //增长百分比：正数，填20，就是20%的意思
      sampHours: '24',
      //平均值计算时间：正整数，多少小时的意思
      death_time: '4',
      //死区时间，单位小时，新增：正整数
      packn: '2',
      //连续n包，新增：正整数

      /* 振动系列 */
      frequency: "",
      frequency_val: "",
      frequency_sources: "",
      spectral: "",
      spectral_val: "",
      spectral_sources: "",
      filter: "0",
      filter_val: "滤波器1",
      filter_sources: Object.values(filter_choose),
      filter_sources_key: Object.keys(filter_choose),
      order: "",
      specOrder: "",
      //过采样
      resampling: '0',
      resampling_val: '是',
      resampling_sources: Object.values(resampling_choose),
      resampling_sources_key: Object.keys(resampling_choose),

      /* 工艺量 */
      // byUnit: "0",//单位索引
      byUnitName: "m",
      //名称
      unitNum: "4",
      //数据有效位
      // hh_limit: "20",//报警高 (上面有)
      // h_limit: "10",//预警高
      // l_limit:"-10",//预警低
      // ll_limit:"-20",//报警低
      hi_value: "1000",
      //工程量输入范围高
      low_value: "-1000",
      //工程量输入范围低
      ref_vol: "1000",
      //信号输入范围高
      ref_eng: "-1000",
      //信号输入范围低
      corr: "1",
      //校正参数
      scale: "0",
      //零点偏移
      dataaddress: "40001",
      //数据地址
      datamode: "0",
      //过程量类型
      datamode_val: "读保持寄存器",
      datamode_sources: Object.values(datamode_choose),
      datamode_sources_key: Object.keys(datamode_choose),
      slaveid: "1",
      //从设备号
      normal: "0",
      //正常
      value_left: "0",
      //左比较值
      value_right: "0",
      //右比较值

      /* 倾覆和合成倾角的测点 */
      tt_sensor_name: "",
      //传感器名称
      tt_ch_type: type,
      // 关联通道（虚拟） 倾覆或合成倾角的测点类型
      tt_ch_id: "",
      //关联通道（虚拟） 倾覆或合成倾角的测点id
      tt_pos_loc: "",
      //安装位置 塔顶、机舱、塔底
      tt_pos_loc_source: Object.values(tt_pos_loc_source),
      tt_pos_loc_source_key: Object.keys(tt_pos_loc_source),
      rock1_id: "",
      rock1_pos_name: "",
      // 晃度倾角X名称
      rock1_ch_id: "",
      rock1_ch_name: " ",
      //晃度倾角X关联通道名称
      rock1_ch_sources: "",
      rock2_id: "",
      rock2_pos_name: "",
      // 晃度倾角Y名称
      rock2_ch_id: "",
      rock2_ch_name: "  ",
      //晃度倾角Y关联通道
      rock2_ch_sources: "",
      sUnitName: "mm",
      self1: "0",
      self2: "0",

      /* 合成倾角部分 */
      offset_angle: 0,
      //偏置角度
      dip_model: "0",
      //传感器类型
      dip_model_val: "WindIT 2917BV",
      dip_model_sources: Object.values(dip_model_choose),
      dip_model_sources_key: Object.keys(dip_model_choose),
      sourceType: '5',
      //数据来源
      sourceType_val: '串口',
      sourceType_sources: Object.values(sourceType_choose),
      sourceType_sources_key: Object.keys(sourceType_choose),
      diameter: 4000,
      //基础直径
      offset1: 0,
      //偏移量1
      slaveid1: 1,
      //从设备号1
      offset2: 0,
      //偏移量2
      slaveid2: 1,
      //从设备号2
      datamode1: '0',
      //过程量类型 '读保持寄存器'
      datamode1_val: '读保持寄存器',
      datamode1_sources: Object.values(datamode_choose),
      datamode1_sources_key: Object.keys(datamode_choose),
      datamode2: '0',
      datamode2_val: '读保持寄存器',
      datamode2_sources: Object.values(datamode_choose),
      datamode2_sources_key: Object.keys(datamode_choose),

      /* 长采样默认值 */
      capture_mode: "1",
      method_val: "手动采样",
      method_sources: Object.values(method_choose),
      method_sources_key: Object.keys(method_choose),
      capture_byId: '1',
      //定时长采样序号
      capture_sources: "",
      //定时长采样序号可选
      capture_chName: "",
      //定时长采样通道
      capture_chName_sources: []
    }, "alarmList", [])
  };
  var dwOpt_freq_begin, dwOpt_freq_end;

  for (var i = 0; i < 8; i++) {
    if (i == 0) {
      dwOpt_freq_begin = '0.1';
      dwOpt_freq_end = '10';
    } else if (i == 1) {
      dwOpt_freq_begin = '10';
      dwOpt_freq_end = '2000';
    } else if (i == 2) {
      dwOpt_freq_begin = '10';
      dwOpt_freq_end = '5000';
    } else {
      dwOpt_freq_begin = "".concat(i * 10);
      dwOpt_freq_end = "".concat((i + 1) * 10);
    }

    position.baseInfo["band".concat(i)] = {
      dwOpt_freq_selected: "0",
      dwOpt_freq_name: "\u9891\u6BB5".concat(i + 1),
      optfreq_type_val: "能量有效值",
      optfreq_type: "0",
      optfreq_type_sources: Object.values(optfreq_type_choose),
      optfreq_type_sources_key: Object.keys(optfreq_type_choose),
      dwOpt_freq_begin: dwOpt_freq_begin,
      dwOpt_freq_end: dwOpt_freq_end
    };
  }

  if (type == 10) {
    position.baseInfo.byUnit = "0";
  }

  if (type == 3 || type == 15 || type == 4 || type == 8 || type == 16 || type == 9 || type == 6 || type == 11 || type == 12 || type == 13) {
    //振动系报警值较多
    position.isalarm_sources = Object.values(isalarm_vib_choose);
    position.isalarm_sources_key = Object.keys(isalarm_vib_choose);
  }

  return position;
}
function changePosition(type, oldPosition) {
  var position = {};
  position.index = oldPosition.index;
  position.updateTime = oldPosition.updateTime;
  position.mac_id = oldPosition.mac_id; //机组uid

  position.m_type = oldPosition.m_type; //机组uid

  position.dgm_type = oldPosition.dgm_type; //采集站类型：处理测点设置的差异化、测点数目等

  position.dgm_id = oldPosition.dgm_id;
  position.dgm_name = oldPosition.dgm_name;
  position.ch_type = oldPosition.ch_type;
  position.ch_id = oldPosition.ch_id;
  position.ch_name = oldPosition.ch_name;
  position.pos_id = oldPosition.pos_id;
  position.pos_type = type;
  position.pos_name = oldPosition.pos_name; //测点名称

  position.task_id = oldPosition.task_id; //任务

  position.pos_activity = oldPosition.pos_activity; //是否有效

  position.isalarm = oldPosition.isalarm; //报警

  if (type == 3 || type == 15 || type == 4 || type == 8 || type == 16 || type == 9 || type == 6 || type == 12 || type == 11 || type == 13) {
    var _position$baseInfo;

    //振动系列
    position.baseInfo = (_position$baseInfo = {
      alarm_smooth_a: oldPosition.baseInfo.alarm_smooth_a,
      alarm_smooth_b: oldPosition.baseInfo.alarm_smooth_b,
      alarmList: oldPosition.baseInfo.alarmList,
      resampling: '0',
      //重新采样
      posShow: "0",
      //是否显示在总貌图
      filter: oldPosition.baseInfo.filter,
      hanning: "1",
      //是否汉宁窗
      warn_grow: "20",
      //预警梯度
      alarm_grow: "20",
      //报警梯度
      frequency: oldPosition.baseInfo.frequency,
      spectral: oldPosition.baseInfo.spectral
    }, _defineProperty(_position$baseInfo, "resampling", oldPosition.baseInfo.resampling), _defineProperty(_position$baseInfo, "band", []), _position$baseInfo);

    for (var i = 0; i < 8; i++) {
      position.baseInfo.band[i] = {
        lineNum: String(i + 1),
        dwOpt_freq_selected: oldPosition.baseInfo["band".concat(i)].dwOpt_freq_selected,
        dwOpt_freq_name: oldPosition.baseInfo["band".concat(i)].dwOpt_freq_name,
        optfreq_type: oldPosition.baseInfo["band".concat(i)].optfreq_type,
        dwOpt_freq_begin: oldPosition.baseInfo["band".concat(i)].dwOpt_freq_begin,
        dwOpt_freq_end: oldPosition.baseInfo["band".concat(i)].dwOpt_freq_end
      };
    }

    if (type == 3) {
      //微信报警信息
      Object.assign(position.baseInfo, {
        levelRms: oldPosition.baseInfo.levelRms,
        //过滤阈值：这个可以填小数
        areaRatio: oldPosition.baseInfo.areaRatio,
        //增长百分比：正数，填20，就是20%的意思
        sampHours: oldPosition.baseInfo.sampHours,
        //平均值计算时间：正整数，多少小时的意思
        death_time: oldPosition.baseInfo.death_time,
        //死区时间，单位小时，新增：正整数
        packn: oldPosition.baseInfo.packn //连续n包，新增：正整数

      });
    }

    if (type == 11 || type == 13) {
      //倾覆和合成倾角
      Object.assign(position.baseInfo, {
        tt_sensor_name: oldPosition.baseInfo.tt_sensor_name,
        //传感器名称
        tt_ch_type: oldPosition.baseInfo.tt_ch_type,
        // 关联通道（虚拟） 倾覆或合成倾角的测点类型
        tt_ch_id: oldPosition.baseInfo.tt_ch_id,
        //关联通道（虚拟） 倾覆或合成倾角的测点id
        tt_pos_loc: oldPosition.baseInfo.tt_pos_loc,
        //安装位置 塔顶、机舱、塔底
        rock1_id: oldPosition.baseInfo.rock1_id,
        rock1_pos_name: oldPosition.baseInfo.rock1_pos_name,
        rock1_ch_id: oldPosition.baseInfo.rock1_ch_id,
        rock1_ch_name: oldPosition.baseInfo.rock1_ch_name,
        rock1_ch_type: oldPosition.baseInfo.rock1_ch_type,
        rock2_id: oldPosition.baseInfo.rock2_id,
        rock2_pos_name: oldPosition.baseInfo.rock2_pos_name,
        rock2_ch_id: oldPosition.baseInfo.rock2_ch_id,
        rock2_ch_name: oldPosition.baseInfo.rock2_ch_name,
        rock2_ch_type: oldPosition.baseInfo.rock2_ch_type
      });

      if (type == 11) {
        //倾覆独有部分
        Object.assign(position.baseInfo, {
          sUnitName: oldPosition.baseInfo.sUnitName,
          self1: oldPosition.baseInfo.self1,
          self2: oldPosition.baseInfo.self2
        });
      }

      if (type == 13) {
        //合成倾角独有部分
        Object.assign(position.baseInfo, {
          offset_angle: oldPosition.baseInfo.offset_angle,
          //偏置角度
          dip_model: oldPosition.baseInfo.dip_model,
          //传感器类型
          sourceType: oldPosition.baseInfo.sourceType,
          //数据来源
          diameter: oldPosition.baseInfo.diameter,
          //基础直径
          offset1: oldPosition.baseInfo.offset1,
          //偏移量1
          slaveid1: oldPosition.baseInfo.slaveid1,
          //从设备号1
          offset2: oldPosition.baseInfo.offset2,
          //偏移量2
          slaveid2: oldPosition.baseInfo.slaveid2,
          //从设备号2
          datamode1: oldPosition.baseInfo.datamode1,
          //过程量类型
          datamode2: oldPosition.baseInfo.datamode2
        });
      }
    }
  } else if (type == 1) {
    //转速系列
    position.baseInfo = {
      alarm_smooth_a: oldPosition.baseInfo.alarm_smooth_a,
      alarm_smooth_b: oldPosition.baseInfo.alarm_smooth_b,
      speedRate: oldPosition.baseInfo.speedRate,
      baseRate: oldPosition.baseInfo.baseRate,
      byUnit: oldPosition.baseInfo.byUnit,
      min_speed: oldPosition.baseInfo.min_speed,
      max_speed: oldPosition.baseInfo.max_speed,
      svibsList: oldPosition.baseInfo.svibsList
    };
  } else if (type == 7 || type == 2) {
    //温度过程量测点
    position.baseInfo = {
      alarm_smooth_a: oldPosition.baseInfo.alarm_smooth_a,
      alarm_smooth_b: oldPosition.baseInfo.alarm_smooth_b,
      h_limit: oldPosition.baseInfo.h_limit,
      hh_limit: oldPosition.baseInfo.hh_limit,
      l_limit: oldPosition.baseInfo.l_limit,
      ll_limit: oldPosition.baseInfo.ll_limit
    };
  } else if (type == 5) {
    //数字量
    position.baseInfo = {
      alarm_smooth_a: oldPosition.baseInfo.alarm_smooth_a,
      alarm_smooth_b: oldPosition.baseInfo.alarm_smooth_b,
      hh_limit: oldPosition.baseInfo.hh_limit,
      h_limit: oldPosition.baseInfo.h_limit,
      calc_method: oldPosition.baseInfo.calc_method
    };
  } else if (type == 10) {
    //工艺量
    position.baseInfo = {
      alarm_smooth_a: oldPosition.baseInfo.alarm_smooth_a,
      alarm_smooth_b: oldPosition.baseInfo.alarm_smooth_b,
      posShow: oldPosition.baseInfo.posShow,
      //是否显示在总貌图
      byUnit: oldPosition.baseInfo.byUnit,
      //单位索引
      byUnitName: oldPosition.baseInfo.byUnitName,
      //名称
      unitNum: oldPosition.baseInfo.unitNum,
      //数据有效位
      hh_limit: oldPosition.baseInfo.hh_limit,
      //报警高
      h_limit: oldPosition.baseInfo.h_limit,
      //预警高
      l_limit: oldPosition.baseInfo.l_limit,
      //预警低
      ll_limit: oldPosition.baseInfo.ll_limit,
      //报警低
      hi_value: oldPosition.baseInfo.hi_value,
      //工程量输入范围高
      low_value: oldPosition.baseInfo.low_value,
      //工程量输入范围低
      ref_vol: oldPosition.baseInfo.ref_vol,
      //信号输入范围高
      ref_eng: oldPosition.baseInfo.ref_eng,
      //信号输入范围低
      scale: oldPosition.baseInfo.scale,
      //校正参数
      corr: oldPosition.baseInfo.corr,
      //零点偏移
      dataaddress: oldPosition.baseInfo.dataaddress,
      //数据地址
      datamode: oldPosition.baseInfo.datamode,
      slaveid: oldPosition.baseInfo.slaveid,
      //从设备号
      normal: oldPosition.baseInfo.normal,
      value_left: oldPosition.baseInfo.value_left,
      //左比较值
      value_right: oldPosition.baseInfo.value_right //右比较值

    };
  } else if (type == 200) {
    //长采样
    position.baseInfo = {
      alarm_smooth_a: oldPosition.baseInfo.alarm_smooth_a,
      alarm_smooth_b: oldPosition.baseInfo.alarm_smooth_b,
      capture_mode: oldPosition.baseInfo.capture_mode,
      capture_byId: oldPosition.baseInfo.capture_byId
    };
  } else if (type == 14) {
    //螺栓测点
    position.baseInfo = {
      alarmList: oldPosition.baseInfo.alarmList,
      alarm_smooth_a: oldPosition.baseInfo.alarm_smooth_a,
      alarm_smooth_b: oldPosition.baseInfo.alarm_smooth_b,
      posShow: oldPosition.baseInfo.posShow,
      alarm_grow: oldPosition.baseInfo.alarm_grow,
      warn_grow: oldPosition.baseInfo.warn_grow
    };
  }
  /* 加入共同的baseInfo属性 */


  position.baseInfo.alarmList = oldPosition.baseInfo.alarmList;
  return position;
}

/***/ })

}]);
//# sourceMappingURL=8-8f8bc94c72941ffda457.js.map