(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[5],{

/***/ "./src/components/content/system/dgm/table/js/dgm_columns.js":
/*!*******************************************************************!*\
  !*** ./src/components/content/system/dgm/table/js/dgm_columns.js ***!
  \*******************************************************************/
/*! exports provided: setHeaders, setColumns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setHeaders", function() { return setHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumns", function() { return setColumns; });
function setHeaders(type) {
  var header = [];

  switch (type) {
    case 1:
      //采集器信息
      header = ['产品ID', '采集器名称', 'IP地址', '特征值实时上传间隔', '特征值存储时间间隔', '波形实时上传间隔', '波形存储时间间隔', '黑匣子存储时间间隔', '断网数据缓存间隔', 'Modbus输出', '同步状态', '软件主版本号', '软件修订版本号', 'DB板版本号', 'AB板版本号', '通道类型', '量程类型', '叶轮类型'];
      break;

    case 2:
      //振动设置
      header = ['采集器名称', '通道名称', '通道号', '部件分类', '安装位置', '关联部件', '传感器类型', '灵敏系数', '灵敏系数单位', '硬件积分', '是否积分', '单位', '信号增益', '硬件滤波', '软件滤波', '参考间隙电压', '电压范围高', '电压范围低', '阶次滤波', '有效频率下限', '有效频率上限', '能量有效值计算时间', '积分量程', '是否转温度'];
      break;

    case 3:
      //温度设置
      header = ['采集器名称', '通道名称', '通道号', '部件分类', '安装位置', '单位', '过程量类型', '信号输入范围高', '信号输入范围低', '工程量输入范围高', '工程量输入范围低', '增益', '是否转振动'];
      break;

    case 4:
      //过程量设置
      header = ['采集器名称', '通道名称', '通道号', '传感器类型', '单位', '过程量类型', '参考点A（A-X）', '参考点A（A-Y）', '参考点B（B-X）', '参考点B（B-Y）'];
      break;

    case 5:
      //转速设置
      header = ['采集器名称', '通道名称', '单位', '键相增益', '比较电压', '触发类型', '极性', '高密度采样', '最高转速', '最低转速', '电压范围高', '电压范围低'];
      break;

    case 6:
      //数字量设置
      header = ['采集器名称', '通道名称', '单位', '数字量类型', '数字量状态', '自检输出', '信号绑定', '信号传输'];
      break;

    case 7:
      //串口设置
      header = ['采集器名称', '模块名称', '类型', 'IP地址', '端口号', '数据位', '停止位', '波特率', '奇偶校验', '传输方式', '设备选择', '从设备号'];
      break;

    case 9:
      //长采样设置
      header = ['采集器名称', '采集间隔', '分析频率', '采样时间', '通道'];
      break;

    case 10:
      //前置处理器设置
      header = ['采集器名称', '前置处理器ID', '前置处理器名称', '车厢号', '设备所在位', '状态' // '是否下设置'
      ];
      break;

    case 11:
      //mhd从设置
      header = ['从设备名称', '设备ID', '主设备', 'Modbus输出'];
      break;

    case 12:
      //tms连续采样设置
      header = ['机组', '所属组织', '前置处理器', '车厢', '通道', '采样率KHz'];
      break;

    case 13:
      //采集设置
      header = ['采集器名称', '塔筒连接法兰数目', '信号接收频率', '检波方式', '工作模式', '滤波模式', '激励电压', '脉冲重复频率模式', '采样深度', '触发模式', '阻抗匹配使能开关', '激励强度', '收发模式', '阻抗匹配值', '脉冲粗延时', '脉冲精延时', '脉宽', '脉冲重复频率', '指定某个闸门', '测量模式', '检测缺陷时指定某个闸门', '检测缺陷时报警逻辑', '闸门抑制开关', '抑制次数', '用于指定报警源', '测量参数测量模式', '测量判断', '功能开关', '板卡的主从关系'];
      break;

    case 14:
      //法兰设置
      header = ['采集器名称', '法兰名称', '部件分类', '安装位置', '螺栓数目'];
      break;

    case 15:
      //预处理设置
      header = ['采集器名称', '预处理器名称', '预处理器ID', '安装位置', '螺栓计数位置起始', '螺栓计数位置结束', '采集方式'];
      break;

    case 16:
      //螺栓设置
      header = ['采集器名称', '通道名称', '螺栓ID', '安装位置', '预处理器控制', '采集控制ID', '关联通道', '螺栓计数', '传感器类型', '单位', '高密度采样', '采样长度', '波形模式', '总长', '标称长度', '直径', '夹紧长度', '闸门的起始坐标点', '闸门的宽度', '闸门的高度', '增益', '电缆长度', '电缆系数', '前置数量', '前置系数', '校准数值', '波形起始', '波形范围'];
      break;

    case 17:
      //E821从设备
      header = ['从设备名称', '设备ID', '主设备', 'S/N', '设备识别码'];
      break;

    case 18:
      //外部集成设置
      header = ['采集器名称', '模块名称', '类型', 'IP地址', '端口号', '数据位', '停止位', '波特率', '奇偶校验', '传输方式', '设备选择', '从设备号'];
      break;

    case 999:
      //拟合系数设置设置
      header = ['产品ID', '采集器名称', '型号名称', '版本号', '算法类型'];
      break;
  }

  return header;
}
function setColumns(type, data) {
  var columns = [];

  switch (type) {
    case 1:
      //采集器信息
      columns = [{
        data: 'dgm.dgm_id'
      }, {
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.dgm_ip'
      }, {
        data: 'dgm.byRealtime_TZ_intrvl_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.realTimeSources;
        }
      }, {
        data: 'dgm.byVector_TZ_intrvl_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byVectorSources;
        }
      }, {
        data: 'dgm.byRealtime_Wave_intrvl_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.waveIntrvlSources;
        }
      }, {
        data: 'dgm.byVector_Wave_intrvl_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.bvWaveIntrvlSources;
        }
      }, {
        data: 'dgm.byBlack_Data_intrvl_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byBlackSources;
        }
      }, {
        data: 'dgm.flash_intrvl_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.fleshSources;
        }
      }, {
        data: 'dgm.if_output_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.ifOutputSources;
        },
        readOnly: true
      }, {
        data: 'dgm.config_state',
        readOnly: true
      }, {
        data: 'dgm.sf_main_ver',
        readOnly: true
      }, {
        data: 'dgm.sf_fix_ver',
        readOnly: true
      }, {
        data: 'dgm.hw_db_ver',
        readOnly: true
      }, {
        data: 'dgm.hw_ab_ver',
        readOnly: true
      }, {
        data: 'dgm.hw_ch_type_val',
        readOnly: true
      }, {
        data: 'dgm.hw_range_type_val',
        readOnly: true
      }, {
        data: 'dgm.hw_options_val',
        //dgu2200支持类型
        readOnly: true
      }];
      break;

    case 2:
      //振动设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.rowName',
        readOnly: true
      }, {
        data: 'dgm.pos_class_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posClassSources;
        }
      }, {
        data: 'dgm.pos_loc_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posLocSources;
        }
      }, {
        data: 'dgm.pos_part_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posPartSources;
        }
      }, {
        data: 'dgm.bySensorType_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.sensorSources;
        }
      }, {
        data: 'dgm.dwVib_Scale'
      }, {
        data: 'dgm.scale_unit',
        readOnly: true
      }, {
        data: 'dgm.byHwIntegral_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byHwIntegralSources;
        },
        readOnly: true
      }, {
        data: 'dgm.byIntegral_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.integralSources;
        }
      }, {
        data: 'dgm.byUnitName',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.unitSources;
        }
      }, {
        data: 'dgm.byVib_Signal_Zoom_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.vibSignalZoomSources;
        }
      }, {
        data: 'dgm.byHw_Filter_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.hwFilterSources;
        }
      }, {
        data: 'dgm.bySw_Filter_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.swFilterSources;
        }
      }, {
        data: 'dgm.dwRef_gap'
      }, {
        data: 'dgm.shHi_vol'
      }, {
        data: 'dgm.shLo_vil'
      }, {
        data: 'dgm.order_filter'
      }, {
        data: 'dgm.power_a'
      }, {
        data: 'dgm.power_b'
      }, {
        data: 'dgm.power_time_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.powerTimeSources;
        }
      }, {
        data: 'dgm.int_zoom_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.intZoomSources;
        },
        readOnly: true
      }, {
        data: 'dgm.trans_ch_type_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.transChTypeSources;
        },
        readOnly: true
      }];
      break;

    case 3:
      //温度设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.rowName',
        readOnly: true
      }, {
        data: 'dgm.pos_class_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posClassSources;
        }
      }, {
        data: 'dgm.pos_loc_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posLocSources;
        }
      }, {
        data: 'dgm.byUnitName',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.unitSources;
        }
      }, {
        data: 'dgm.byStaType_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byStaTypeSources;
        }
      }, {
        data: 'dgm.dwHi_signal_value'
      }, {
        data: 'dgm.dwLow_signal_value'
      }, {
        data: 'dgm.dwHi_eng_value'
      }, {
        data: 'dgm.dwLow_eng_value'
      }, {
        data: 'dgm.range_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.rangeSources;
        }
      }, {
        data: 'dgm.trans_ch_type_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.transChTypeSources;
        },
        readOnly: true
      }];
      break;

    case 4:
      //过程量设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.rowName'
      }, //通道号
      {
        data: 'dgm.bySensorType821_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.sensorSources;
        }
      }, {
        data: 'dgm.byUnitName_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byUnitNameSources;
        }
      }, {
        data: 'dgm.byStaType_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byStaTypeSources;
        }
      }, {
        data: 'dgm.dwLow_signal_value'
      }, {
        data: 'dgm.dwLow_eng_value'
      }, {
        data: 'dgm.dwHi_signal_value'
      }, {
        data: 'dgm.dwHi_eng_value'
      }];
      break;

    case 5:
      //转速设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.byUnitName_val'
      }, {
        data: 'dgm.byStrong_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byStrongSources;
        }
      }, {
        data: 'dgm.dwCompre_volt_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.dwCompreVoltSources;
        }
      }, {
        data: 'dgm.reverse_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.reverseSources;
        },
        readOnly: true
      }, {
        data: 'dgm.polar_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.polarSources;
        }
      }, {
        data: 'dgm.high_density_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.highDensitySources;
        }
      }, {
        data: 'dgm.max_speed'
      }, {
        data: 'dgm.min_speed'
      }, {
        data: 'dgm.shHi_vol'
      }, {
        data: 'dgm.shLo_vil'
      }];
      break;

    case 6:
      //数字量设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.byUnitName_val'
      }, {
        data: 'dgm.byDigitalType_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byDigitalTypeSources;
        }
      }, {
        data: 'dgm.byifpower_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byifpowerSources;
        }
      }, {
        data: 'dgm.byifalarm_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byifalarmsources;
        }
      }, {
        data: 'dgm.bybindch_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.bybindchSources;
        }
      }, {
        data: 'dgm.bybindtype_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.bybindtypeSources;
        }
      }];
      break;

    case 7:
      //串口设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.dest_type_val',
        readOnly: true
      }, {
        data: 'dgm.dest_ip'
      }, {
        data: 'dgm.dest_port'
      }, {
        data: 'dgm.databit_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.databitSources;
        }
      }, {
        data: 'dgm.stopbit_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.stopbitSources;
        }
      }, {
        data: 'dgm.baudrate_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.baudrateSources;
        }
      }, {
        data: 'dgm.parity_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.paritySources;
        }
      }, {
        data: 'dgm.mode_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.modeSources;
        }
      }, {
        data: 'dgm.masterslave_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.masterslaveSources;
        }
      }, {
        data: 'dgm.slaveid'
      }];
      break;

    case 9:
      //长采样设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.capture_type_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.captureTypeSources;
        }
      }, {
        data: 'dgm.capture_freq_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.captureFreqSources;
        }
      }, {
        data: 'dgm.capture_time_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.captureTimeSources;
        }
      }, {
        data: 'dgm.ch1',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.channelSources;
        }
      }];
      break;

    case 10:
      //前置处理器设置
      columns = [{
        data: 'dgm.dgm_name',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.dgmSources;
        }
      }, {
        data: 'dgm.pre_id'
      }, {
        data: 'dgm.byName'
      }, {
        data: 'dgm.car_id'
      }, {
        data: 'dgm.dev_id'
      }, {
        data: 'dgm.status_val' //状态:0在线；1离线

      }
      /*{
          data: 'dgm.have_cfg_val',//是否下设置：1是，0否
      },*/
      ];
      break;

    case 11:
      //主从设置
      columns = [{
        data: 'dgm.byName'
      }, {
        data: 'dgm.mhd_id'
      }, {
        data: 'dgm.mainMhd',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.mhdSources;
        }
      }, {
        data: 'dgm.if_output_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.ifOutputSources;
        }
      }];
      break;

    case 12:
      //连续采集设置
      columns = [{
        data: 'dgm.mac_me'
      }, {
        data: 'dgm.t_name'
      }, {
        data: 'dgm.byName'
      }, {
        data: 'dgm.carName'
      }, {
        data: 'dgm.chName'
      }, {
        data: 'dgm.capture_freq',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.captureFreqSources;
        }
      }];
      break;

    case 13:
      //2600采集设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        //塔筒连接法兰数目
        data: 'dgm.tower_flange_sum'
      }, {
        //信号接收频率
        data: 'dgm.frq_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.frqSources;
        }
      }, {
        //检波方式
        data: 'dgm.wm_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.wmSources;
        }
      }, {
        //工作模式
        data: 'dgm.wkm_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.wkmSources;
        }
      }, {
        //滤波模式
        data: 'dgm.flm_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.flmSources;
        }
      }, {
        //激励电压
        data: 'dgm.ev_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.evSources;
        }
      }, {
        //脉冲重复频率模式
        data: 'dgm.pm_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.pmSources;
        }
      }, {
        //采样深度
        data: 'dgm.sl_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.slSources;
        }
      }, {
        //触发模式
        data: 'dgm.tm_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.tmSources;
        }
      }, {
        //阻抗匹配使能开关
        data: 'dgm.swDamping_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.swDampingSources;
        }
      }, {
        //激励强度
        data: 'dgm.ext_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.extSources;
        }
      }, {
        //收发模式
        data: 'dgm.pulserCtx_md_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.pulserCtx_mdSources;
        }
      }, {
        //阻抗匹配值
        data: 'dgm.iDamping'
      }, {
        //脉冲粗延时
        data: 'dgm.iPulseCoarseDly'
      }, {
        //脉冲精延时
        data: 'dgm.iPulseFineDly'
      }, {
        //脉宽
        data: 'dgm.iPulseWdh'
      }, {
        //脉冲重复频率
        data: 'dgm.iPRF'
      }, {
        //指定某个闸门
        data: 'dgm.gateMode_gt_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.gateMode_gtSources;
        }
      }, {
        //测量模式
        data: 'dgm.gateMode_md_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.gateMode_mdSources;
        }
      }, {
        //检测缺陷时的判别策略:指定某个闸门
        data: 'dgm.gateFlawJudge_gt_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.gateFlawJudge_gtSources;
        }
      }, {
        //检测缺陷时的判别策略:报警逻辑
        data: 'dgm.lg_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.lgSources;
        }
      }, {
        //检测缺陷时的判别策略:闸门抑制功能使能标志
        data: 'dgm.swSuppressCnt_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.swSuppressCntSources;
        }
      }, {
        //抑制次数
        data: 'dgm.iSupCnt'
      }, {
        //用于指定报警源
        data: 'dgm.measurementCtx_gt_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.measurementCtx_gtSources;
        }
      }, {
        //测量参数测量模式
        data: 'dgm.measurementCtx_md_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.measurementCtx_mdSources;
        }
      }, {
        //测量参数测量判断
        data: 'dgm.jd_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.jdSources;
        }
      }, {
        //测量参数设置功能开关
        data: 'dgm.sw_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.swSources;
        }
      }, {
        //设置板卡的主从关系
        data: 'dgm.role_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.roleSources;
        }
      }];
      break;

    case 14:
      //2600法兰设置
      columns = [{
        data: 'dgm.dgm_name',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.dgmSources;
        }
      }, {
        data: 'dgm.byName'
      }, {
        data: 'dgm.pos_class2600_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posClassSources;
        }
      }, {
        data: 'dgm.pos_loc_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posLocSources;
        }
      }, {
        data: 'dgm.bolt_sum'
      }];
      break;

    case 15:
      //2600预处理设置
      columns = [{
        data: 'dgm.dgm_name',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.dgmSources;
        }
      }, {
        data: 'dgm.byName'
      }, {
        data: 'dgm.preps_id'
      }, {
        data: 'dgm.flange_name',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.flangeSources;
        }
      }, {
        data: 'dgm.bolt_num_beigin'
      }, {
        data: 'dgm.bolt_num_end'
      }, {
        data: 'dgm.collect_mode_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.collectModeSources;
        }
      }];
      break;

    case 16:
      //2600螺栓设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.boltID'
      }, {
        data: 'dgm.bolt_pos_loc_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.posLocSources;
        }
      }, {
        data: 'dgm.preps_id_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.prepsIdSources;
        }
      }, {
        data: 'dgm.ac_id'
      }, {
        data: 'dgm.b_id_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.bIdSources;
        }
      }, {
        data: 'dgm.bolt_num'
      }, {
        data: 'dgm.bySensorTypeBolt_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.bySensorTypeSources;
        }
      }, {
        data: 'dgm.byUnitName',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.byUnitNameSources;
        }
      }, {
        data: 'dgm.highSamp_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.highSampSources;
        }
      }, {
        data: 'dgm.scanLength_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.scanLengthSources;
        }
      }, {
        data: 'dgm.readMode_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.readModeSources;
        }
      }, {
        data: 'dgm.totalLen'
      }, {
        data: 'dgm.fBoltLength'
      }, {
        data: 'dgm.fDiameter'
      }, {
        data: 'dgm.clampLen'
      }, {
        data: 'dgm.fStart'
      }, {
        data: 'dgm.fWidth'
      }, {
        data: 'dgm.fThreshold'
      }, {
        data: 'dgm.fGain'
      }, {
        data: 'dgm.cableLen'
      }, {
        data: 'dgm.cableCoeff'
      }, {
        data: 'dgm.preQuantity'
      }, {
        data: 'dgm.preCoeff'
      }, {
        data: 'dgm.offsetValue'
      }, {
        data: 'dgm.wStart'
      }, {
        data: 'dgm.wRange'
      }];
      break;

    case 17:
      //E821主从设置
      columns = [{
        data: 'dgm.byName'
      }, {
        data: 'dgm.MS_id'
      }, {
        data: 'dgm.main821',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.main821Sources;
        }
      }, {
        data: 'dgm.SN'
      }, {
        data: 'dgm.SNA'
      }];
      break;

    case 18:
      //外部集成设置
      columns = [{
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.ch_name'
      }, {
        data: 'dgm.dest_type_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.destTypeSources;
        }
      }, {
        data: 'dgm.dest_ip'
      }, {
        data: 'dgm.dest_port'
      }, {
        data: 'dgm.databit_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.databitSources;
        }
      }, {
        data: 'dgm.stopbit_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.stopbitSources;
        }
      }, {
        data: 'dgm.baudrate_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.baudrateSources;
        }
      }, {
        data: 'dgm.parity_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.paritySources;
        }
      }, {
        data: 'dgm.mode_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.modeSources;
        }
      }, {
        data: 'dgm.masterslave_val',
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].dgm.masterslaveSources;
        }
      }, {
        data: 'dgm.slaveid'
      }];
      break;

    case 999:
      //拟合系数信息
      columns = [{
        data: 'dgm.dgm_id'
      }, {
        data: 'dgm.dgm_name'
      }, {
        data: 'dgm.modelName'
      }, {
        data: 'dgm.version'
      }, {
        data: 'dgm.fitting'
      }];
      break;
  }

  return columns;
}

/***/ }),

/***/ "./src/components/content/system/dgm/table/js/dgm_hdtable.js":
/*!*******************************************************************!*\
  !*** ./src/components/content/system/dgm/table/js/dgm_hdtable.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(swal, $) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return dgmhdtable; });
/* harmony import */ var common_hdtable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! common/hdtable.js */ "./src/common/hdtable.js");
/* harmony import */ var _dgm_columns_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dgm_columns.js */ "./src/components/content/system/dgm/table/js/dgm_columns.js");
/* harmony import */ var _dgm_info_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dgm_info.js */ "./src/components/content/system/dgm/table/js/dgm_info.js");
/* harmony import */ var utils_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! utils/utils.js */ "./src/utils/utils.js");
/* harmony import */ var _dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dgm_methods.js */ "./src/components/content/system/dgm/table/js/dgm_methods.js");
/* harmony import */ var network_getApi__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! network/getApi */ "./src/network/getApi.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }








function dgmhdtable(el, property) {
  // console.log(new Handsontable());
  var data = property.getData(); //创建表格属性的实例

  var tableDataIns = new tableData(property); // 组装振动表格数据

  var vibTable = {
    // 表格显示的数据
    data: data,
    contextMenu: tableDataIns.contextMenu(),
    //表格的列
    colHeaders: tableDataIns.colHeaders(),
    fixedColumnsLeft: 2,
    //数据渲染renderData
    columns: tableDataIns.columns(),
    //单元格属性设置
    cells: tableDataIns.cells(),
    //单击单元格或行/列标题后触发。如果单击行/列标题，则坐标索引为负。
    afterOnCellMouseUp: tableDataIns.afterOnCellMouseUp(),
    afterCreateRow: tableDataIns.afterCreateRow(),
    beforeRemoveRow: tableDataIns.beforeRemoveRow(),
    afterRemoveRow: tableDataIns.afterRemoveRow(),
    //过滤之后
    afterFilter: tableDataIns.afterFilter(),
    beforeChange: tableDataIns.beforeChange(),
    afterChange: tableDataIns.afterChange()
  };
  return Object(common_hdtable_js__WEBPACK_IMPORTED_MODULE_0__["default"])(el, vibTable);
}
var deleteArray = []; //删除的信息列表

var tableData = /*#__PURE__*/function () {
  function tableData(property) {
    _classCallCheck(this, tableData);

    this.type = property.type;
    this.getData = property.getData;
    this.getHot = property.getHot;
    this.changeList = property.changeList;
    this.MHDList = property.MHDList;
    this.E821List = property.E821List;
    this.tmsList = property.tmsList;
    this.dgmList = property.dgmList;
    this.flangeList = property.flangeList;
    this.defaultDgmInfo = property.defaultDgmInfo;
    this.router = property.router;
    this.fittingInfo = property.fittingInfo;
    this.select821Info = property.select821Info;
    this.btnData = property.btnData;
    this.reRenderSelectOption = property.reRenderSelectOption;
  }
  /* 表格的数据渲染 */


  _createClass(tableData, [{
    key: "colHeaders",
    value: function colHeaders() {
      return Object(_dgm_columns_js__WEBPACK_IMPORTED_MODULE_1__["setHeaders"])(this.type);
    }
  }, {
    key: "columns",
    value: function columns() {
      return Object(_dgm_columns_js__WEBPACK_IMPORTED_MODULE_1__["setColumns"])(this.type, this.getData());
    }
    /* 表格的方法渲染 */
    //振动的单元格渲染

  }, {
    key: "cells",
    value: function cells() {
      var that = this;
      return function (row, col, prop) {
        var data = that.getData();
        if (data.length == 0) return;
        var type = that.type;
        var cellProperties = this;

        if (type != 11 && type != 17 && col == 0) {
          //组织，机组，采集器，测点类型禁止编辑
          cellProperties.readOnly = true;
        }

        if (type == 1 && col == 2) {
          cellProperties.readOnly = true;
        }

        if (type == 6 && col == 3) {
          cellProperties.readOnly = true;
        }

        if (type == 6 && data[row].dgm.byDigitalType == 0 && data[row].dgm.dgm_type == 3 && (col == 4 || col == 5 || col == 6)) {
          cellProperties.readOnly = true;
        }

        if (type == 6 && data[row].dgm.byDigitalType == 1 && data[row].dgm.dgm_type == 3 && col == 7) {
          cellProperties.readOnly = true;
        }

        if (type == 6 && data[row].dgm.dgm_type != 3 && (col == 5 || col == 6 || col == 7)) {
          cellProperties.readOnly = true;
        }

        if (type == 6 && data[row].dgm.dgm_type == 4 && col == 5) {
          cellProperties.readOnly = false;
        }

        if (type == 2 && data[row].dgm.dgm_type == 2 && prop == 'dgm.order_filter') {
          cellProperties.readOnly = true;
        }

        if (type == 2 && data[row].dgm.dgm_type == 4 && (col == 13 || col == 14 || col == 18)) {
          cellProperties.readOnly = true;
        }

        if (type == 6 && data[row].dgm.dgm_type == 4 && prop == "dgm.byifpower_val") {
          cellProperties.readOnly = true;
        }

        if (type == 7 && data[row].dgm.dgm_type == 4 && (prop == "dgm.dest_type_val" || prop == "dgm.dest_ip" || prop == "dgm.dest_port")) {
          cellProperties.readOnly = true;
        }

        if (type == 7 && data[row].dgm.dgm_type == 1) {
          if (data[row].dgm.dest_type != 0) {
            cellProperties.readOnly = true;
          }
        }

        if (type == 5 && data[row].dgm.dgm_type == 4 && prop == "dgm.min_speed") {
          cellProperties.readOnly = true;
        }

        if (type == 1 && data[row].dgm.dgm_type == 4 && (prop == "dgm.flash_intrvl_val" || prop == "dgm.sf_fix_ver" || prop == "dgm.sf_main_ver" || prop == "dgm.hw_db_ver" || prop == "dgm.hw_ab_ver" || prop == "dgm.hw_ch_type" || prop == "dgm.hw_range_type")) {
          cellProperties.readOnly = true;
        }

        if (type == 1 && data[row].dgm.dgm_type == 5 && (prop == "dgm.byRealtime_TZ_intrvl_val" || prop == "dgm.byRealtime_Wave_intrvl_val" || prop == "dgm.byBlack_Data_intrvl_val" || prop == "dgm.sf_fix_ver" || prop == "dgm.sf_main_ver" || prop == "dgm.hw_db_ver" || prop == "dgm.hw_ab_ver" || prop == "dgm.hw_ch_type" || prop == "dgm.hw_range_type")) {
          cellProperties.readOnly = true;
        }

        if (type == 1 && data[row].dgm.dgm_type == 6 && col > 4) {
          cellProperties.readOnly = true;
        }

        if (type == 1 && data[row].dgm.dgm_type == 0 && col > 7) {
          cellProperties.readOnly = true;
        }

        if (type == 1) {
          if (data[row].dgm.dgm_type == 4 && prop == "dgm.if_output_val") {
            cellProperties.readOnly = false;
          }
        }

        if (type == 2) {
          if (data[row].dgm.dgm_type == 4 && (prop == "dgm.int_zoom_val" || prop == "dgm.byHwIntegral_val")) {
            cellProperties.readOnly = false;
          }

          if (prop == "dgm.trans_ch_type_val" && data[row].dgm.ch_id >= 16 && data[row].dgm.trans_ch_type != 3) {
            //如果trans_ch_type==3表示9通道，则不可转
            cellProperties.readOnly = false;
          }

          if (data[row].dgm.dgm_type == 1 && prop == "dgm.order_filter") {
            cellProperties.readOnly = true;
          }

          if (data[row].dgm.t_root == 1 && (prop == "dgm.pos_class_val" || prop == "dgm.pos_loc_val")) {
            cellProperties.readOnly = true;
          }
        }

        if (type == 3) {
          if (data[row].dgm.dgm_type == 3 && data[row].dgm.trans_ch_type != 3 && prop == "dgm.trans_ch_type_val") {
            //如果trans_ch_type==3表示9通道，则不可转
            cellProperties.readOnly = false;
          }

          if (data[row].dgm.t_root == 1 && (prop == "dgm.pos_class_val" || prop == "dgm.pos_loc_val")) {
            cellProperties.readOnly = true;
          }
        }

        if (type == 4) {
          if (data[row].dgm.dgm_type == 1 && prop == "dgm.dwHi_signal_value") {
            cellProperties.readOnly = true;
          }

          if (prop == "dgm.rowName") {
            cellProperties.readOnly = true;
          }

          if (prop == "dgm.byUnitName_val") {
            if (data[row].dgm.byUnitName_val == '自定义' || data[row].dgm.dgm_type != 6) {
              cellProperties.editor = 'text';
            } else {
              cellProperties.editor = 'select';
            }
          }

          if (prop == "dgm.bySensorType821_val") {
            if (data[row].dgm.dgm_type != 6) {
              cellProperties.readOnly = true;
            } else {
              cellProperties.editor = 'select';
            }
          }

          if (data[row].dgm.dgm_type == 6 && prop == "dgm.byStaType_val") {
            //过程量类型E821不可编辑
            cellProperties.readOnly = true;
          }
        }

        if (type == 5) {
          if ((data[row].dgm.dgm_type == 4 || data[row].dgm.dgm_type == 1) && prop == "dgm.byStrong_val") {
            cellProperties.readOnly = true;
          }

          if (data[row].dgm.dgm_type == 1 && (prop == "dgm.polar_val" || prop == "dgm.high_density_val" || prop == "dgm.max_speed" || prop == "dgm.min_speed")) {
            cellProperties.readOnly = true;
          }

          if (data[row].dgm.dgm_type == 1 && prop == "dgm.reverse_val") {
            cellProperties.readOnly = false;
          }
        }

        if (type == 6) {
          if (data[row].dgm.dgm_type == 1 && data[row].dgm.byDigitalType == 0 && prop == "dgm.byifpower_val") {
            cellProperties.readOnly = true;
          }
        }

        if (type == 10 || type == 15 || type == 14) {
          if (col == 0 && data[row].dgm.operate == 1) {
            cellProperties.readOnly = false;
          }
        }

        if (type == 10 && (prop == "dgm.status_val" || prop == "dgm.have_cfg_val")) {
          cellProperties.readOnly = true;
        }

        if (type == 11) {
          if (row != -1 && data[row].dgm.operate == 0 && (prop == "dgm.mhd_id" || prop == "dgm.mainMhd")) {
            cellProperties.readOnly = true;
          }
        }

        if (type == 17) {
          if (row != -1 && data[row].dgm.operate == 0 && (prop == "dgm.MS_id" || prop == "dgm.main821" || prop == "dgm.SNA")) {
            cellProperties.readOnly = true;
          }
        }

        if (type == 999) {
          cellProperties.readOnly = true;
        }

        return cellProperties;
      };
    } //右键功能

  }, {
    key: "contextMenu",
    value: function contextMenu() {
      var that = this;
      var userType = parseInt(sessionStorage.getItem('userType'));

      if (that.type != 11 && that.type != 10 && that.type != 14 && that.type != 15 && that.type != 17 && that.type != 18) {
        return {
          items: {
            'freeze_column': {
              name: '固定列'
            },
            "unfreeze_column": {
              name: '取消列固定'
            }
          }
        };
      } else if (that.type == 18) {
        if (userType === 0) {
          return {
            items: {
              "row_above": {
                name: "插入新行"
              },
              "remove_row": {
                name: '删除这行',
                callback: function callback(key, options) {
                  swal({
                    title: "警告",
                    text: "一但删除，该数据将不保留！！！确定删除吗？",
                    buttons: {
                      sure: "确认",
                      cancel: "取消"
                    },
                    dangerMode: true
                  }).then(function (willDelete) {
                    if (willDelete) {
                      var index = options[0].start.row;
                      var amount = parseInt(options[0].end.row - options[0].start.row) + 1;
                      var deleteData = that.changeList.deleteData;
                      deleteArray = [];

                      if (index != null) {
                        for (var i = 0; i < amount; i++) {
                          var defaultInfo = that.getDgmInfoByIndex(index + i);

                          if (defaultInfo.bindCount > 0) {
                            swal({
                              title: "提示",
                              text: "该通道下已建该类型测点，不可删除",
                              button: "确认"
                            });
                            return false;
                          }

                          var obj = {};
                          obj.ch_id = defaultInfo.ch_id;
                          obj.ch_name = defaultInfo.ch_name;
                          deleteData.push(obj);
                          deleteArray.push(defaultInfo);
                        }
                      }

                      if (deleteData.length > 0) {
                        network_getApi__WEBPACK_IMPORTED_MODULE_5__["default"].deleteDefaultChannel(deleteData).then(function (res) {
                          deleteData = [];

                          if (res.msg == 0) {
                            that.getHot().alter("remove_row", index, amount);
                            swal({
                              title: "提示",
                              text: "删除成功",
                              button: "确认"
                            });
                          } else if (res.msg == 1) {
                            console.log('参数为空！');
                          } else if (res.msg == 2) {
                            console.log('后台运行错误！');
                          }
                        })["catch"](function (err) {
                          console.log('请求错误', err);
                        });
                      }
                    } else {
                      return false;
                    }
                  });
                }
              },
              "clearData": {
                name: "清零",
                callback: function callback(key, options) {
                  var index = options[0].start.row;
                  deleteArray = [];

                  if (index != null) {
                    var defaultInfo = that.getDgmInfoByIndex(index);

                    if (defaultInfo.dest_type == 2 || defaultInfo.dest_type == 4) {
                      var params = null;
                      params = {
                        ip: defaultInfo.dest_ip,
                        port: defaultInfo.dest_port,
                        slaveid: defaultInfo.slaveid
                      };
                      network_getApi__WEBPACK_IMPORTED_MODULE_5__["default"].resetOil(params).then(function (res) {
                        if (res.msg == 0) {
                          swal({
                            title: "提示",
                            text: "操作成功",
                            button: "确认"
                          });
                        } else if (res.msg == 1) {
                          console.log('参数为空！');
                          swal({
                            title: "提示",
                            text: "IP和端口号不能为空",
                            button: "确认"
                          });
                        } else if (res.msg == 2) {
                          console.log('后台运行错误！');
                          swal({
                            title: "提示",
                            text: "IP地址或端口设置错误，清零失败",
                            button: "确认"
                          });
                        }
                      })["catch"](function (err) {
                        console.log('请求错误', err);
                      });
                    } else {
                      swal({
                        title: "提示",
                        text: "非油液采集器，无此操作",
                        button: "确认"
                      });
                    }
                  }
                }
              },
              'freeze_column': {
                name: '固定列'
              },
              "unfreeze_column": {
                name: '取消列固定'
              }
            }
          };
        } else {
          return {
            items: {
              "row_above": {
                name: "插入新行"
              },
              'freeze_column': {
                name: '固定列'
              },
              "unfreeze_column": {
                name: '取消列固定'
              }
            }
          };
        }
      } else {
        if (userType === 0) {
          return {
            items: {
              "row_above": {
                name: "插入新行"
              },
              "remove_row": {
                name: '删除这行',
                callback: function callback(key, options) {
                  swal({
                    title: "警告",
                    text: "一但删除，该数据将不保留！！！确定删除吗？",
                    buttons: {
                      sure: "确认",
                      cancel: "取消"
                    },
                    dangerMode: true
                  }).then(function (willDelete) {
                    if (willDelete) {
                      var index = options[0].start.row;
                      var amount = parseInt(options[0].end.row - options[0].start.row) + 1;
                      var deleteData = that.changeList.deleteData;
                      var changeMhd = that.changeList.changeMhd;
                      deleteArray = [];
                      var deleteFlange = {};

                      if (index != null) {
                        for (var i = 0; i < amount; i++) {
                          if (that.type == 11) {
                            var mhdInfo = that.getDgmInfoByIndex(index + i);
                            var obj = {};
                            obj.master_id = mhdInfo.mainMhd;
                            obj.slaver_id = mhdInfo.mhd_id;
                            obj.byId = mhdInfo.byId;
                            deleteData.push(obj);
                            deleteArray.push(mhdInfo);
                          }

                          if (that.type == 17) {
                            var E821Info = that.getDgmInfoByIndex(index + i);
                            var _obj = {};
                            _obj.master_id = E821Info.main821;
                            _obj.slaver_id = E821Info.MS_id;
                            _obj.byId = E821Info.byId;
                            deleteData.push(_obj);
                            deleteArray.push(E821Info);
                          }

                          if (that.type == 10) {
                            var tmsInfo = that.getDgmInfoByIndex(index + i);
                            var _obj2 = {};
                            _obj2.dgm_id = tmsInfo.dgm_id;
                            _obj2.byId = tmsInfo.byId;
                            deleteData.push(_obj2);
                            deleteArray.push(tmsInfo);
                          }

                          if (that.type == 14 || that.type == 15) {
                            var flangeInfo = that.getDgmInfoByIndex(index + i);

                            if (that.type == 14) {
                              deleteFlange.type = 1;
                            } else {
                              deleteFlange.type = 2;
                            }

                            deleteFlange.bolt = [];
                            var _obj3 = {};
                            _obj3.dgm_id = flangeInfo.dgm_id;
                            _obj3.byId = flangeInfo.byId;
                            deleteFlange.bolt.push(_obj3);
                            deleteArray.push(flangeInfo);
                          }
                        }
                      }

                      if (deleteData.length > 0 || !$.isEmptyObject(deleteFlange)) {
                        if (that.type === 11) {
                          network_getApi__WEBPACK_IMPORTED_MODULE_5__["default"].deleteMHDList(deleteData).then(function (res) {
                            deleteData = [];

                            if (res.msg == 0) {
                              that.getHot().alter("remove_row", index, amount);
                              swal({
                                title: "提示",
                                text: "删除成功",
                                button: "确认"
                              }).then(function (value) {
                                that.router.go(0);
                              });
                            } else if (res.msg == 1) {
                              console.log('参数为空！');
                            } else if (res.msg == 2) {
                              console.log('后台运行错误！');
                            } else if (res.msg == 3) {
                              swal({
                                title: "提示",
                                text: "从设备通道绑了测点,不能删除",
                                button: "确认"
                              });
                            }
                          })["catch"](function (err) {
                            console.log('请求错误', err);
                          });
                        }

                        if (that.type === 17) {
                          network_getApi__WEBPACK_IMPORTED_MODULE_5__["default"].deleteE821List(deleteData).then(function (res) {
                            deleteData = [];

                            if (res.msg == 0) {
                              that.getHot().alter("remove_row", index, amount);
                              swal({
                                title: "提示",
                                text: "删除成功",
                                button: "确认"
                              }).then(function (value) {
                                that.router.go(0);
                              });
                            } else if (res.msg == 1) {
                              console.log('参数为空！');
                            } else if (res.msg == 2) {
                              console.log('后台运行错误！');
                            } else if (res.msg == 3) {
                              swal({
                                title: "提示",
                                text: "从设备通道绑了测点,不能删除",
                                button: "确认"
                              });
                            }
                          })["catch"](function (err) {
                            console.log('请求错误', err);
                          });
                        }

                        if (that.type === 10) {
                          network_getApi__WEBPACK_IMPORTED_MODULE_5__["default"].deleteTMSList(deleteData).then(function (res) {
                            deleteData = [];

                            if (res.msg == 0) {
                              that.getHot().alter("remove_row", index, amount);
                              swal({
                                title: "提示",
                                text: "删除成功",
                                button: "确认"
                              }).then(function (value) {
                                that.router.go(0);
                              });
                            } else if (res.msg == 1) {
                              console.log('参数为空！');
                            } else if (res.msg == 2) {
                              console.log('后台运行错误！');
                            } else if (res.msg == 3) {
                              swal({
                                title: "提示",
                                text: "此前置处理器绑了测点,不能删除",
                                button: "确认"
                              });
                            }
                          })["catch"](function (err) {
                            console.log('请求错误', err);
                          });
                        }

                        if (that.type === 14 || that.type === 15) {
                          network_getApi__WEBPACK_IMPORTED_MODULE_5__["default"].deleteBoltList(deleteFlange).then(function (res) {
                            deleteFlange = {};

                            if (res.msg == 0) {
                              that.getHot().alter("remove_row", index, amount);
                              swal({
                                title: "提示",
                                text: "删除成功",
                                button: "确认"
                              }).then(function (value) {
                                that.router.go(0);
                              });
                            } else if (res.msg == 1) {
                              console.log('参数为空！');
                            } else if (res.msg == 2) {
                              console.log('后台运行错误！');
                            } else if (res.msg == 3) {
                              swal({
                                title: "提示",
                                text: "此前置处理器绑了测点,不能删除",
                                button: "确认"
                              });
                            }
                          })["catch"](function (err) {
                            console.log('请求错误', err);
                          });
                        }
                      }
                    } else {
                      return false;
                    }
                  });
                }
              },
              'freeze_column': {
                name: '固定列'
              },
              "unfreeze_column": {
                name: '取消列固定'
              }
            }
          };
        } else {
          return {
            items: {
              "row_above": {
                name: "插入新行"
              },
              'freeze_column': {
                name: '固定列'
              },
              "unfreeze_column": {
                name: '取消列固定'
              }
            }
          };
        }
      }
    } //点击单元格之后输出该行信息（共用）

  }, {
    key: "afterOnCellMouseUp",
    value: function afterOnCellMouseUp() {
      var that = this;
      return function (e, coords, td) {
        if (coords.row >= 0) {
          var dgm = that.getDgmInfoByIndex(coords.row);
          var physicalRow = that.getHot().toPhysicalRow(coords.row);

          if (that.type == 1) {
            if (coords.col === 0) {
              var dgmTypeList = dgm.dgm_type;

              if (dgmTypeList != undefined) {
                var chTypeBtn = [];

                switch (Number(dgmTypeList)) {
                  case 0:
                    chTypeBtn = [1, 18];
                    break;

                  case 1:
                    chTypeBtn = [1, 2, 4, 5, 6, 7, 8];
                    break;

                  case 2:
                    chTypeBtn = [1, 2, 3, 6, 7];
                    break;

                  case 3:
                    chTypeBtn = [1, 2, 3, 4, 5, 6, 7, 9];
                    break;

                  case 4:
                    chTypeBtn = [1, 2, 4, 5, 6, 7, 11];
                    break;

                  case 5:
                    chTypeBtn = [1, 13, 14, 15, 16];
                    break;

                  case 6:
                    chTypeBtn = [1, 4, 17];
                    break;

                  case 7:
                    chTypeBtn = [1, 2, 3, 5, 10];
                    break;

                  case 8:
                    chTypeBtn = [1, 7];
                    break;
                }

                sessionStorage.setItem('chTypeBtn', JSON.stringify(chTypeBtn));
                that.btnData.forEach(function (btnInfo) {
                  if (chTypeBtn.indexOf(btnInfo.type) === -1) {
                    btnInfo.none = false;
                  } else {
                    btnInfo.none = true;
                  }
                });
              }
            }
          }

          if (that.type == 16 && dgm.dgm_type == 5) {
            that.fittingInfo.push({
              dgm_id: dgm.dgm_id.toString(),
              dgm_name: dgm.dgm_name
            });
            sessionStorage.setItem('fittingInfo', JSON.stringify(that.fittingInfo));
          }

          if (that.type == 17) {
            that.select821Info.master_id = dgm.main821;
            that.select821Info.slaver_id = dgm.MS_id;
            that.select821Info.num = physicalRow;
          }
        }
      };
    } // 过滤的方法(有待优化)（共用）

  }, {
    key: "afterFilter",
    value: function afterFilter() {
      var that = this;
      return function (condition) {
        var hot = that.getHot();
        var data = that.getData();
        var dgm_id_list = [];
        var dgmNameSource = {};
        var sortDgmList = that.changeList.sortDgmList;
        data.forEach(function (dgm) {
          dgmNameSource[dgm.dgm.dgm_name] = dgm.dgm.dgm_id;
        });
        condition.forEach(function (item) {
          if (/dgm_name/.test(hot.colToProp(item.column))) {
            /* 如果过滤的是采集器名称 */
            item.conditions[0].args[0].forEach(function (dgm_name) {
              //获取采集器名称
              dgm_id_list.push(dgmNameSource[dgm_name]);
            });
          }

          if (/dgm_id/.test(hot.colToProp(item.column))) {
            /* 如果过滤的是采集器ID */
            item.conditions[0].args[0].forEach(function (dgm_id) {
              //获取采集器名称
              dgm_id_list.push(dgm_id);
            });
          }
        });
        sessionStorage.setItem('dgm_id', JSON.stringify(dgm_id_list));
      };
    } //创建测点之后的方法(共用)

  }, {
    key: "afterCreateRow",
    value: function afterCreateRow() {
      var that = this;
      return function (index, amount, source) {
        //添加行事件
        // console.log('afterCreateRow');
        var data = that.getData();
        var changeData = that.changeList.changeData;
        var addData = that.changeList.addMhd;
        var addTmsData = that.changeList.addTms;
        var mhdList = that.MHDList;
        var tmsList = that.tmsList;
        var dgmList = that.dgmList;
        var flangeList = that.flangeList;
        var E821List = that.E821List;
        var defaultDgmInfo = that.defaultDgmInfo; //默认采集器的信息

        var addDefault = that.changeList.addDefaultDgm;

        if (that.type == 11) {
          var dgm = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["createMHD"])(mhdList, data.length);
          addData.push(dgm);
          data[index].dgm = dgm;
        }

        if (that.type == 10) {
          var _dgm = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["createTms"])(tmsList, data.length);

          addTmsData.push(_dgm);
          data[index].dgm = _dgm;
        }

        if (that.type == 14) {
          var _dgm2 = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["createFlange"])(dgmList, data.length);

          var sendDgm = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["changeDgm"])(that.type, _dgm2, index);
          data[index].dgm = _dgm2;
          changeData[index] = sendDgm;
        }

        if (that.type == 15) {
          var _dgm3 = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["createPreps"])(dgmList, flangeList, data.length);

          var _sendDgm = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["changeDgm"])(that.type, _dgm3, index);

          data[index].dgm = _dgm3;
          changeData[index] = _sendDgm;
        }

        if (that.type == 17) {
          var _dgm4 = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["createE821"])(E821List, data.length);

          addData.push(_dgm4);
          data[index].dgm = _dgm4;
        }

        if (that.type == 18) {
          var _dgm5 = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["createServerDgm"])(defaultDgmInfo);

          addDefault.push(_dgm5);
          data[index].dgm = _dgm5;
        }
      };
    } //删除测点之前的方法,将要删除的方法存到deleteVData（共用）

  }, {
    key: "beforeRemoveRow",
    value: function beforeRemoveRow() {
      var that = this;
      return function (index, amount) {};
    } //删除测点方法 发送请求（共用）

  }, {
    key: "afterRemoveRow",
    value: function afterRemoveRow() {
      var that = this;
      return function () {};
    } //改变数据的时候拼装数据结构（共用）

  }, {
    key: "beforeChange",
    value: function beforeChange() {
      var that = this;
      return function (changes, source) {
        var _this = this;

        var hot = that.getHot();
        var data = that.getData();
        var change_index;
        var change_prop;
        var change_oldVal;
        var change_newVal;
        var flag;
        var reg = new RegExp("^[+]{0,1}(\\d+)$"); // console.log('beforeChange');

        var mhd_idList = []; //mhd的id

        if (that.type == 11) {
          data.forEach(function (item) {
            if (item.dgm.mhd_id) {
              mhd_idList.push(item.dgm.mhd_id);
            }
          });
        }

        var _loop = function _loop(i) {
          var physicalRow = hot.toPhysicalRow(changes[i][0]);
          var columnVal = hot.propToCol(changes[i][1]);
          change_index = changes[i][0];
          change_prop = changes[i][1];
          change_oldVal = changes[i][2];
          change_newVal = changes[i][3];

          if (change_oldVal == change_newVal) {
            return "continue";
          }

          var dgm = that.getDgmInfoByIndex(change_index);
          /*type==1*/

          if ((that.type == 10 || that.type == 14) && change_prop == "dgm.dgm_name") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.dgmSources, dgm.dgmSources_keys, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.dgm_id = flag;
            }
          }

          if (change_prop == "dgm.byRealtime_TZ_intrvl_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.realTimeSources, dgm.realTimeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byRealtime_TZ_intrvl = flag;
            }
          }

          if (change_prop == "dgm.byVector_TZ_intrvl_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byVectorSources, dgm.byVectorSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byVector_TZ_intrvl = flag;
            }
          }

          if (change_prop == "dgm.byRealtime_Wave_intrvl_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.waveIntrvlSources, dgm.waveIntrvlSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byRealtime_Wave_intrvl = flag;
            }
          }

          if (change_prop == "dgm.byVector_Wave_intrvl_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.bvWaveIntrvlSources, dgm.bvWaveIntrvlSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byVector_Wave_intrvl = flag;
            }
          }

          if (change_prop == "dgm.byBlack_Data_intrvl_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byBlackSources, dgm.byBlackSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byBlack_Data_intrvl = flag;
            }
          }

          if (change_prop == "dgm.flash_intrvl_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.fleshSources, dgm.fleshSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.flash_intrvl = flag;
            }
          }

          if (change_prop == "dgm.if_output_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.ifOutputSources, dgm.ifOutputSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.if_output = flag;
            }
          }
          /*type==2*/


          if (change_prop == "dgm.pos_class_val") {
            if ((change_newVal == "塔筒" || change_oldVal == "塔筒") && dgm.bind_count != 0) {
              swal({
                title: "提示",
                text: "\u8BE5\u901A\u9053\u4E0B\u5DF2\u5EFA\u6D4B\u70B9\uFF0C\u4E0D\u53EF\u4FEE\u6539",
                button: "确认"
              });
              return {
                v: false
              };
            }

            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.posClassSources, dgm.posClassSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              var posLocSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["posClassToPosLoc"])(flag, dgm.dgm_type, dgm.t_root);
              dgm.pos_class = flag;
              dgm.pos_loc = Object.keys(posLocSource)[0];
              dgm.pos_loc_val = Object.values(posLocSource)[0];
              dgm.posLocSources = Object.values(posLocSource);
              dgm.posLocSources_key = Object.keys(posLocSource);

              if (flag == 4 && dgm.t_root != 2) {
                dgm.pos_loc = '';
                dgm.pos_loc_val = "";
              }
            }
          }

          if (change_prop == "dgm.pos_loc_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.posLocSources, dgm.posLocSources_key, change_newVal, change_index);
            var posLocList = [];

            if (flag === false) {
              return {
                v: false
              };
            } else {
              /*if(dgm.pos_class==4){
                data.forEach(dgmItem =>{
                  if(dgm.dgm_id == dgmItem.dgm.dgm_id){
                    posLocList.push(dgmItem.dgm.pos_loc_val)
                  }
                });
                if(posLocList.indexOf(change_newVal)>-1){
                  swal({
                    title: "提示",
                    text: `该位置已绑`,
                    button: "确认",
                  });
                  return false;
                }
                else{
                  dgm.pos_loc = flag;
                  dgm.pos_loc_val = change_newVal;
                }
              }
              else{*/
              dgm.pos_loc = flag;
              dgm.pos_loc_val = change_newVal;
              /*}*/
            }
          }

          if (change_prop == "dgm.bySensorType_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.sensorSources, dgm.sensorSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.bySensorType = flag;
              dgm.scale_unit = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["sensorType"])(dgm.bySensorType)[1];
              dgm.scale_unit_val = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["sensorType"])(dgm.bySensorType)[2];
              dgm.byIntegral = "0";
              dgm.byIntegral_val = "不积分";
              var integralSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["unitToSources"])(dgm.scale_unit, dgm.byIntegral, dgm.dgm_type)[1];
              var unitSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["unitToSources"])(dgm.scale_unit, dgm.byIntegral, dgm.dgm_type)[0];
              dgm.byUnitName = Object.values(unitSource)[0];
              dgm.byUnit = Object.keys(unitSource)[0];
              dgm.integralSources = Object.values(integralSource);
              dgm.integralSources_key = Object.keys(integralSource);
              dgm.byHwIntegralSources = Object.values(integralSource);
              dgm.byHwIntegralSources_key = Object.keys(integralSource);
              dgm.unitSources = Object.values(unitSource);
              dgm.unitSources_key = Object.keys(unitSource);

              if (dgm.dgm_type == 4) {
                dgm.byHwIntegral = "0";
                dgm.byHwIntegral_val = "不积分";
              }
            }
          }

          if (change_prop == "dgm.byIntegral_val") {
            //软件积分
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.integralSources, dgm.integralSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byIntegral = flag;

              if (flag == 1 && dgm.dgm_type == 4) {
                //mhd软件积分与硬件积分二选一
                dgm.byHwIntegral = "0";
                dgm.byHwIntegral_val = "不积分";
              }

              var _unitSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["unitToSources"])(dgm.scale_unit, dgm.byIntegral, dgm.dgm_type)[0];
              dgm.byUnit = Object.keys(_unitSource)[0];
              dgm.byUnitName = Object.values(_unitSource)[0];
              dgm.unitSources = Object.values(_unitSource);
              dgm.unitSources_key = Object.keys(_unitSource);
            }
          }

          if (change_prop == "dgm.byUnitName") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.unitSources, dgm.unitSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byUnit = flag;
            }
          }

          if (change_prop == "dgm.byVib_Signal_Zoom_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.vibSignalZoomSources, dgm.vibSignalZoomSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byVib_Signal_Zoom = flag;
            }
          }

          if (change_prop == "dgm.byHw_Filter_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.hwFilterSources, dgm.hwFilterSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byHw_Filter = flag;
            }
          }

          if (change_prop == "dgm.bySw_Filter_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.swFilterSources, dgm.swFilterSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.bySw_Filter = flag;
            }
          }

          if (change_prop == "dgm.power_time_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.powerTimeSources, dgm.powerTimeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.power_time = flag;
            }
          }

          if (change_prop == "dgm.pos_part_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.posPartSources, dgm.posPartSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.pos_part = flag;
            }
          }

          if (change_prop == "dgm.byHwIntegral_val") {
            //硬件积分
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byHwIntegralSources, dgm.byHwIntegralSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byHwIntegral = flag;

              if (flag == 1 && dgm.dgm_type == 4) {
                //mhd软件积分与硬件积分二选一
                dgm.byIntegral = "0";
                dgm.byIntegral_val = "不积分";
              }

              var _unitSource2 = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["unitToSources"])(dgm.scale_unit, dgm.byHwIntegral, dgm.dgm_type)[0];
              dgm.byUnit = Object.keys(_unitSource2)[0];
              dgm.byUnitName = Object.values(_unitSource2)[0];
              dgm.unitSources = Object.values(_unitSource2);
              dgm.unitSources_key = Object.keys(_unitSource2);
            }
          }

          if (change_prop == "dgm.trans_ch_type_val") {
            if (dgm.bind_count != 0) {
              swal({
                title: "提示",
                text: "\u8BE5\u901A\u9053\u4E0B\u5DF2\u5EFA\u8BE5\u7C7B\u578B\u6D4B\u70B9\uFF0C\u4E0D\u53EF\u8F6C",
                button: "确认"
              });
              return {
                v: false
              };
            }

            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.transChTypeSources, dgm.transChTypeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.trans_ch_type = flag;
            }
          }

          if (change_prop == "dgm.int_zoom_val") {
            //积分量程
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.intZoomSources, dgm.intZoomSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.int_zoom = flag;
            }
          }
          /*type==3*/


          if (change_prop == "dgm.byStaType_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byStaTypeSources, dgm.byStaTypeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byStaType = flag;
            }
          }

          if (change_prop == "dgm.range_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.rangeSources, dgm.rangeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.range = flag;
            }
          }
          /*type==4*/


          if (change_prop == "dgm.dwLow_signal_value" || change_prop == "dgm.dwLow_eng_value" || change_prop == "dgm.dwHi_signal_value" || change_prop == "dgm.dwHi_eng_value") {
            var _reg = new RegExp(/(^[\-0-9][0-9]*(.[0-9]+)?)$/); //正负数字正则


            if (!_reg.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6570\u5B57"),
                button: "确认"
              });
              return {
                v: false
              };
            }
          }

          if (that.type == 4) {
            if (change_prop == "dgm.bySensorType821_val") {
              flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.sensorSources, dgm.sensorSources_key, change_newVal, change_index);

              if (flag === false) {
                return {
                  v: false
                };
              } else {
                dgm.bySensorType = flag;
                var byUnitNameSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["unitToSources"])(null, null, dgm.dgm_type, dgm.bySensorType)[0];
                dgm.byUnitNameSources = Object.values(byUnitNameSource);
                dgm.byUnitNameSources_key = Object.keys(byUnitNameSource);
                dgm.byUnit = Object.keys(byUnitNameSource)[0]; //单位

                dgm.byUnitName_val = Object.values(byUnitNameSource)[0]; //单位名称
              }
            }

            if (change_prop == "dgm.dwLow_signal_value") {
              if (change_newVal == dgm.dwHi_signal_value) {
                swal({
                  title: "提示",
                  text: "\u7B2C".concat(change_index + 1, "\u884C\uFF0C\u53C2\u8003\u70B9A\u548CB\u7684x\u8F74\u503C\u4E0D\u80FD\u76F8\u7B49"),
                  button: "确认"
                });
                return {
                  v: false
                };
              }
            }

            if (change_prop == "dgm.dwHi_signal_value") {
              if (change_newVal == dgm.dwLow_signal_value) {
                swal({
                  title: "提示",
                  text: "\u7B2C".concat(change_index + 1, "\u884C\uFF0C\u53C2\u8003\u70B9A\u548CB\u7684x\u8F74\u503C\u4E0D\u80FD\u76F8\u7B49"),
                  button: "确认"
                });
                return {
                  v: false
                };
              }
            }
          }
          /*type==5*/


          if (change_prop == "dgm.byStrong_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byStrongSources, dgm.byStrongSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byStrong = flag;
            }
          }

          if (change_prop == "dgm.reverse_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.reverseSources, dgm.reverseSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.reverse = flag;
            }
          }

          if (change_prop == "dgm.dwCompre_volt_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.dwCompreVoltSources, dgm.dwCompreVoltSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.dwCompre_volt = flag;
            }
          }

          if (change_prop == "dgm.polar_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.polarSources, dgm.polarSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.polar = flag;
            }
          }

          if (change_prop == "dgm.high_density_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.highDensitySources, dgm.highDensitySources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.high_density = flag;
            }
          }
          /*type==6*/


          if (change_prop == "dgm.byDigitalType_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byDigitalTypeSources, dgm.byDigitalTypeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byDigitalType = flag;
            }
          }

          if (change_prop == "dgm.byifpower_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byifpowerSources, dgm.byifpowerSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byifpower = flag;
            }
          }

          if (change_prop == "dgm.byifalarm_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byifalarmsources, dgm.byifalarmsources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byifalarm = flag;
            }
          }

          if (change_prop == "dgm.bybindch_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.bybindchSources, dgm.bybindchSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.bybindch = flag;
            }
          }

          if (change_prop == "dgm.bybindtype_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.bybindtypeSources, dgm.bybindtypeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.bybindtype = flag;
            }
          }
          /*type==7*/


          if (change_prop == "dgm.dest_type_val") {
            //type==18 外部集成设置
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.destTypeSources, dgm.destTypeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.dest_type = flag;
              var databitSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["destToDatabit"])(dgm.dest_type);
              dgm.databit = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["getArrFromObj"])(databitSource)[0][0], dgm.databit_val = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["getArrFromObj"])(databitSource)[1][0], //数据位
              dgm.databitSources = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["getArrFromObj"])(databitSource)[1];
              dgm.databitSources_key = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["getArrFromObj"])(databitSource)[0];
            }
          }

          if (change_prop == "dgm.databit_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.databitSources, dgm.databitSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.databit = flag;
            }
          }

          if (change_prop == "dgm.stopbit_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.stopbitSources, dgm.stopbitSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.stopbit = flag;
            }
          }

          if (change_prop == "dgm.baudrate_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.baudrateSources, dgm.baudrateSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.baudrate = flag;
            }
          }

          if (change_prop == "dgm.parity_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.paritySources, dgm.paritySources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.parity = flag;
            }
          }

          if (change_prop == "dgm.mode_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.modeSources, dgm.modeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.mode = flag;
            }
          }

          if (change_prop == "dgm.masterslave_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.masterslaveSources, dgm.masterslaveSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.masterslave = flag;
            }
          }
          /*type==9*/


          if (change_prop == "dgm.capture_type_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.captureTypeSources, dgm.captureTypeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.capture_type = flag;
            }
          }

          if (change_prop == "dgm.capture_freq_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.captureFreqSources, dgm.captureFreqSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.capture_freq = flag;
              var captureTimeSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["freqToCaptureTime"])(dgm.capture_freq);
              dgm.capture_time = Object.keys(captureTimeSource)[0];
              dgm.capture_time_val = Object.values(captureTimeSource)[0];
              dgm.captureTimeSources = Object.values(captureTimeSource);
              dgm.captureTimeSources_key = Object.keys(captureTimeSource);
            }
          }

          if (change_prop == "dgm.capture_time_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.captureTimeSources, dgm.captureTimeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.capture_time = flag;
              dgm.capture_time_val = change_newVal;
            }
          }

          if (change_prop == "dgm.ch1") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.channelSources, dgm.channelSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.ch1_val = flag;
              dgm.ch1 = change_newVal;
            }
          }
          /*type==11*/


          if (change_prop == "dgm.mhd_id") {
            var _reg2 = new RegExp("^[0-9]*$");

            if (!_reg2.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6570\u5B57"),
                button: "确认"
              });
            } else {
              if (change_newVal.length !== 8) {
                swal({
                  title: "提示",
                  text: "ID\u9700\u4E3A8\u4F4D\u6570\u5B57",
                  button: "确认"
                });
              }

              if (mhd_idList.indexOf(change_newVal) != -1) {
                swal({
                  title: "提示",
                  text: "\u7B2C".concat(change_index + 1, "\u884Cid\u91CD\u540D"),
                  button: "确认"
                });
              }
            }
          }
          /*type==13*/


          if (change_prop == "dgm.frq_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.frqSources, dgm.frqSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.frq = flag;
            }
          }

          if (change_prop == "dgm.wm_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.wmSources, dgm.wmSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.wm = flag;
            }
          }

          if (change_prop == "dgm.wkm_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.wkmSources, dgm.wkmSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.wkm = flag;
            }
          }

          if (change_prop == "dgm.flm_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.flmSources, dgm.flmSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.flm = flag;
            }
          }

          if (change_prop == "dgm.ev_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.evSources, dgm.evSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.ev = flag;
            }
          }

          if (change_prop == "dgm.pm_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.pmSources, dgm.pmSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.pm = flag;
            }
          }

          if (change_prop == "dgm.sl_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.slSources, dgm.slSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.sl = flag;
            }
          }

          if (change_prop == "dgm.tm_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.tmSources, dgm.tmSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.tm = flag;
            }
          }

          if (change_prop == "dgm.swDamping_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.swDampingSources, dgm.swDampingSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.swDamping = flag;
            }
          }

          if (change_prop == "dgm.ext_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.extSources, dgm.extSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.ext = flag;
            }
          }

          if (change_prop == "dgm.pulserCtx_md_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.pulserCtx_mdSources, dgm.pulserCtx_mdSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.pulserCtx_md = flag;
            }
          }

          if (change_prop == "dgm.gateMode_gt_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.gateMode_gtSources, dgm.gateMode_gtSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.gateMode_gt = flag;
            }
          }

          if (change_prop == "dgm.gateMode_md_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.gateMode_mdSources, dgm.gateMode_mdSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.gateMode_md = flag;
            }
          }

          if (change_prop == "dgm.gateFlawJudge_gt_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.gateFlawJudge_gtSources, dgm.gateFlawJudge_gtSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.gateFlawJudge_gt = flag;
            }
          }

          if (change_prop == "dgm.lg_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.lgSources, dgm.lgSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.lg = flag;
            }
          }

          if (change_prop == "dgm.swSuppressCnt_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.swSuppressCntSources, dgm.swSuppressCntSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.swSuppressCnt = flag;
            }
          }

          if (change_prop == "dgm.measurementCtx_gt_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.measurementCtx_gtSources, dgm.measurementCtx_gtSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.measurementCtx_gt = flag;
            }
          }

          if (change_prop == "dgm.measurementCtx_md_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.measurementCtx_mdSources, dgm.measurementCtx_mdSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.measurementCtx_md = flag;
            }
          }

          if (change_prop == "dgm.jd_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.jdSources, dgm.jdSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.jd = flag;
            }
          }

          if (change_prop == "dgm.sw_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.swSources, dgm.swSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.sw = flag;
            }
          }

          if (change_prop == "dgm.role_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.roleSources, dgm.roleSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.role = flag;
            }
          }
          /*type==14*/


          if (change_prop == "dgm.pos_class2600_val") {
            /*if((change_newVal=="塔筒" || change_oldVal=="塔筒") && dgm.bind_count!=0){
              swal({
                title: "提示",
                text: `该通道下已建测点，不可修改`,
                button: "确认",
              });
              return false;
            }
            */
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.posClassSources, dgm.posClassSources_keys, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              var _posLocSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_4__["posClassToPosLoc"])(flag, 5, dgm.t_root);

              dgm.pos_class2600 = flag;
              dgm.pos_loc = Object.keys(_posLocSource)[0];
              dgm.pos_loc_val = Object.values(_posLocSource)[0];
              dgm.posLocSources = Object.values(_posLocSource);
              dgm.posLocSources_key = Object.keys(_posLocSource);

              if (flag == 4) {
                dgm.pos_loc = '';
                dgm.pos_loc_val = "";
              }
            }
          }
          /*type==15*/


          if (that.type == 15 && change_prop == "dgm.dgm_name") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.dgmSources, dgm.dgmSources_keys, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.dgm_id = flag;
              dgm.flange_id = Object.keys(_this.flangeList[dgm.dgm_id])[0];
              dgm.flange_name = Object.values(_this.flangeList[dgm.dgm_id])[0];
              dgm.flangeSources = Object.values(_this.flangeList[dgm.dgm_id]);
              dgm.flangeSources_keys = Object.keys(_this.flangeList[dgm.dgm_id]);
            }
          }

          if (change_prop == "dgm.flange_name") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.flangeSources, dgm.flangeSources_keys, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.flange_id = flag;
            }
          }

          if (change_prop == "dgm.collect_mode_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.collectModeSources, dgm.collectModeSources_keys, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.collect_mode = flag;
            }
          }
          /*type==16*/


          if (change_prop == "dgm.bolt_pos_loc_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.posLocSources, dgm.posLocSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.bolt_pos_loc = flag;
              dgm.flange_id = flag;
              dgm.prepsIdSources = Object.values(dgm.flange_prepsIdSources[dgm.bolt_pos_loc]);
              dgm.prepsIdSources_key = Object.keys(dgm.flange_prepsIdSources[dgm.bolt_pos_loc]);
              dgm.preps_id = dgm.prepsIdSources_key[0]; //预处理器控制

              dgm.preps_id_val = dgm.prepsIdSources[0]; //预处理器控制
            }
          }

          if (change_prop == "dgm.preps_id_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.posLocSources, dgm.posLocSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.preps_id = flag;
            }
          }

          if (change_prop == "dgm.b_id_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.bIdSources, dgm.bIdSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.b_id = flag;
              data.forEach(function (item, index) {
                if (item.dgm.dgm_id == dgm.dgm_id && item.dgm.ch_id == dgm.b_id) {
                  item.dgm.b_id = dgm.ch_id;
                  item.dgm.b_id_val = dgm.ch_name;
                  var sendDgm = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["changeDgm"])(that.type, item.dgm, index);
                  var changeMachineId = sendDgm.machineId + "_" + index;
                  var chType_chId = sendDgm.ch_type + "_" + sendDgm.ch_id;
                  var changeData = that.changeList.changeData;
                  var changeDgmId = item.dgm.dgm_id;
                  changeData[changeMachineId] = {};
                  changeData["type"] = that.type;
                  changeData[changeMachineId][changeDgmId] = {};
                  changeData[changeMachineId][changeDgmId][chType_chId] = sendDgm;
                }
              });
            }
          }

          if (change_prop == "dgm.bySensorTypeBolt_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.bySensorTypeSources, dgm.bySensorTypeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.bySensorType = flag;
            }
          }

          if (that.type == 16 && change_prop == "dgm.byUnitName") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.byUnitNameSources, dgm.byUnitNameSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.byUnit = flag;
            }
          }

          if (change_prop == "dgm.highSamp_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.highSampSources, dgm.highSampSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.highSamp = flag;
            }
          }

          if (change_prop == "dgm.scanLength_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.scanLengthSources, dgm.scanLengthSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.scanLength = flag;
            }
          }

          if (change_prop == "dgm.readMode_val") {
            flag = Object(utils_utils_js__WEBPACK_IMPORTED_MODULE_3__["setChangeCellResult"])(dgm.readModeSources, dgm.readModeSources_key, change_newVal, change_index);

            if (flag === false) {
              return {
                v: false
              };
            } else {
              dgm.readMode = flag;
            }
          }

          var numPropArr = ['dgm.car_id', 'dgm.dev_id', 'dgm.dev_id', 'dgm.tower_flange_sum', 'dgm.iDamping', 'dgm.iPulseCoarseDly', 'dgm.iPulseFineDly', 'dgm.iPulseWdh', 'dgm.iPRF', 'dgm.iSupCnt', 'dgm.bolt_sum', 'dgm.preps_id', 'dgm.bolt_num_beigin', 'dgm.bolt_num_end', 'dgm.boltID', 'dgm.ac_id', 'dgm.bolt_num', 'dgm.totalLen', 'dgm.fBoltLength', 'dgm.fDiameter', 'dgm.clampLen', 'dgm.fStart', 'dgm.fWidth', 'dgm.fThreshold', 'dgm.fGain', 'dgm.cableLen', 'dgm.cableCoeff', 'dgm.preQuantity', 'dgm.preCoeff', 'dgm.offsetValue', 'dgm.wStart', 'dgm.wRange'];

          if (numPropArr.indexOf(change_prop) > -1) {
            if (!reg.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u975E\u8D1F\u6574\u6570"),
                button: "确认"
              });
              return {
                v: false
              };
            }
          }

          hot.setCellMeta(physicalRow, columnVal, 'className', 'red-color');
        };

        for (var i = 0; i < changes.length; i++) {
          var _ret = _loop(i);

          switch (_ret) {
            case "continue":
              continue;

            default:
              if (_typeof(_ret) === "object") return _ret.v;
          }
        }
      };
    } //改变数据后的方法 （共用）

  }, {
    key: "afterChange",
    value: function afterChange() {
      var that = this;
      return function (changes, source) {
        //修改数据事件
        // console.log('afterChange');
        this.render(); //表格大小会改动，重新渲染表格调整表格样式

        var changeData = that.changeList.changeData;
        var changeMhd = that.changeList.changeMhd;
        var changeTms = that.changeList.changeTms;
        var addDefaultData = that.changeList.addDefaultDgm;
        var change_oldVal;
        var change_newVal;

        if (changes) {
          for (var i = 0; i < changes.length; i++) {
            change_oldVal = changes[i][2];
            change_newVal = changes[i][3];

            if (change_oldVal == change_newVal) {
              continue;
            }

            var hot = that.getHot();
            var dgm = that.getDgmInfoByIndex(changes[i][0]);
            var physicalRow = hot.toPhysicalRow(changes[i][0]);
            var sendDgm = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_2__["changeDgm"])(that.type, dgm, changes[i][0]);
            var changeMachineId = sendDgm.machineId + "_" + physicalRow;
            var chType_chId = sendDgm.ch_type + "_" + sendDgm.ch_id;
            var changeDgmId = dgm.dgm_id;

            if (that.type != 1 && that.type != 11 && that.type != 10 && that.type != 13 && that.type != 14 && that.type != 15 && that.type != 17 && that.type != 18) {
              changeData[changeMachineId] = {};
              changeData["type"] = that.type;
              changeData[changeMachineId][changeDgmId] = {};
              changeData[changeMachineId][changeDgmId][chType_chId] = sendDgm;

              if (that.type == 2 || that.type == 3) {
                changeData[changeMachineId][changeDgmId]["ch_id"] = sendDgm.ch_id;
                changeData[changeMachineId][changeDgmId]["trans_ch_type"] = dgm.trans_ch_type;
              }
            } else if (that.type == 10) {
              //前置处理器设置
              changeTms[physicalRow] = sendDgm;
            } else if (that.type == 11) {
              //mhd主从设置
              changeMhd[physicalRow] = sendDgm;
            } else if (that.type == 17) {
              //E821主从设置
              changeMhd[physicalRow] = sendDgm;
            } else if (that.type == 13) {
              //采集设置
              changeData[changeDgmId] = sendDgm;
            } else if (that.type == 14 || that.type == 15) {
              //法兰设置,预处理器设置
              changeData[physicalRow] = sendDgm;
            } else if (that.type == 18) {
              if (sendDgm.operate) {
                addDefaultData[physicalRow] = sendDgm;
              } else {
                changeData[changeMachineId] = {};
                changeData["type"] = that.type;
                changeData[changeMachineId][changeDgmId] = {};
                changeData[changeMachineId][changeDgmId][chType_chId] = sendDgm;
              }
            } else {
              changeData[changeMachineId] = {};
              changeData["type"] = that.type;
              changeData[changeMachineId][changeDgmId] = sendDgm;
            }
          }

          ;
        }
      };
    }
    /* 根据索引行获取真实数据和物理行 (共用)*/

  }, {
    key: "getDgmInfoByIndex",
    value: function getDgmInfoByIndex(index) {
      var hot = this.getHot();
      var data = this.getData();
      var physicalRow = hot.toPhysicalRow(index);
      var dgm = data[physicalRow].dgm;
      return dgm;
    }
    /**
     * 删除一条之后要做的一些还原素组的方法
     */

  }, {
    key: "remove_remake",
    value: function remove_remake() {
      var mhd; //mhd

      var pump; //子集

      var station; //站点

      var type = Number(this.type);
      /* 删除changeData 和addData里面的数据 */

      for (var i = 0; i < deleteArray.length; i++) {
        switch (type) {
          case 11:
            mhd = deleteArray[i];
            var changeData = this.changeList.changeMhd;
            console.log(changeData);
            console.log(mhd);
            break;

          case 3:
            pump = deleteArray[i];

            if (pump.operate == 0) {
              //旧子集
              delete this.changeList.changeData[pump.pump_id];
            } else if (pump.operate == 1) {
              //新建子集
              delete this.changeList.addData[pump.pump_id];
            }

            break;

          case 4:
            station = deleteArray[i];
            delete this.changeList.changeData[station.index];
            break;
        }
      }
      /* 重置删除数据的数组 */


      while (this.changeList.deleteData.length) {
        this.changeList.deleteData.pop();
      }
    }
  }]);

  return tableData;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! sweetalert */ "./node_modules/_sweetalert@2.1.2@sweetalert/dist/sweetalert.min.js"), __webpack_require__(/*! jquery */ "./node_modules/_jquery@3.5.1@jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/components/content/system/dgm/table/js/dgm_mixin.js":
/*!*****************************************************************!*\
  !*** ./src/components/content/system/dgm/table/js/dgm_mixin.js ***!
  \*****************************************************************/
/*! exports provided: dgmMixin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(swal, $) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dgmMixin", function() { return dgmMixin; });
/* harmony import */ var _dgm_hdtable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dgm_hdtable.js */ "./src/components/content/system/dgm/table/js/dgm_hdtable.js");
/* harmony import */ var _dgm_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dgm_info.js */ "./src/components/content/system/dgm/table/js/dgm_info.js");
/* harmony import */ var _components_content_system_dgm_table_js_dgm_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/content/system/dgm/table/js/dgm_methods */ "./src/components/content/system/dgm/table/js/dgm_methods.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/utils */ "./src/utils/utils.js");




var dgmMixin = {
  data: function data() {
    return {
      hot: {},
      //hottable对象
      data: [],
      //hottable的data数据
      changeList: {
        changeData: {},
        //修改的数据
        sortMacList: [],
        //过滤机组名列表
        sortDgmList: [],
        //过滤采集器列表
        changeMhd: {},
        //MHD主从设置修改的数据
        changeTms: {},
        //tms前置处理器修改的数据
        addMhd: [],
        //MHD主从设置新建
        addTms: [],
        //tms前置处理器新建
        deleteData: [],
        //mhd主从设置删除的数据
        addDefaultDgm: [] //新建虚拟采集器通道（type==18)

      },
      MHDList: [],
      //mhd采集器主从设置中主设备下拉选项
      E821List: [],
      //E821采集器主从设置中主设备下拉选项
      tmsList: {},
      //tms采集器前置处理器的下拉选项
      dgmList: {},
      //法兰设置、预处理器设置采集器下拉选项
      defaultDgmInfo: {},
      //默认采集器信息
      flangeList: {},
      //预处理器设置法兰下拉选项
      scroll: 0 //滚动距离

    };
  },
  destroyed: function destroyed() {
    this.$store.commit('clearSroll', 'dgm');
  },
  activated: function activated() {
    var wtHolder = document.getElementsByClassName('wtHolder')[0];

    if (wtHolder) {
      var state = this.$store.state.scroll['dgm'][this.type];
      wtHolder.scrollTop = state === undefined ? 0 : state.scrollTop;
      wtHolder.scrollLeft = state === undefined ? 0 : state.scrollLeft;
    }
  },
  beforeRouteLeave: function beforeRouteLeave(to, from, next) {
    if (to.name === 'fitInfo') {
      if (this.$parent.fittingInfo.length === 0) {
        swal({
          title: "提示",
          text: "\u8BF7\u5148\u9009\u62E9\u91C7\u96C6\u5668",
          button: "确认"
        });
        return;
      } else {
        this.$parent.fitShow = true;
        this.$parent.fitBtnShow = false;
        next();
      }
    }

    if (!$.isEmptyObject(this.changeList.changeData)) {
      swal({
        title: "警告",
        text: "".concat(Object(_components_content_system_dgm_table_js_dgm_methods__WEBPACK_IMPORTED_MODULE_2__["dgmBtn_name"])(this.type), "\u672A\u4FDD\u5B58"),
        buttons: {
          sure: "确认",
          cancel: "取消"
        },
        dangerMode: true
      }).then(function (willDelete) {
        if (willDelete) {
          next();
        } else {
          window.history.go(1);
        }
      });
    } else {
      next();
    }
  },
  mounted: function mounted() {
    this.getListData(this.type);
  },
  methods: {
    getListData: function getListData(type) {
      var _this = this;

      if (type == 11) {
        this.$getApi.getMHDDgmInfo().then(function (res) {
          var result = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getMHDInfo"])(res, type)[0];
          var canBuild = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getMHDInfo"])(res, type)[1];
          _this.MHDList = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getMHDInfo"])(res, type)[2];

          if (!canBuild) {
            _this.$emit("child-msg", _this.type, false);
          } else {
            //组织dgm结构
            _this.data = result; //渲染表格

            _this.$emit("child-msg", _this.type, true);

            _this.filter_by_dgmName();

            _this.renderTable();
          }
        })["catch"](function (err) {
          console.log('请求错误', err);
        });
      } else if (type == 13 || type == 14 || type == 15) {
        var params = type - 12;
        this.$getApi.queryBoltList(params).then(function (res) {
          var result = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getDgmInfo"])(res, type); //组织dgm结构

          if (type == 14) {
            _this.dgmList = {};
            var dgmInfo = res.dgm_list;
            dgmInfo.forEach(function (dgm) {
              _this.dgmList[dgm.dgm_id] = dgm.dgm_name;
            });
          }

          if (type == 15) {
            _this.dgmList = {};
            _this.flangeList = {};
            var _dgmInfo = res.dgm_list;

            _dgmInfo.forEach(function (dgm) {
              _this.dgmList[dgm.dgm_id] = dgm.dgm_name;
              _this.flangeList[dgm.dgm_id] = {};
              _this.flangeList[dgm.dgm_id][255] = '无';
              dgm.flangeList.forEach(function (flange) {
                _this.flangeList[dgm.dgm_id][flange.byId] = flange.byName;
              });
            });
          }

          if (!result.length) {
            _this.$emit("child-msg", _this.type, false);
          } else {
            _this.data = result; //渲染表格

            _this.$emit("child-msg", _this.type, true);

            _this.filter_by_dgmName();

            _this.renderTable();
          }
        })["catch"](function (err) {
          console.log('请求错误', err);
        });
      } else if (type == 16) {
        this.$getApi.queryBoltChannel(this.$store.state.tids).then(function (res) {
          var result = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getDgmInfo"])(res, type);

          if (!result.length) {
            _this.$emit("child-msg", _this.type, false);
          } else {
            _this.data = result; //渲染表格

            _this.$emit("child-msg", _this.type, true);

            _this.filter_by_dgmName();

            _this.renderTable();
          }
        })["catch"](function (err) {
          console.log('请求错误', err);
        });
      } else if (type == 17) {
        this.$getApi.getE821DgmInfo().then(function (res) {
          var result = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getMHDInfo"])(res, type)[0];
          var canBuild = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getMHDInfo"])(res, type)[1];
          _this.E821List = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getMHDInfo"])(res, type)[2];

          if (!canBuild) {
            _this.$emit("child-msg", _this.type, false);
          } else {
            //组织dgm结构
            _this.data = result; //渲染表格

            _this.$emit("child-msg", _this.type, true);

            _this.filter_by_dgmName();

            _this.renderTable();
          }
        })["catch"](function (err) {
          console.log('请求错误', err);
        });
      } else if (type == 999) {
        var _params = [];
        var fitSession;

        if (sessionStorage.getItem('fittingInfo')) {
          fitSession = JSON.parse(sessionStorage.getItem('fittingInfo'));
        }

        var dgmList = fitSession;

        if (dgmList.length > 0) {
          dgmList.forEach(function (dgm) {
            _params.push(dgm.dgm_id.toString());
          });
          _params = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_3__["distinct"])(_params, []); //去除重复的采集器

          this.$getApi.queryBoltFittingList(_params).then(function (res) {
            var result = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getDgmInfo"])(res, type);
            _this.data = result; //渲染表格

            _this.$emit("child-msg", _this.type, true);

            _this.filter_by_dgmName();

            _this.renderTable();
          })["catch"](function (err) {
            console.log('请求错误', err);
          });
        }
      } else {
        this.$getApi.queryModelByType(type, this.$store.state.tids).then(function (res) {
          var result = Object(_dgm_info_js__WEBPACK_IMPORTED_MODULE_1__["getDgmInfo"])(res, type);

          if (type == 18) {
            _this.defaultDgmInfo = res.dgm;
          }

          if (!result.length) {
            if (type != 18) {
              _this.$emit("child-msg", _this.type, false);
            } else {
              //渲染表格
              _this.filter_by_dgmName();

              _this.renderTable();
            }
          } else {
            //组织dgm结构
            if (type == 10) {
              _this.tmsList = {};
              var tmsInfo = res.tmsDgmInfo;
              tmsInfo.forEach(function (tms) {
                _this.tmsList[tms.dgm_id] = tms.dgm_name;
              });
            }

            _this.data = result; //渲染表格

            _this.$emit("child-msg", _this.type, true);

            _this.filter_by_dgmName();

            _this.renderTable();
          }
        })["catch"](function (err) {
          console.log('请求错误', err);
        });
      }
    },

    /* 渲染表格 */
    renderTable: function renderTable() {
      var _this2 = this;

      var HotTable = document.getElementById('HotTable');
      var property = {
        type: this.type,
        getData: this.getData,
        getHot: this.getHot,
        changeList: this.changeList,
        MHDList: this.MHDList,
        E821List: this.E821List,
        tmsList: this.tmsList,
        dgmList: this.dgmList,
        defaultDgmInfo: this.defaultDgmInfo,
        flangeList: this.flangeList,
        fittingInfo: this.$parent.fittingInfo,
        select821Info: this.$parent.select821Info,
        btnData: this.$parent.btnData,
        reRenderSelectOption: this.reRenderSelectOption,
        router: this.$router
      }; //创建table

      this.hot = new _dgm_hdtable_js__WEBPACK_IMPORTED_MODULE_0__["default"](HotTable, property);
      this.reRenderSelectOption();
      /* 监听滚动事件 */

      var wtHolder = document.getElementsByClassName('wtHolder')[0];
      wtHolder.addEventListener('scroll', function (e) {
        var scrollTop = wtHolder.scrollTop;
        var scrollLeft = wtHolder.scrollLeft;
        var paload = {
          scrollType: 'dgm',
          type: _this2.type,
          scrollTop: scrollTop,
          scrollLeft: scrollLeft
        };

        _this2.$store.commit('setScroll', paload);

        _this2.hot.destroyEditor(); //处理当选择下拉框后拖动滚动条框框会跟着跑的问题

      });
    },

    /* 加载的时候根据dgm_name 来过滤数据 */
    filter_by_dgmName: function filter_by_dgmName() {
      var _this3 = this;

      var data = [];
      if (!sessionStorage.getItem('dgm_id')) return;
      /* 没有这一选项返回  */

      var dgm_ids = JSON.parse(sessionStorage.getItem('dgm_id'));
      if (dgm_ids.length == 0) return;
      /* 选项为空，返回 */

      dgm_ids.forEach(function (dgm_id) {
        _this3.data.forEach(function (dgm) {
          if (dgm.dgm.dgm_id == dgm_id) {
            data.push(dgm);
          }
        });
      });
      this.data = data;
    },

    /*渲染下拉选项*/
    reRenderSelectOption: function reRenderSelectOption() {
      var _this4 = this;

      //重新渲染selectOption,让每个option
      var cellMeta = this.hot.getCellMetaAtRow(0);
      var rows = this.data.length;
      cellMeta.forEach(function (item) {
        if (item.prop == "dgm.byRealtime_TZ_intrvl_val") {
          //特征值实时上传间隔的下拉选项
          for (var i = 0; i <= rows; i++) {
            _this4.hot.setCellMeta(i, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.realTimeSources;
            });
          }
        }

        if (item.prop == "dgm.byVector_TZ_intrvl_val") {
          //特征值存储时间间隔的下拉选项
          for (var _i = 0; _i <= rows; _i++) {
            _this4.hot.setCellMeta(_i, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.byVectorSources;
            });
          }
        }

        if (item.prop == "dgm.byRealtime_Wave_intrvl_val") {
          //波形实时上传间隔
          for (var _i2 = 0; _i2 <= rows; _i2++) {
            _this4.hot.setCellMeta(_i2, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.waveIntrvlSources;
            });
          }
        }

        if (item.prop == "dgm.byVector_Wave_intrvl_val") {
          //波形存储时间间隔
          for (var _i3 = 0; _i3 <= rows; _i3++) {
            _this4.hot.setCellMeta(_i3, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.bvWaveIntrvlSources;
            });
          }
        }

        if (item.prop == "dgm.pos_class_val") {
          //安装分类
          for (var _i4 = 0; _i4 <= rows; _i4++) {
            _this4.hot.setCellMeta(_i4, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.posClassSources;
            });
          }
        }

        if (item.prop == "dgm.pos_loc_val") {
          //安装位置
          for (var _i5 = 0; _i5 <= rows; _i5++) {
            _this4.hot.setCellMeta(_i5, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.posLocSources;
            });
          }
        }

        if (item.prop == "dgm.pos_part_val") {
          //关联部件
          for (var _i6 = 0; _i6 <= rows; _i6++) {
            _this4.hot.setCellMeta(_i6, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.posPartSources;
            });
          }
        }

        if (item.prop == "dgm.byHw_Filter_val") {
          //硬件滤波
          for (var _i7 = 0; _i7 <= rows; _i7++) {
            _this4.hot.setCellMeta(_i7, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.hwFilterSources;
            });
          }
        }

        if (item.prop == "dgm.byVib_Signal_Zoom_val") {
          //信号增益
          for (var _i8 = 0; _i8 <= rows; _i8++) {
            _this4.hot.setCellMeta(_i8, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.vibSignalZoomSources;
            });
          }
        }

        if (item.prop == "dgm.range_val") {
          //信号增益
          for (var _i9 = 0; _i9 <= rows; _i9++) {
            _this4.hot.setCellMeta(_i9, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.rangeSources;
            });
          }
        }

        if (item.prop == "dgm.byStaType_val") {
          //过程量类型
          for (var _i10 = 0; _i10 <= rows; _i10++) {
            _this4.hot.setCellMeta(_i10, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.byStaTypeSources;
            });
          }
        }

        if (item.prop == "dgm.byStrong_val") {
          //键相增益
          for (var _i11 = 0; _i11 <= rows; _i11++) {
            _this4.hot.setCellMeta(_i11, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.byStrongSources;
            });
          }
        }

        if (item.prop == "dgm.byifpower_val") {
          //数字量状态
          for (var _i12 = 0; _i12 <= rows; _i12++) {
            _this4.hot.setCellMeta(_i12, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.byifpowerSources;
            });
          }
        }

        if (item.prop == "dgm.byifalarm_val") {
          //自检输出
          for (var _i13 = 0; _i13 <= rows; _i13++) {
            _this4.hot.setCellMeta(_i13, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.byifalarmsources;
            });
          }
        }

        if (item.prop == "dgm.capture_time_val") {
          //采样时间
          for (var _i14 = 0; _i14 <= rows; _i14++) {
            _this4.hot.setCellMeta(_i14, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.captureTimeSources;
            });
          }
        }

        if (item.prop == "dgm.ch1_val") {
          //通道名
          for (var _i15 = 0; _i15 <= rows; _i15++) {
            _this4.hot.setCellMeta(_i15, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.channelSources;
            });
          }
        }

        if (item.prop == "dgm.byIntegral_val") {
          //积分
          for (var _i16 = 0; _i16 < rows; _i16++) {
            _this4.hot.setCellMeta(_i16, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.integralSources;
            });
          }
        }

        if (item.prop == "dgm.unitName") {
          //单位
          for (var _i17 = 0; _i17 < rows; _i17++) {
            _this4.hot.setCellMeta(_i17, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.unitSources;
            });
          }
        }

        if (item.prop == "dgm.byUnitName_val") {
          //E821单位
          for (var _i18 = 0; _i18 < rows; _i18++) {
            _this4.hot.setCellMeta(_i18, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.byUnitNameSources;
            });
          }
        }

        if (item.prop == "dgm.databit_val") {
          //数据位
          for (var _i19 = 0; _i19 < rows; _i19++) {
            _this4.hot.setCellMeta(_i19, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.databitSources;
            });
          }
        }

        if (item.prop == "dgm.capture_time_val") {
          //采集时间
          for (var _i20 = 0; _i20 < rows; _i20++) {
            _this4.hot.setCellMeta(_i20, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.captureTimeSources;
            });
          }
        }

        if (item.prop == "dgm.mainMhd") {
          //主设备：mhd下拉选项
          for (var _i21 = 0; _i21 < rows; _i21++) {
            _this4.hot.setCellMeta(_i21, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.mhdSources;
            });
          }
        }

        if (item.prop == "dgm.int_zoom_val") {
          //mhd积分量程
          for (var _i22 = 0; _i22 < rows; _i22++) {
            _this4.hot.setCellMeta(_i22, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.intZoomSources;
            });
          }
        }

        if (item.prop == "dgm.dest_type_val") {
          //外部集成设置的类型选项
          for (var _i23 = 0; _i23 < rows; _i23++) {
            _this4.hot.setCellMeta(_i23, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.destTypeSources;
            });
          }
        }

        if (item.prop == "dgm.preps_id_val") {
          //螺栓设置的预处理器设置
          for (var _i24 = 0; _i24 < rows; _i24++) {
            _this4.hot.setCellMeta(_i24, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.prepsIdSources;
            });
          }
        }

        if (item.prop == "dgm.bolt_pos_loc_val") {
          //螺栓设置的安装位置
          for (var _i25 = 0; _i25 < rows; _i25++) {
            _this4.hot.setCellMeta(_i25, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.posLocSources;
            });
          }
        }

        if (item.prop == "dgm.b_id_val") {
          //螺栓设置的关联通道
          for (var _i26 = 0; _i26 < rows; _i26++) {
            _this4.hot.setCellMeta(_i26, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.bIdSources;
            });
          }
        }

        if (item.prop == "dgm.bySensorType821_val") {
          //e821的过程量设置的传感器类型下拉选项
          for (var _i27 = 0; _i27 < rows; _i27++) {
            _this4.hot.setCellMeta(_i27, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.sensorSources;
            });
          }
        }

        if (item.prop == "dgm.byUnitName_val") {
          //e821的过程量设置的传感器类型下拉选项
          for (var _i28 = 0; _i28 < rows; _i28++) {
            _this4.hot.setCellMeta(_i28, item.col, "selectOptions", function (row) {
              return _this4.data[_this4.hot.toPhysicalRow(row)].dgm.byUnitNameSources;
            });
          }
        }
      });
    },
    //获取data
    getData: function getData() {
      return this.data;
    },

    /* 获取hot实例 */
    getHot: function getHot() {
      return this.hot;
    }
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! sweetalert */ "./node_modules/_sweetalert@2.1.2@sweetalert/dist/sweetalert.min.js"), __webpack_require__(/*! jquery */ "./node_modules/_jquery@3.5.1@jquery/dist/jquery.js")))

/***/ })

}]);
//# sourceMappingURL=5-687d7917ec5c142279a8.js.map