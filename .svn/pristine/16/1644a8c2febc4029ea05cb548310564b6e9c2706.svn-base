(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[15],{

/***/ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/content/datas/opc/OpcClient.vue?vue&type=script&lang=js&":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--1-0!./node_modules/vue-loader/lib??vue-loader-options!./src/components/content/datas/opc/OpcClient.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(swal, $) {/* harmony import */ var _js_opc_mixin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js/opc_mixin.js */ "./src/components/content/datas/opc/js/opc_mixin.js");
/* harmony import */ var network_getApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! network/getApi */ "./src/network/getApi.js");
/* harmony import */ var utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! utils/utils */ "./src/utils/utils.js");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//



/* harmony default export */ __webpack_exports__["default"] = ({
  name: "OpcClient",
  mixins: [_js_opc_mixin_js__WEBPACK_IMPORTED_MODULE_0__["macMixin"]],
  data: function data() {
    return {
      title: 'OPC配置',
      ins: 0,
      //切换按钮active
      name: 'OpcClient',
      isShow: false,
      stopText: "停止",
      obj: {
        name: "",
        addFlag: false,
        openFlag: false,
        stopFlag: false,
        opcFlag: false
      },
      editStatus: false,
      //opc全局设置弹窗是否显示
      opcTabList: {}
    };
  },
  mounted: function mounted() {
    var _this = this;

    // 在点击标题的时候放大并重新渲染表格
    this.$bus.$on('reloadtable', function () {
      _this.hot.render();
    });
    this.queryState(); //获取状态

    this.turnOn(); //更新按钮状态

    this.getOPCServer(); //获取opc全局设置数据
  },
  methods: {
    add: function add() {
      return Object(utils_utils__WEBPACK_IMPORTED_MODULE_2__["addRows"])(this.hot, this.data, -1);
    },
    getOPCServer: function getOPCServer() {
      var _this2 = this;

      network_getApi__WEBPACK_IMPORTED_MODULE_1__["default"].queryOPCServer().then(function (res) {
        if (res) {
          _this2.opcTabList = {
            "id": res.id,
            "opc_ip": res.opc_ip,
            "opc_domain": res.opc_domain,
            "opc_user": res.opc_user,
            "opc_password": res.opc_password,
            "opc_clsid": res.opc_clsid
          };
        } else {
          _this2.opcTabList = {
            "id": 0,
            "opc_ip": "",
            "opc_domain": "",
            "opc_user": "",
            "opc_password": "",
            "opc_clsid": ""
          };
        }
      });
    },
    setOpc: function setOpc() {
      this.editStatus = true;
    },
    closeEdit: function closeEdit() {
      this.editStatus = false;
    },
    changeOpc: function changeOpc() {
      var _this3 = this;

      console.log(this.opcTabList);
      this.editStatus = false;
      network_getApi__WEBPACK_IMPORTED_MODULE_1__["default"].saveOPCServer(this.opcTabList).then(function (res) {
        if (res.msg == 0) {
          swal({
            title: "提示",
            text: '保存成功',
            button: "确认"
          }).then(function (value) {
            _this3.$router.go(0);
          });
        } else if (res.msg == 1) {
          console.log('参数为空！');
          swal({
            title: "提示",
            text: '保存失败',
            button: "确认"
          });
        } else if (res.msg == 2) {
          console.log('后台运行错误！');
          swal({
            title: "提示",
            text: '保存失败',
            button: "确认"
          });
        }
      });
    },
    queryState: function queryState() {
      var _this4 = this;

      network_getApi__WEBPACK_IMPORTED_MODULE_1__["default"].queryModBusServerStatue().then(function (res) {
        _this4.obj.openFlag = res.flag;

        if (_this4.obj.openFlag) {
          _this4.stopText = "开启";
        } else {
          _this4.stopText = "停止";
        }
      });
    },
    turnOn: function turnOn() {
      var params = {
        flag: this.obj.openFlag
      };

      if (this.obj.openFlag) {
        this.stopText = "开启";
        network_getApi__WEBPACK_IMPORTED_MODULE_1__["default"].startOrStopModBusServer(params).then(function (res) {
          console.log('已开启');
        });
      } else {
        this.stopText = "停止";
        network_getApi__WEBPACK_IMPORTED_MODULE_1__["default"].startOrStopModBusServer(params).then(function (res) {
          console.log('已停止');
        });
      }
    },
    openOrClose: function openOrClose() {
      //开启和停止
      this.obj.openFlag = !this.obj.openFlag;
      this.turnOn();
    },
    save: function save() {
      var _this5 = this;

      /* 保存按钮 */
      var changeClientData = this.check(this.changeList.changeClientData);

      if ($.isEmptyObject(changeClientData)) {
        swal({
          title: "提示",
          text: '保存成功',
          button: "确认"
        });
      }

      var flag = this.checkEmpty(changeClientData);

      if (flag) {
        //新建和修改opc信息
        if (!$.isEmptyObject(changeClientData)) {
          network_getApi__WEBPACK_IMPORTED_MODULE_1__["default"].saveOPCClient(changeClientData).then(function (res) {
            if (res.msg == 0) {
              swal({
                title: "提示",
                text: '保存成功',
                button: "确认"
              }).then(function (value) {
                _this5.$router.go(0);
              });
            } else if (res.msg == 1) {
              console.log('参数为空！');
              swal({
                title: "提示",
                text: '保存失败',
                button: "确认"
              });
            } else if (res.msg == 2) {
              console.log('后台运行错误！');
              swal({
                title: "提示",
                text: '保存失败',
                button: "确认"
              });
            } else if (res.msg == 3) {
              console.log('获取json数据时为空！');
              swal({
                title: "提示",
                text: '保存失败',
                button: "确认"
              });
            }
          });
        }
      }
    },
    updateIsShow: function updateIsShow(value) {
      this.isShow = value;
    },
    check: function check(add_list) {
      for (var key in add_list) {
        if (add_list[key].operate) {
          delete add_list[key].operate;
        }
      }

      return add_list;
    },
    checkEmpty: function checkEmpty(data) {
      for (var key in data) {
        if (data[key].IODevices == "" || data[key].ip == "" || data[key].address == "") {
          swal({
            title: "提示",
            text: '请将表格数据填写完整',
            button: "确认"
          });
          return false;
        }
      }

      return true;
    }
  }
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! sweetalert */ "./node_modules/sweetalert/dist/sweetalert.min.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/content/datas/opc/OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss&":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/mini-css-extract-plugin/dist/loader.js??ref--3-0!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./src/components/content/datas/opc/OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss& ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true&":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true& ***!
  \*********************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _c("div", { staticClass: "myTable", attrs: { id: "myTable" } }, [
      _c("div", { staticClass: "table-btn" }, [
        _c(
          "button",
          {
            staticClass: "my-btn btn-active white-btn",
            class: { add: _vm.obj.addFlag },
            on: { click: _vm.add }
          },
          [_vm._v("新建")]
        ),
        _vm._v(" "),
        _c(
          "button",
          { staticClass: "my-btn btn-active", on: { click: _vm.save } },
          [_vm._v("保存设置")]
        ),
        _vm._v(" "),
        _c(
          "button",
          {
            staticClass: "my-btn btn-active",
            class: { add: _vm.obj.opcFlag },
            on: { click: _vm.setOpc }
          },
          [_vm._v("OPC全局设置")]
        )
      ]),
      _vm._v(" "),
      _c("div", { attrs: { id: "HotTable" } }, [
        _vm.isShow
          ? _c("div", { staticClass: "noData" }, [
              _vm._v("系统中没有可建该类型机组的设备!")
            ])
          : _vm._e()
      ]),
      _vm._v(" "),
      _c(
        "div",
        {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.editStatus,
              expression: "editStatus"
            }
          ],
          staticClass: "edit-block",
          attrs: { id: "edit-block" }
        },
        [
          _c("div", { staticClass: "edit-header" }, [
            _c("span", { staticClass: "edit-name" }, [_vm._v("OPC全局设置")]),
            _vm._v(" "),
            _c("i", {
              staticClass: "iconfont icon-zhongzi-guanbi close-icon",
              on: {
                click: function($event) {
                  return _vm.closeEdit()
                }
              }
            })
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "edit-list" }, [
            _c("ul", [
              _c("li", { staticClass: "channel-item" }, [
                _c("div", { staticClass: "channel-div" }, [
                  _c("label", [_vm._v("OPC Server ip:")]),
                  _vm._v(" "),
                  _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.opcTabList.opc_ip,
                        expression: "opcTabList.opc_ip"
                      }
                    ],
                    attrs: { type: "text" },
                    domProps: { value: _vm.opcTabList.opc_ip },
                    on: {
                      input: function($event) {
                        if ($event.target.composing) {
                          return
                        }
                        _vm.$set(_vm.opcTabList, "opc_ip", $event.target.value)
                      }
                    }
                  })
                ])
              ]),
              _vm._v(" "),
              _c("li", { staticClass: "channel-item" }, [
                _c("div", { staticClass: "channel-div" }, [
                  _c("label", [_vm._v("OPCServer 域:")]),
                  _vm._v(" "),
                  _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.opcTabList.opc_domain,
                        expression: "opcTabList.opc_domain"
                      }
                    ],
                    attrs: { type: "text" },
                    domProps: { value: _vm.opcTabList.opc_domain },
                    on: {
                      input: function($event) {
                        if ($event.target.composing) {
                          return
                        }
                        _vm.$set(
                          _vm.opcTabList,
                          "opc_domain",
                          $event.target.value
                        )
                      }
                    }
                  })
                ])
              ]),
              _vm._v(" "),
              _c("li", { staticClass: "channel-item" }, [
                _c("div", { staticClass: "channel-div" }, [
                  _c("label", [_vm._v("OPCServer 用户名:")]),
                  _vm._v(" "),
                  _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.opcTabList.opc_user,
                        expression: "opcTabList.opc_user"
                      }
                    ],
                    attrs: { type: "text" },
                    domProps: { value: _vm.opcTabList.opc_user },
                    on: {
                      input: function($event) {
                        if ($event.target.composing) {
                          return
                        }
                        _vm.$set(
                          _vm.opcTabList,
                          "opc_user",
                          $event.target.value
                        )
                      }
                    }
                  })
                ])
              ]),
              _vm._v(" "),
              _c("li", { staticClass: "channel-item" }, [
                _c("div", { staticClass: "channel-div" }, [
                  _c("label", [_vm._v("OPCServer 密码:")]),
                  _vm._v(" "),
                  _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.opcTabList.opc_password,
                        expression: "opcTabList.opc_password"
                      }
                    ],
                    attrs: { type: "text" },
                    domProps: { value: _vm.opcTabList.opc_password },
                    on: {
                      input: function($event) {
                        if ($event.target.composing) {
                          return
                        }
                        _vm.$set(
                          _vm.opcTabList,
                          "opc_password",
                          $event.target.value
                        )
                      }
                    }
                  })
                ])
              ]),
              _vm._v(" "),
              _c("li", { staticClass: "channel-item" }, [
                _c("div", { staticClass: "channel-div" }, [
                  _c("label", [_vm._v("OPCServer 注册码:")]),
                  _vm._v(" "),
                  _c("input", {
                    directives: [
                      {
                        name: "model",
                        rawName: "v-model",
                        value: _vm.opcTabList.opc_clsid,
                        expression: "opcTabList.opc_clsid"
                      }
                    ],
                    attrs: { type: "text" },
                    domProps: { value: _vm.opcTabList.opc_clsid },
                    on: {
                      input: function($event) {
                        if ($event.target.composing) {
                          return
                        }
                        _vm.$set(
                          _vm.opcTabList,
                          "opc_clsid",
                          $event.target.value
                        )
                      }
                    }
                  })
                ])
              ])
            ])
          ]),
          _vm._v(" "),
          _c("div", { staticClass: "edit-controls" }, [
            _c(
              "button",
              {
                staticClass: "fail-btn",
                on: {
                  click: function($event) {
                    return _vm.closeEdit()
                  }
                }
              },
              [_vm._v("取消")]
            ),
            _vm._v(" "),
            _c(
              "button",
              {
                staticClass: "ok-btn",
                on: {
                  click: function($event) {
                    return _vm.changeOpc()
                  }
                }
              },
              [_vm._v("确定")]
            )
          ])
        ]
      )
    ])
  ])
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./src/components/content/datas/opc/OpcClient.vue":
/*!********************************************************!*\
  !*** ./src/components/content/datas/opc/OpcClient.vue ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true& */ "./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true&");
/* harmony import */ var _OpcClient_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OpcClient.vue?vue&type=script&lang=js& */ "./src/components/content/datas/opc/OpcClient.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport *//* harmony import */ var _OpcClient_vue_vue_type_style_index_0_id_5ef0bc78_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss& */ "./src/components/content/datas/opc/OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");






/* normalize component */

var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
  _OpcClient_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
  _OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
  _OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  "5ef0bc78",
  null
  
)

/* hot reload */
if (true) {
  var api = __webpack_require__(/*! ./node_modules/vue-hot-reload-api/dist/index.js */ "./node_modules/vue-hot-reload-api/dist/index.js")
  api.install(__webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.esm.js"))
  if (api.compatible) {
    module.hot.accept()
    if (!api.isRecorded('5ef0bc78')) {
      api.createRecord('5ef0bc78', component.options)
    } else {
      api.reload('5ef0bc78', component.options)
    }
    module.hot.accept(/*! ./OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true& */ "./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true&", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true& */ "./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true&");
(function () {
      api.rerender('5ef0bc78', {
        render: _OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
        staticRenderFns: _OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]
      })
    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))
  }
}
component.options.__file = "src/components/content/datas/opc/OpcClient.vue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),

/***/ "./src/components/content/datas/opc/OpcClient.vue?vue&type=script&lang=js&":
/*!*********************************************************************************!*\
  !*** ./src/components/content/datas/opc/OpcClient.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_babel_loader_lib_index_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/babel-loader/lib??ref--1-0!../../../../../node_modules/vue-loader/lib??vue-loader-options!./OpcClient.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./src/components/content/datas/opc/OpcClient.vue?vue&type=script&lang=js&");
/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_1_0_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]); 

/***/ }),

/***/ "./src/components/content/datas/opc/OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss&":
/*!******************************************************************************************************************!*\
  !*** ./src/components/content/datas/opc/OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss& ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_3_0_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_style_index_0_id_5ef0bc78_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--3-0!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/sass-loader/dist/cjs.js!../../../../../node_modules/vue-loader/lib??vue-loader-options!./OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss& */ "./node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/components/content/datas/opc/OpcClient.vue?vue&type=style&index=0&id=5ef0bc78&scoped=true&lang=scss&");
/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_ref_3_0_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_style_index_0_id_5ef0bc78_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_ref_3_0_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_style_index_0_id_5ef0bc78_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_mini_css_extract_plugin_dist_loader_js_ref_3_0_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_style_index_0_id_5ef0bc78_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_mini_css_extract_plugin_dist_loader_js_ref_3_0_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_style_index_0_id_5ef0bc78_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_node_modules_mini_css_extract_plugin_dist_loader_js_ref_3_0_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_style_index_0_id_5ef0bc78_scoped_true_lang_scss___WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),

/***/ "./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true&":
/*!***************************************************************************************************!*\
  !*** ./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true& ***!
  \***************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../node_modules/vue-loader/lib??vue-loader-options!./OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/components/content/datas/opc/OpcClient.vue?vue&type=template&id=5ef0bc78&scoped=true&");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_OpcClient_vue_vue_type_template_id_5ef0bc78_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });



/***/ }),

/***/ "./src/components/content/datas/opc/js/opc_columns.js":
/*!************************************************************!*\
  !*** ./src/components/content/datas/opc/js/opc_columns.js ***!
  \************************************************************/
/*! exports provided: setHeaders, setColumns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setHeaders", function() { return setHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumns", function() { return setColumns; });
/* 表头部分
 */
//设置 列头(公共)
function setHeaders() {
  var header = ['组织', '机组', '测点', '有效值', 'OPC地址', '输入输出设置', '是否有效'];
  return header;
}
/* 表数据部分
 */
//设置columns（公共）（组织名称、机组名称、测点名称、采集器名称、测点类型、通道名称、是否有效、是否报警）

function setColumns(data) {
  var columns = [{
    data: "tree_name",
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].t_name_sources;
    },
    readOnly: true
  }, {
    data: "machine_name",
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].mac_me_sources;
    },
    readOnly: true
  }, {
    data: "position_name",
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].pos_name_sources;
    },
    readOnly: true
  }, {
    data: 'code_val',
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].code_name_sources;
    },
    readOnly: true
  }, {
    data: "address"
  }, {
    data: "IODevices_val",
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].IODevices_sources;
    },
    readOnly: true
  }, {
    data: "state_val",
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].state_sources;
    }
  }];
  return columns;
}

/***/ }),

/***/ "./src/components/content/datas/opc/js/opc_hdtable.js":
/*!************************************************************!*\
  !*** ./src/components/content/datas/opc/js/opc_hdtable.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(swal) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return machdtable; });
/* harmony import */ var network_getApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! network/getApi */ "./src/network/getApi.js");
/* harmony import */ var common_hdtable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! common/hdtable.js */ "./src/common/hdtable.js");
/* harmony import */ var _opc_info_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opc_info.js */ "./src/components/content/datas/opc/js/opc_info.js");
/* harmony import */ var _opc_columns_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./opc_columns.js */ "./src/components/content/datas/opc/js/opc_columns.js");
/* harmony import */ var utils_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! utils/utils */ "./src/utils/utils.js");
/* harmony import */ var _components_content_datas_opc_js_opc_methods__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/components/content/datas/opc/js/opc_methods */ "./src/components/content/datas/opc/js/opc_methods.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }







function machdtable(el, property) {
  var data = property.getData(); //创建表格属性的实例

  var tableDataIns = new tableData(property); // 组装振动表格数据

  var vibTable = {
    // 表格右键菜单
    contextMenu: tableDataIns.contextMenu(),
    // 表格显示的数据
    data: data,
    //表格的列
    colHeaders: tableDataIns.colHeaders(),
    //表格的列头自定义
    // nestedHeaders:tableDataIns.nestedHeaders(),
    //数据渲染renderData
    columns: tableDataIns.columns(),
    //单元格属性设置
    cells: tableDataIns.cells(),
    //新建行
    afterCreateRow: tableDataIns.afterCreateRow(),
    beforeChange: tableDataIns.beforeChange(),
    afterChange: tableDataIns.afterChange(),
    //移除行事件
    beforeRemoveRow: tableDataIns.beforeRemoveRow(),
    afterRemoveRow: tableDataIns.afterRemoveRow()
  };
  var type = property.type;

  if (type == 1) {
    vibTable.nestedHeaders = tableDataIns.nestedHeaders();
  }

  return Object(common_hdtable_js__WEBPACK_IMPORTED_MODULE_1__["default"])(el, vibTable);
} //表格的方法

var tableData =
/*#__PURE__*/
function () {
  function tableData(property) {
    _classCallCheck(this, tableData);

    this.tids = property.tids;
    this.getData = property.getData;
    this.getHot = property.getHot;
    this.initList = property.initList;
    this.changeList = property.changeList;
    this.router = property.router;
    this.store = property.store;
  }

  _createClass(tableData, [{
    key: "contextMenu",
    value: function contextMenu() {
      var that = this;
      var userType = parseInt(sessionStorage.getItem('userType'));
      return {
        items: {
          "row_above": {
            name: "插入新行"
          },
          "remove_row": {
            name: '删除这行',
            callback: function callback(key, options) {
              swal({
                title: "警告",
                text: "当前信息一经删除，该数据也将不保留。确定删除吗？",
                buttons: {
                  sure: "确认",
                  cancel: "取消"
                },
                dangerMode: true
              }).then(function (willDelete) {
                if (willDelete) {
                  var index = options[0].start.row;
                  var amount = parseInt(options[0].end.row - options[0].start.row) + 1;
                  that.getHot().alter("remove_row", index, amount);
                } else {
                  return false;
                }
              });
            }
          }
        }
      };
    }
    /* 表格的数据渲染 */

  }, {
    key: "colHeaders",
    value: function colHeaders() {
      return Object(_opc_columns_js__WEBPACK_IMPORTED_MODULE_3__["setHeaders"])();
    }
  }, {
    key: "nestedHeaders",
    value: function nestedHeaders() {
      return Object(_opc_columns_js__WEBPACK_IMPORTED_MODULE_3__["setHeaders"])();
    }
  }, {
    key: "columns",
    value: function columns() {
      return Object(_opc_columns_js__WEBPACK_IMPORTED_MODULE_3__["setColumns"])(this.getData());
    }
    /* 表格的方法渲染 */
    //振动的单元格渲染

  }, {
    key: "cells",
    value: function cells() {
      var that = this;
      return function (row, col, prop) {
        var data = that.getData();
        if (data.length == 0) return;
        var cellProperties = this;

        if (data[row].operate == 1 && (col == 0 || col == 1 || col == 2 || col == 3 || prop == 'IODevices_val')) {
          cellProperties.readOnly = false;
        }

        return cellProperties;
      };
    } //创建测点之后的方法(共用)

  }, {
    key: "afterCreateRow",
    value: function afterCreateRow() {
      var that = this;
      return function (index, amount, source) {
        //添加行事件
        var data = that.getData();
        var changeClientData = that.changeList.changeClientData;
        var modClient = Object(_opc_info_js__WEBPACK_IMPORTED_MODULE_2__["createOpc"])(that.initList, data.length);
        changeClientData[index] = modClient;
        data[index] = modClient;
      };
    } //删除测点之前的方法,将要删除的方法存到deleteVData（共用）

  }, {
    key: "beforeRemoveRow",
    value: function beforeRemoveRow() {
      var that = this;
      return function (index, amount) {
        var deleteData = that.changeList.deleteData;

        if (index != null) {
          for (var i = 0; i < amount; i++) {
            var cellInfo = that.getPositionByIndex(index + i);

            if (cellInfo.operate === 0) {
              deleteData.push(cellInfo.id);
            }
          }
        }
      };
    } //删除测点方法 发送请求（共用）

  }, {
    key: "afterRemoveRow",
    value: function afterRemoveRow() {
      var that = this;
      return function () {
        var deleteData = that.changeList.deleteData;
        console.log('afterRemoveRow');

        if (deleteData.length == 0) {
          swal({
            title: "提示",
            text: "删除信息成功",
            button: "确认"
          }).then(function (value) {
            that.router.go(0);
          });
        }

        if (deleteData.length > 0 && that.type === 1) {
          network_getApi__WEBPACK_IMPORTED_MODULE_0__["default"].deleteModBusServer(deleteData).then(function (res) {
            deleteData = [];

            if (res.msg == 0) {
              swal({
                title: "提示",
                text: "删除信息成功",
                button: "确认"
              }).then(function (value) {
                that.router.go(0);
              });
            } else if (res.msg == 1) {
              console.log('参数为空！');
            } else if (res.msg == 2) {
              console.log('后台运行错误！');
            }
          })["catch"](function (err) {
            console.log('请求错误', err);
          });
        }

        if (deleteData.length > 0 && that.type === 2) {
          network_getApi__WEBPACK_IMPORTED_MODULE_0__["default"].deleteModBusClient(deleteData).then(function (res) {
            deleteData = [];

            if (res.msg == 0) {
              swal({
                title: "提示",
                text: "删除信息成功",
                button: "确认"
              }).then(function (value) {
                that.router.go(0);
              });
            } else if (res.msg == 1) {
              console.log('参数为空！');
            } else if (res.msg == 2) {
              console.log('后台运行错误！');
            }
          })["catch"](function (err) {
            console.log('请求错误', err);
          });
        }

        if (deleteData.length > 0 && that.type === 3) {
          network_getApi__WEBPACK_IMPORTED_MODULE_0__["default"].deleteOPCClient(deleteData).then(function (res) {
            deleteData = [];

            if (res.msg == 0) {
              swal({
                title: "提示",
                text: "删除信息成功",
                button: "确认"
              }).then(function (value) {
                that.router.go(0);
              });
            } else if (res.msg == 1) {
              console.log('参数为空！');
            } else if (res.msg == 2) {
              console.log('后台运行错误！');
            }
          })["catch"](function (err) {
            console.log('请求错误', err);
          });
        }
      };
    } //改变数据的时候拼装数据结构（共用）

  }, {
    key: "beforeChange",
    value: function beforeChange() {
      var that = this;
      return function (changes, source) {
        var change_index;
        var change_prop;
        var change_oldVal;
        var change_newVal;
        var flag;
        var hot = that.getHot();
        var data = that.getData();
        var IP = "^((25[0-5]|2[0-4]\\d|[1]{1}\\d{1}\\d{1}|[1-9]{1}\\d{1}|\\d{1})($|(?!\\.$)\\.)){4}$"; //IP正则

        var pat = new RegExp(IP);
        var num = /^\d+$/; //非负整数正则

        var patNum = new RegExp(num);
        var floatNum = /^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$/; //非负浮点数正则

        var patFloatNum = new RegExp(floatNum); //创建更改组织、机组、采集器、通道、任务的联动实例
        //地址至少是正整数（含0），设备号1-255，范围都是浮点型;地址和长度都先正整型（含0）好了;地址和长度你可以默认为0；端口是1-65535

        for (var i = 0; i < changes.length; i++) {
          var physicalRow = hot.toPhysicalRow(changes[i][0]);
          change_index = changes[i][0];
          change_prop = changes[i][1];
          change_oldVal = changes[i][2];
          change_newVal = changes[i][3];

          if (change_oldVal == change_newVal) {
            continue;
          }

          if (change_newVal == "") {
            return false;
          }

          var cellInfo = that.getPositionByIndex(change_index, that.type); //modbus server

          if (change_prop == "address" || change_prop == "coil_start" || change_prop == "coil_len" || change_prop == "input_start" || change_prop == "input_len" || change_prop == "inputregister_start" || change_prop == "inputregister_len" || change_prop == "holdingregister_start" || change_prop == "holdingregister_len") {
            if (!patNum.test(change_newVal)) {
              swal({
                title: "提示",
                text: '请输入非负整数',
                button: "确认"
              });
              return false;
            }
          } //modbus client


          if (change_prop == "tree_name") {
            //组织
            flag = Object(utils_utils__WEBPACK_IMPORTED_MODULE_4__["setChangeCellResult"])(cellInfo.t_name_sources, cellInfo.t_name_sources_key, change_newVal, change_index);

            if (flag === false) {
              return false;
            } else {
              cellInfo.tree_id = flag;
              that.update_t_name(cellInfo, change_newVal, flag);
            }
          }

          if (change_prop == "machine_name") {
            //机组
            flag = Object(utils_utils__WEBPACK_IMPORTED_MODULE_4__["setChangeCellResult"])(cellInfo.mac_me_sources, cellInfo.mac_me_sources_key, change_newVal, change_index);

            if (flag === false) {
              return false;
            } else {
              cellInfo.machine_id = flag;
              that.update_macName(cellInfo, change_newVal, flag);
            }
          }

          if (change_prop == "position_name") {
            //测点
            flag = Object(utils_utils__WEBPACK_IMPORTED_MODULE_4__["setChangeCellResult"])(cellInfo.pos_name_sources, cellInfo.pos_name_sources_key, change_newVal, change_index);

            if (flag === false) {
              return false;
            } else {
              cellInfo.position_id = flag;
              that.update_positionName(cellInfo, change_newVal, flag);
            }
          }

          if (change_prop == "code_val") {
            //特征值
            flag = Object(utils_utils__WEBPACK_IMPORTED_MODULE_4__["setChangeCellResult"])(cellInfo.code_name_sources, cellInfo.code_name_sources_key, change_newVal, change_index);

            if (flag === false) {
              return false;
            } else {
              cellInfo.code = flag;
            }
          }

          if (change_prop == "data_type_val") {
            //数据类型
            flag = Object(utils_utils__WEBPACK_IMPORTED_MODULE_4__["setChangeCellResult"])(cellInfo.data_type_sources, cellInfo.data_type_sources_key, change_newVal, change_index);

            if (flag === false) {
              return false;
            } else {
              cellInfo.data_type = flag;
            }
          }

          if (change_prop == "IODevices_val") {
            //数据输入输出类型
            flag = Object(utils_utils__WEBPACK_IMPORTED_MODULE_4__["setChangeCellResult"])(cellInfo.IODevices_sources, cellInfo.IODevices_sources_key, change_newVal, change_index);

            if (flag === false) {
              return false;
            } else {
              cellInfo.IODevices = flag;
            }
          }

          if (change_prop == "state_val") {
            //状态
            flag = Object(utils_utils__WEBPACK_IMPORTED_MODULE_4__["setChangeCellResult"])(cellInfo.state_sources, cellInfo.state_sources_key, change_newVal, change_index);

            if (flag === false) {
              return false;
            } else {
              cellInfo.state = flag;
            }
          } //验证端口号1-65535


          if (change_prop == "port") {
            var newNum = change_newVal;

            if (newNum < 1 || newNum > 65535 || !patFloatNum.test(newNum)) {
              swal({
                title: "提示",
                text: '请输入1~65535的整数',
                button: "确认"
              });
              return false;
            } else {
              change_newVal = newNum;
              cellInfo.port = newNum;
            }
          } //验证设备号1-255浮点数


          if (change_prop == "number" || change_prop == "device_id") {
            var _newNum = change_newVal;

            if (_newNum < 1 || _newNum > 255 || !patFloatNum.test(_newNum)) {
              swal({
                title: "提示",
                text: '请输入1~255的整数',
                button: "确认"
              });
              return false;
            } else {
              change_newVal = _newNum;

              if (cellInfo.number) {
                cellInfo.number = _newNum;
              } else if (cellInfo.device_id) {
                cellInfo.device_id = _newNum;
              }
            }
          } //验证IP号


          if (change_prop == "ip") {
            if (!pat.test(change_newVal)) {
              swal({
                title: "提示",
                text: 'IP格式错误',
                button: "确认"
              });
              return false;
            }
          } //


          if (change_prop == "input_h" || change_prop == "input_l" || change_prop == "output_h" || change_prop == "output_l") {
            if (!patNum.test(change_newVal)) {
              swal({
                title: "提示",
                text: '请输入非负整数',
                button: "确认"
              });
              return false;
            } else {
              if (change_prop == "input_l") {
                if (Number(change_newVal) >= cellInfo.input_h) {
                  swal({
                    title: "提示",
                    text: '输入范围高应该大于输入范围低！',
                    button: "确认"
                  });
                  return false;
                }
              } else if (change_prop == "input_h") {
                if (Number(change_newVal) <= cellInfo.input_l) {
                  swal({
                    title: "提示",
                    text: '输入范围高应该大于输入范围低！',
                    button: "确认"
                  });
                  return false;
                }
              } else if (change_prop == "output_l") {
                if (Number(change_newVal) >= cellInfo.output_h) {
                  swal({
                    title: "提示",
                    text: '输出范围高应该大于输出范围低！',
                    button: "确认"
                  });
                  return false;
                }
              } else if (change_prop == "output_h") {
                if (Number(change_newVal) <= cellInfo.output_l) {
                  swal({
                    title: "提示",
                    text: '输出范围高应该大于输出范围低！',
                    button: "确认"
                  });
                  return false;
                }
              }
            }
          }
        }
      };
    } //改变数据后的方法 （共用）

  }, {
    key: "afterChange",
    value: function afterChange() {
      var that = this;
      return function (changes, source) {
        //修改数据事件
        console.log('afterChange');
        var changeClientData = that.changeList.changeClientData;

        if (changes) {
          changes.forEach(function (change) {
            var hot = that.getHot();
            var physicalRow = hot.toPhysicalRow(change[0]);
            var modBusClient = that.getPositionByIndex(change[0], 3);
            var sendModBusClient = Object(_opc_info_js__WEBPACK_IMPORTED_MODULE_2__["changeOpcClient"])(that.type, modBusClient, change[0]);
            changeClientData[physicalRow] = sendModBusClient;
          });
        }
      };
    }
    /* 根据索引行获取真实数据和物理行 (共用)*/

  }, {
    key: "getPositionByIndex",
    value: function getPositionByIndex(index, type) {
      var hot = this.getHot();
      var data = this.getData();
      var physicalRow = hot.toPhysicalRow(index);
      var info = data[physicalRow];
      return info;
    }
    /* 改变组织 */

  }, {
    key: "update_t_name",
    value: function update_t_name(cellInfo, t_name, t_id) {
      cellInfo.tree_name = t_name;
      this.update_macName_source(cellInfo, t_name, t_id);
    }
    /* 更改机组源 */

  }, {
    key: "update_macName_source",
    value: function update_macName_source(cellInfo, t_name, t_id) {
      var m_mac_source = this.initList.macData[t_id];
      var mac_source_key = Object.keys(m_mac_source);
      var mac_source = Object.values(m_mac_source);
      var mac_me = mac_source[0];
      var mac_id = mac_source_key[0];
      cellInfo.mac_me_sources = mac_source;
      cellInfo.mac_me_sources_key = mac_source_key;
      this.update_macName(cellInfo, mac_me, mac_id);
    }
    /* 更改机组 */

  }, {
    key: "update_macName",
    value: function update_macName(cellInfo, mac_me, mac_id) {
      cellInfo.machine_id = mac_id;
      cellInfo.machine_name = mac_me; //更改测点源

      this.update_position_source(cellInfo, mac_me, mac_id);
    }
    /*更改测点源*/

  }, {
    key: "update_position_source",
    value: function update_position_source(cellInfo, mac_me, mac_id) {
      var p_pos_source = this.initList.posData[mac_id];
      var pos_source_key = Object.keys(p_pos_source);
      var pos_source = Object.values(p_pos_source);
      var pos_me = pos_source[0];
      var pos_id = pos_source_key[0];
      cellInfo.pos_name_sources = pos_source;
      cellInfo.pos_name_sources_key = pos_source_key; //更改测点名

      this.update_positionName(cellInfo, pos_me, pos_id);
    }
    /*更改测点*/

  }, {
    key: "update_positionName",
    value: function update_positionName(cellInfo, pos_me, pos_id) {
      cellInfo.position_id = pos_id;
      cellInfo.position_name = pos_me; //更改特征值源

      this.update_code_source(cellInfo, pos_me, pos_id);
    }
  }, {
    key: "update_code_source",
    value: function update_code_source(cellInfo, pos_me, pos_id) {
      var c_code_source = {};
      var code_list = this.initList.codeData[pos_id + '_' + pos_me];
      code_list.forEach(function (code) {
        c_code_source[code] = Object(_components_content_datas_opc_js_opc_methods__WEBPACK_IMPORTED_MODULE_5__["getCodeName"])(code);
      });
      var code_source_key = Object.keys(c_code_source);
      var code_source = Object.values(c_code_source);
      cellInfo.code_name_sources = code_source;
      cellInfo.code_name_sources_key = code_source_key;
      cellInfo.code_val = code_source[0];
      cellInfo.code = code_source_key[0];
    }
  }, {
    key: "deepClone",
    value: function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
  }]);

  return tableData;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! sweetalert */ "./node_modules/sweetalert/dist/sweetalert.min.js")))

/***/ }),

/***/ "./src/components/content/datas/opc/js/opc_info.js":
/*!*********************************************************!*\
  !*** ./src/components/content/datas/opc/js/opc_info.js ***!
  \*********************************************************/
/*! exports provided: getOpcInfo, createOpc, changeOpcClient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOpcInfo", function() { return getOpcInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createOpc", function() { return createOpc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "changeOpcClient", function() { return changeOpcClient; });
/* harmony import */ var _opc_methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opc_methods.js */ "./src/components/content/datas/opc/js/opc_methods.js");

/* 固定参数 */

var state_source = {
  "0": "禁用",
  "1": "启用"
}; //是否有效

var IODevices_source = {
  '1': '输入',
  '2': '输出'
}; //输入输出设置

function getOpcInfo(res) {
  var data = [];
  var opcClient = {};
  res.OPCBusClient.forEach(function (opcItem) {
    opcClient = {
      operate: 0,
      address: opcItem.address,
      code_val: Object(_opc_methods_js__WEBPACK_IMPORTED_MODULE_0__["getCodeName"])(opcItem.code),
      code: opcItem.code,
      code_name_sources: [],
      code_name_sources_key: [],
      IODevices_val: IODevices_source[opcItem.iODevices],
      IODevices: opcItem.iODevices,
      IODevices_sources: Object.values(IODevices_source),
      IODevices_sources_key: Object.keys(IODevices_source),
      id: opcItem.id,
      machine_id: opcItem.machine_id,
      machine_name: opcItem.machine_name,
      mac_me_sources: [],
      mac_me_sources_key: [],
      position_id: opcItem.position_id,
      position_name: opcItem.position_name,
      pos_name_sources: [],
      pos_name_sources_key: [],
      state_val: state_source[opcItem.state],
      state: opcItem.state,
      state_sources: Object.values(state_source),
      state_sources_key: Object.keys(state_source),
      tree_id: opcItem.tree_id,
      tree_name: opcItem.tree_name,
      t_name_sources: [],
      t_name_sources_key: []
    };
    data.push(opcClient);
  });
  console.log(data);
  return [data];
}
function createOpc(initList, index) {
  var t_tree_source = initList.folderData;
  var macData = initList.macData;
  var posData = initList.posData;
  var codeData = initList.codeData;
  var tree_source_key = Object.keys(t_tree_source);
  var tree_source = Object.values(t_tree_source);
  var m_mac_source = macData[tree_source_key[0]];
  var mac_source_key = Object.keys(m_mac_source);
  var mac_source = Object.values(m_mac_source);
  var p_pos_source = posData[mac_source_key[0]];
  var pos_source_key = Object.keys(p_pos_source);
  var pos_source = Object.values(p_pos_source);
  var c_code_source = {};
  var code_list = codeData[pos_source_key[0] + '_' + pos_source[0]];
  code_list.forEach(function (code) {
    c_code_source[code] = Object(_opc_methods_js__WEBPACK_IMPORTED_MODULE_0__["getCodeName"])(code);
  });
  var code_source_key = Object.keys(c_code_source);
  var code_source = Object.values(c_code_source);
  var opcClient = {
    operate: 1,
    id: 0,
    address: "",
    code_val: code_source[0],
    code: code_source_key[0],
    code_name_sources: code_source,
    code_name_sources_key: code_source_key,
    IODevices_val: "",
    IODevices: "",
    IODevices_sources: Object.values(IODevices_source),
    IODevices_sources_key: Object.keys(IODevices_source),
    machine_id: mac_source_key[0],
    machine_name: mac_source[0],
    mac_me_sources: mac_source,
    mac_me_sources_key: mac_source_key,
    position_id: pos_source_key[0],
    position_name: pos_source[0],
    pos_name_sources: pos_source,
    pos_name_sources_key: pos_source_key,
    state_val: state_source["1"],
    state: "1",
    state_sources: Object.values(state_source),
    state_sources_key: Object.keys(state_source),
    tree_id: tree_source_key[0],
    tree_name: tree_source[0],
    t_name_sources: tree_source,
    t_name_sources_key: tree_source_key
  };
  return opcClient;
}
function changeOpcClient(type, oldData, index) {
  var modeBusClient = {
    id: oldData.id,
    address: oldData.address,
    code: oldData.code,
    IODevices: oldData.IODevices,
    machine_id: oldData.machine_id,
    machine_name: oldData.machine_name,
    position_id: oldData.position_id,
    position_name: oldData.position_name,
    state: oldData.state,
    tree_id: oldData.tree_id,
    tree_name: oldData.tree_name
  };
  return modeBusClient;
}

/***/ }),

/***/ "./src/components/content/datas/opc/js/opc_methods.js":
/*!************************************************************!*\
  !*** ./src/components/content/datas/opc/js/opc_methods.js ***!
  \************************************************************/
/*! exports provided: dgmType_name, get_data_type, getCodeName, getSpecVal, getSpec */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dgmType_name", function() { return dgmType_name; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get_data_type", function() { return get_data_type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCodeName", function() { return getCodeName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSpecVal", function() { return getSpecVal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSpec", function() { return getSpec; });
//采集器类型名称转化
function dgmType_name(type) {
  var dgmType_name = '';

  switch (parseInt(type)) {
    case 1:
      dgmType_name = "dgu2000";
      break;

    case 2:
      dgmType_name = "dgu2200";
      break;

    case 3:
      dgmType_name = "dgu2001";
      break;

    case 4:
      dgmType_name = "mhd";
      break;

    case 5:
      dgmType_name = "dgu2600";
      break;
  }

  return dgmType_name;
}
/**
 * *频段类型转换
 * **/

function get_data_type(val) {
  var optfreqTypeVal = "";

  switch (val) {
    case "0":
      optfreqTypeVal = "short型";
      break;

    case "1":
      optfreqTypeVal = "速度值";
      break;
  }

  return optfreqTypeVal;
}
/**
 * 根据code获取特征值字段中文名
 */

function getCodeName(tmpCode, tt_pos_loc) {
  switch (parseInt(tmpCode)) {
    case 0:
      return "时间";
    //

    case 1000:
      return "转速";
    //（振动和包络字段）

    case 2000:
      return "有效值";
    //

    case 3000:
      return "峰值";
    //振动峰值

    case 4000:
      return "峰峰值";
    //振动峰峰值

    case 5000:
      return "包络解调值";
    //包络有效值(解调值)

    case 6000:
      return "包络特征值";
    // 包络特征值

    case 7000:
      return "数字量值";
    //数字量值

    case 8000:
      return "过程量值";
    //过程量值

    case 9000:
      return "有效值";
    //晃度有效值

    case 10000:
      return "峰值";
    //晃度峰值

    case 11000:
      return "峰峰值";
    //晃度峰峰值

    case 12001:
      return "频段1";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 12002:
      return "频段2";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 12003:
      return "频段3";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 12004:
      return "频段4";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 12005:
      return "频段5";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 12006:
      return "频段6";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 12007:
      return "频段7";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 12008:
      return "频段8";
    //可选频段频谱幅值可选频段n 对应code=12001~12008

    case 13001:
      return "频段1";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 13002:
      return "频段2因数";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 13003:
      return "频段3因数";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 13004:
      return "频段4因数";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 13005:
      return "频段5因数";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 13006:
      return "频段6因数";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 13007:
      return "频段7因数";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 13008:
      return "频段8因数";
    //可选频段频谱幅值最大值与频谱幅值的比值可选频段n 对应code=13001~13008

    case 14000:
      return "电压";
    //Gap电压

    case 15000:
      return "峰值因数";
    //峰值因数=振动峰值/振动有效值

    case 16000:
      return "转速测点转速值";
    //转速测点转速值

    case 17000:
      return "测点位置";
    //测点位置（不属于特征值，用于列表显示）

    case 18000:
      return "数字量类型";
    //数字量类型（不属于特征值，用于列表显示）

    case 19000:
      return "能量有效值";
    //能量有效值

    case 20000:
      return "有效值";
    //倾覆有效值

    case 21000:
      return "风速";
    //风速

    case 22000:
      return "功率";
    //功率

    case 23000:
      return "温度值";
    //温度值

    case 24000:
      return "峭度";
    //峭度

    case 25000:
      return "裕度";
    //裕度

    case 26000:
      return "歪度";
    //歪度

    case 27000:
      return "工艺量";
    //工艺量

    case 28000:
      return "转速直流量";
    //转速直流量

    case 29000:
      return "晃度位移值";
    //晃度位移

    case 30000:
      return "峰值";
    //倾覆峰值

    case 31000:
      return "峰峰值";
    //倾覆峰峰值

    case 32000:
      return "位移";
    //倾覆位移值

    case 33000:
      return "有效值";
    //倾角有效值

    case 34000:
      return "峰值";
    //倾角峰值

    case 35000:
      return "峰峰值";
    //倾角峰峰值

    case 36000:
      return "平均值";
    //倾角平均值

    case 37000:
      return "有效值";
    //合成倾角有效值

    case 38000:
      return "峰值";
    //合成倾角峰值

    case 39000:
      return "峰峰值";
    //合成倾角峰峰值

    case 40000:
      return "平均值";
    //合成倾角平均值/沉降角度:塔底的叫沉降；塔顶的叫合成倾角

    case 41000:
      return "平均值相位";
    //（合成）平均值相位

    case 42000:
      return "峰值相位";
    //（合成）峰值相位

    case 43000:
      return "沉降量";
    //（合成）沉降量

    case 44000:
      return "预紧力值";
    //预紧力值

    case 45000:
      return "温度值";
    //温度值（螺栓）

    case 46000:
      return "冲击值";
    //冲击值

    case 47000:
      return "位移";
    //倾角位移值

    case 48000:
      if (tt_pos_loc == 1 || tt_pos_loc == 0) {
        return "位移"; //（合成）倾角位移值:塔底的叫平均值；塔顶的叫位移值
      } else if (tt_pos_loc == 2) {
        return "沉降量"; //（合成）倾角位移值:塔底的叫平均值；塔顶的叫位移值
      }

      break;

    case 49000:
      return "振动一次积分有效值";
    //振动一次积分有效值

    case 50000:
      return "振动二次积分有效值";
    //振动二次积分有效值

    case 51000:
      return "温度值";
    //

    default:
      return "undefined";
  }
} //定义一份特征值列表

/**
 * params {pos_type:测点类型；tt_pos_loc：测点为13时的测点位置}
 *
 * */

function getSpecVal(pos_type, tt_pos_loc) {
  var specValList = [];
  var commonCode1 = [12001, 12002, 12003, 12004, 12005, 12006, 12007, 12008];
  var commonCode2 = [13001, 13002, 13003, 13004, 13005, 13006, 13007, 13008];

  switch (parseInt(pos_type)) {
    case 1:
      //转速
      specValList = [16000, 28000];
      break;

    case 2:
      //过程量测点
      specValList = [8000];
      break;

    case 3:
      //振动测点
      specValList = [1000, 2000, 3000, 4000, 19000, 15000, 14000, 24000, 25000, 26000, 46000].concat(commonCode1, commonCode2);
      break;

    case 4:
    case 15:
      //包络测点、冲击测点
      specValList = [1000, 5000, 6000, 19000, 14000, 46000].concat(commonCode1, commonCode2);
      break;

    case 5:
      //数字量测点
      specValList = [7000];
      break;

    case 6:
      //晃度测点
      specValList = [1000, 9000, 10000, 11000, 29000, 19000, 14000].concat(commonCode1);
      break;

    case 7:
      //温度测点
      specValList = [1000, 9000, 10000, 11000, 29000, 19000, 14000].concat(commonCode1);
      break;

    case 8:
      //振动阶次
      specValList = [1000, 2000, 3000, 4000, 19000, 15000, 14000, 24000, 25000, 26000, 46000].concat(commonCode1, commonCode2);
      break;

    case 9:
    case 16:
      //包络阶次、冲击阶次
      specValList = [1000, 5000, 6000, 19000, 14000, 46000].concat(commonCode1, commonCode2);
      break;

    case 10:
      //工艺量测点
      specValList = [27000];
      break;

    case 11:
      //倾覆测点
      specValList = [1000, 20000, 30000, 31000, 32000].concat(commonCode1);
      break;

    case 12:
      //倾角测点
      specValList = [1000, 33000, 34000, 35000, 36000, 47000, 51000].concat(commonCode1);
      break;

    case 13:
      //合成倾角测点
      if (tt_pos_loc && tt_pos_loc == 2) {
        specValList = [1000, 37000, 38000, 39000, 40000, 43000, 41000, 42000, 51000].concat(commonCode1);
      } else {
        specValList = [1000, 37000, 38000, 39000, 40000, 41000, 42000, 48000, 51000].concat(commonCode1);
      }

      break;

    case 14:
      //螺栓测点
      specValList = [44000, 45000];
      break;

    default:
      return "undefined";
  }

  return specValList;
}
function getSpec(tt_pos_loc) {
  var specValList = [
  /**转速测点**/
  {
    "pos_type": 1,
    "valList": [{
      "name": "测点转速值",
      "type_name": "speed_value",
      "check": true,
      "code": 16000
    }, {
      "name": "转速直流量",
      "type_name": "speed_dc",
      "check": false,
      "code": 28000
    }]
  },
  /**过程量测点**/
  {
    "pos_type": 2,
    "valList": [{
      "name": "过程量值",
      "type_name": "value",
      "check": true,
      "code": 8000
    }]
  },
  /**振动测点**/
  {
    "pos_type": 3,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "有效值",
      "type_name": "vib_rms",
      "check": true,
      "code": 2000
    }, {
      "name": "峰值",
      "type_name": "vib_p",
      "check": true,
      "code": 3000
    }, {
      "name": "峰峰值",
      "type_name": "vib_pp",
      "check": true,
      "code": 4000
    }, {
      "name": "能量有效值",
      "type_name": "pow_rms",
      "check": true,
      "code": 19000
    }, {
      "name": "峰值因数",
      "type_name": "vib_pf",
      "check": true,
      "code": 15000
    }, {
      "name": "偏置电压",
      "type_name": "gap",
      "check": true,
      "code": 14000
    }, {
      "name": "峭度",
      "type_name": "vib_k",
      "check": true,
      "code": 24000
    }, {
      "name": "裕度",
      "type_name": "vib_cf",
      "check": true,
      "code": 25000
    }, {
      "name": "歪度",
      "type_name": "vib_sf",
      "check": true,
      "code": 26000
    }, {
      "name": "冲击值",
      "type_name": "sv",
      "check": false,
      "code": 46000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }, {
      "name": "频段因数1",
      "type_name": "vib_vsx1_scale",
      "check": false,
      "code": 13001
    }, {
      "name": "频段因数2",
      "type_name": "vib_vsx2_scale",
      "check": false,
      "code": 13002
    }, {
      "name": "频段因数3",
      "type_name": "vib_vsx3_scale",
      "check": false,
      "code": 13003
    }, {
      "name": "频段因数4",
      "type_name": "vib_vsx4_scale",
      "check": false,
      "code": 13004
    }, {
      "name": "频段因数5",
      "type_name": "vib_vsx5_scale",
      "check": false,
      "code": 13005
    }, {
      "name": "频段因数6",
      "type_name": "vib_vsx6_scale",
      "check": false,
      "code": 13006
    }, {
      "name": "频段因数7",
      "type_name": "vib_vsx7_scale",
      "check": false,
      "code": 13007
    }, {
      "name": "频段因数8",
      "type_name": "vib_vsx8_scale",
      "check": false,
      "code": 13008
    }]
  },
  /**包络测点**/
  {
    "pos_type": 4,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "包络解调值",
      "type_name": "spm_rms",
      "check": true,
      "code": 5000
    }, {
      "name": "包络特征值",
      "type_name": "spm_pp",
      "check": true,
      "code": 6000
    }, {
      "name": "能量有效值",
      "type_name": "pow_rms",
      "check": true,
      "code": 19000
    }, {
      "name": "偏置电压",
      "type_name": "gap",
      "check": true,
      "code": 14000
    }, {
      "name": "冲击值",
      "type_name": "sv",
      "check": false,
      "code": 46000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }, {
      "name": "频段因数1",
      "type_name": "vib_vsx1_scale",
      "check": false,
      "code": 13001
    }, {
      "name": "频段因数2",
      "type_name": "vib_vsx2_scale",
      "check": false,
      "code": 13002
    }, {
      "name": "频段因数3",
      "type_name": "vib_vsx3_scale",
      "check": false,
      "code": 13003
    }, {
      "name": "频段因数4",
      "type_name": "vib_vsx4_scale",
      "check": false,
      "code": 13004
    }, {
      "name": "频段因数5",
      "type_name": "vib_vsx5_scale",
      "check": false,
      "code": 13005
    }, {
      "name": "频段因数6",
      "type_name": "vib_vsx6_scale",
      "check": false,
      "code": 13006
    }, {
      "name": "频段因数7",
      "type_name": "vib_vsx7_scale",
      "check": false,
      "code": 13007
    }, {
      "name": "频段因数8",
      "type_name": "vib_vsx8_scale",
      "check": false,
      "code": 13008
    }]
  },
  /**数字量测点**/
  {
    "pos_type": 5,
    "valList": [{
      "name": "数字量值",
      "type_name": "digital_value",
      "check": true,
      "code": 7000
    }]
  },
  /**晃度测点**/
  {
    "pos_type": 6,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "有效值",
      "type_name": "rock_rms",
      "check": true,
      "code": 9000
    }, {
      "name": "峰值",
      "type_name": "rock_p",
      "check": true,
      "code": 10000
    }, {
      "name": "峰峰值",
      "type_name": "rock_pp",
      "check": true,
      "code": 11000
    }, {
      "name": "晃度位移值",
      "type_name": "rock_s",
      "check": true,
      "code": 29000
    }, {
      "name": "能量有效值",
      "type_name": "pow_rms",
      "check": true,
      "code": 19000
    }, {
      "name": "偏置电压",
      "type_name": "gap",
      "check": true,
      "code": 14000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }]
  },
  /**温度测点**/
  {
    "pos_type": 7,
    "valList": [{
      "name": "温度值",
      "type_name": "value",
      "check": true,
      "code": 23000
    }]
  },
  /**振动阶次测点**/
  {
    "pos_type": 8,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "有效值",
      "type_name": "vib_rms",
      "check": true,
      "code": 2000
    }, {
      "name": "峰值",
      "type_name": "vib_p",
      "check": true,
      "code": 3000
    }, {
      "name": "峰峰值",
      "type_name": "vib_pp",
      "check": true,
      "code": 4000
    }, {
      "name": "能量有效值",
      "type_name": "pow_rms",
      "check": true,
      "code": 19000
    }, {
      "name": "峰值因数",
      "type_name": "vib_pf",
      "check": true,
      "code": 15000
    }, {
      "name": "偏置电压",
      "type_name": "gap",
      "check": true,
      "code": 14000
    }, {
      "name": "峭度",
      "type_name": "vib_k",
      "check": true,
      "code": 24000
    }, {
      "name": "裕度",
      "type_name": "vib_cf",
      "check": true,
      "code": 25000
    }, {
      "name": "歪度",
      "type_name": "vib_sf",
      "check": true,
      "code": 26000
    }, {
      "name": "冲击值",
      "type_name": "sv",
      "check": false,
      "code": 46000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }, {
      "name": "频段因数1",
      "type_name": "vib_vsx1_scale",
      "check": false,
      "code": 13001
    }, {
      "name": "频段因数2",
      "type_name": "vib_vsx2_scale",
      "check": false,
      "code": 13002
    }, {
      "name": "频段因数3",
      "type_name": "vib_vsx3_scale",
      "check": false,
      "code": 13003
    }, {
      "name": "频段因数4",
      "type_name": "vib_vsx4_scale",
      "check": false,
      "code": 13004
    }, {
      "name": "频段因数5",
      "type_name": "vib_vsx5_scale",
      "check": false,
      "code": 13005
    }, {
      "name": "频段因数6",
      "type_name": "vib_vsx6_scale",
      "check": false,
      "code": 13006
    }, {
      "name": "频段因数7",
      "type_name": "vib_vsx7_scale",
      "check": false,
      "code": 13007
    }, {
      "name": "频段因数8",
      "type_name": "vib_vsx8_scale",
      "check": false,
      "code": 13008
    }]
  },
  /**包络阶次测点**/
  {
    "pos_type": 9,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "包络解调值",
      "type_name": "spm_rms",
      "check": true,
      "code": 5000
    }, {
      "name": "包络特征值",
      "type_name": "spm_pp",
      "check": true,
      "code": 6000
    }, {
      "name": "能量有效值",
      "type_name": "pow_rms",
      "check": true,
      "code": 19000
    }, {
      "name": "偏置电压",
      "type_name": "gap",
      "check": true,
      "code": 14000
    }, {
      "name": "冲击值",
      "type_name": "sv",
      "check": false,
      "code": 46000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }, {
      "name": "频段因数1",
      "type_name": "vib_vsx1_scale",
      "check": false,
      "code": 13001
    }, {
      "name": "频段因数2",
      "type_name": "vib_vsx2_scale",
      "check": false,
      "code": 13002
    }, {
      "name": "频段因数3",
      "type_name": "vib_vsx3_scale",
      "check": false,
      "code": 13003
    }, {
      "name": "频段因数4",
      "type_name": "vib_vsx4_scale",
      "check": false,
      "code": 13004
    }, {
      "name": "频段因数5",
      "type_name": "vib_vsx5_scale",
      "check": false,
      "code": 13005
    }, {
      "name": "频段因数6",
      "type_name": "vib_vsx6_scale",
      "check": false,
      "code": 13006
    }, {
      "name": "频段因数7",
      "type_name": "vib_vsx7_scale",
      "check": false,
      "code": 13007
    }, {
      "name": "频段因数8",
      "type_name": "vib_vsx8_scale",
      "check": false,
      "code": 13008
    }]
  },
  /**工艺量测点**/
  {
    "pos_type": 10,
    "valList": [{
      "name": "工艺量",
      "type_name": "value",
      "check": true,
      "code": 27000
    }]
  },
  /**倾覆测点**/
  {
    "pos_type": 11,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "有效值",
      "type_name": "overturn_rms",
      "check": true,
      "code": 20000
    }, {
      "name": "峰值",
      "type_name": "overturn_p",
      "check": true,
      "code": 30000
    }, {
      "name": "峰峰值",
      "type_name": "overturn_pp",
      "check": true,
      "code": 31000
    }, {
      "name": "位移",
      "type_name": "overturn_s",
      "check": true,
      "code": 32000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }]
  },
  /**倾角测点**/
  {
    "pos_type": 12,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "有效值",
      "type_name": "rock_rms",
      "check": true,
      "code": 33000
    }, {
      "name": "峰值",
      "type_name": "rock_p",
      "check": true,
      "code": 34000
    }, {
      "name": "峰峰值",
      "type_name": "rock_pp",
      "check": true,
      "code": 35000
    }, {
      "name": "平均值",
      "type_name": "rock_avg",
      "check": true,
      "code": 36000
    }, {
      "name": "位移",
      "type_name": "rock_s",
      "check": true,
      "code": 47000
    }, {
      "name": "温度值",
      "type_name": "temperature",
      "check": true,
      "code": 51000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }]
  },
  /**合成倾角测点**/
  {
    "pos_type": 13,
    "valList": [{
      "name": "转速",
      "type_name": "speed",
      "check": true,
      "code": 1000
    }, {
      "name": "有效值",
      "type_name": "overturn_rms",
      "check": true,
      "code": 37000
    }, {
      "name": "峰值",
      "type_name": "overturn_p",
      "check": true,
      "code": 38000
    }, {
      "name": "峰峰值",
      "type_name": "overturn_pp",
      "check": true,
      "code": 39000
    }, {
      "name": "平均值",
      "type_name": "rock_avg",
      "check": true,
      "code": 40000
    }, {
      "name": "位移",
      "type_name": "overturn_s",
      "check": true,
      "code": 48000
    }, {
      "name": "平均值方位",
      "type_name": "rock_rms",
      "check": true,
      "code": 41000
    }, {
      "name": "峰值方位",
      "type_name": "rock_p",
      "check": true,
      "code": 42000
    }, {
      "name": "温度值",
      "type_name": "temperature",
      "check": true,
      "code": 51000
    }, {
      "name": "频段1",
      "type_name": "vib_vsx1",
      "check": false,
      "code": 12001
    }, {
      "name": "频段2",
      "type_name": "vib_vsx2",
      "check": false,
      "code": 12002
    }, {
      "name": "频段3",
      "type_name": "vib_vsx3",
      "check": false,
      "code": 12003
    }, {
      "name": "频段4",
      "type_name": "vib_vsx4",
      "check": false,
      "code": 12004
    }, {
      "name": "频段5",
      "type_name": "vib_vsx5",
      "check": false,
      "code": 12005
    }, {
      "name": "频段6",
      "type_name": "vib_vsx6",
      "check": false,
      "code": 12006
    }, {
      "name": "频段7",
      "type_name": "vib_vsx7",
      "check": false,
      "code": 12007
    }, {
      "name": "频段8",
      "type_name": "vib_vsx8",
      "check": false,
      "code": 12008
    }]
  },
  /**螺栓测点**/
  {
    "pos_type": 14,
    "valList": [{
      "name": "预紧力值",
      "type_name": "speed_value",
      "check": true,
      "code": 44000
    }, {
      "name": "温度值",
      "type_name": "speed_dc",
      "check": true,
      "code": 45000
    }]
  }];

  if (tt_pos_loc && tt_pos_loc == 2) {
    specValList[12] = {
      "pos_type": 13,
      "valList": [{
        "name": "转速",
        "type_name": "speed",
        "check": true,
        "code": 1000
      }, {
        "name": "有效值",
        "type_name": "overturn_rms",
        "check": true,
        "code": 37000
      }, {
        "name": "峰值",
        "type_name": "overturn_p",
        "check": true,
        "code": 38000
      }, {
        "name": "峰峰值",
        "type_name": "overturn_pp",
        "check": true,
        "code": 39000
      }, {
        "name": "沉降角度",
        "type_name": "rock_avg",
        "check": true,
        "code": 40000
      }, {
        "name": "沉降量",
        "type_name": "rock_pp",
        "check": true,
        "code": 43000
      }, {
        "name": "平均值方位",
        "type_name": "rock_rms",
        "check": true,
        "code": 41000
      }, {
        "name": "峰值方位",
        "type_name": "rock_p",
        "check": true,
        "code": 42000
      }, {
        "name": "温度值",
        "type_name": "temperature",
        "check": true,
        "code": 51000
      }, {
        "name": "频段1",
        "type_name": "vib_vsx1",
        "check": false,
        "code": 12001
      }, {
        "name": "频段2",
        "type_name": "vib_vsx2",
        "check": false,
        "code": 12002
      }, {
        "name": "频段3",
        "type_name": "vib_vsx3",
        "check": false,
        "code": 12003
      }, {
        "name": "频段4",
        "type_name": "vib_vsx4",
        "check": false,
        "code": 12004
      }, {
        "name": "频段5",
        "type_name": "vib_vsx5",
        "check": false,
        "code": 12005
      }, {
        "name": "频段6",
        "type_name": "vib_vsx6",
        "check": false,
        "code": 12006
      }, {
        "name": "频段7",
        "type_name": "vib_vsx7",
        "check": false,
        "code": 12007
      }, {
        "name": "频段8",
        "type_name": "vib_vsx8",
        "check": false,
        "code": 12008
      }]
    };
  } else {
    specValList[12] = {
      "pos_type": 13,
      "valList": [{
        "name": "转速",
        "type_name": "speed",
        "check": true,
        "code": 1000
      }, {
        "name": "有效值",
        "type_name": "overturn_rms",
        "check": true,
        "code": 37000
      }, {
        "name": "峰值",
        "type_name": "overturn_p",
        "check": true,
        "code": 38000
      }, {
        "name": "峰峰值",
        "type_name": "overturn_pp",
        "check": true,
        "code": 39000
      }, {
        "name": "平均值",
        "type_name": "rock_avg",
        "check": true,
        "code": 40000
      }, {
        "name": "平均值方位",
        "type_name": "rock_rms",
        "check": true,
        "code": 41000
      }, {
        "name": "峰值方位",
        "type_name": "rock_p",
        "check": true,
        "code": 42000
      }, {
        "name": "位移",
        "type_name": "overturn_s",
        "check": true,
        "code": 48000
      }, {
        "name": "温度值",
        "type_name": "temperature",
        "check": true,
        "code": 51000
      }, {
        "name": "频段1",
        "type_name": "vib_vsx1",
        "check": false,
        "code": 12001
      }, {
        "name": "频段2",
        "type_name": "vib_vsx2",
        "check": false,
        "code": 12002
      }, {
        "name": "频段3",
        "type_name": "vib_vsx3",
        "check": false,
        "code": 12003
      }, {
        "name": "频段4",
        "type_name": "vib_vsx4",
        "check": false,
        "code": 12004
      }, {
        "name": "频段5",
        "type_name": "vib_vsx5",
        "check": false,
        "code": 12005
      }, {
        "name": "频段6",
        "type_name": "vib_vsx6",
        "check": false,
        "code": 12006
      }, {
        "name": "频段7",
        "type_name": "vib_vsx7",
        "check": false,
        "code": 12007
      }, {
        "name": "频段8",
        "type_name": "vib_vsx8",
        "check": false,
        "code": 12008
      }]
    };
  }

  return specValList;
}

/***/ }),

/***/ "./src/components/content/datas/opc/js/opc_mixin.js":
/*!**********************************************************!*\
  !*** ./src/components/content/datas/opc/js/opc_mixin.js ***!
  \**********************************************************/
/*! exports provided: macMixin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "macMixin", function() { return macMixin; });
/* harmony import */ var _opc_hdtable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./opc_hdtable.js */ "./src/components/content/datas/opc/js/opc_hdtable.js");
/* harmony import */ var _opc_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./opc_info.js */ "./src/components/content/datas/opc/js/opc_info.js");
/* harmony import */ var _opc_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./opc_methods */ "./src/components/content/datas/opc/js/opc_methods.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }




var macMixin = {
  data: function data() {
    return {
      hot: {},
      //hottable对象
      data: [],
      //hottable的data数据
      initList: {
        folderData: {},
        //组织信息下拉选项
        macData: {},
        //机组下拉选项
        posData: {},
        //测点下拉选项
        codeData: {} //特征值下拉选项

      },
      changeList: {
        changeClientData: {},
        //修改modbusclient的数据
        deleteData: [] //删除的数据

      },
      scroll: 0 //滚动距离

    };
  },
  mounted: function mounted() {
    this.getListData();
  },
  methods: {
    getListData: function getListData() {
      var _this = this;

      this.$getApi.queryOPCClient().then(function (res) {
        console.log(res);

        if (res.tree_list.length > 0) {
          res.tree_list.forEach(function (folder) {
            if (folder.machine_list.length > 0) {
              folder.machine_list.forEach(function (machine) {
                if (machine.position_list.length > 0) {
                  _this.initList.folderData[folder.folderId] = folder.folderName;
                  _this.initList.macData[folder.folderId] = {};
                  _this.initList.macData[folder.folderId][machine.machine_id] = machine.machine_me;
                  _this.initList.posData[machine.machine_id] = {};
                  machine.position_list.forEach(function (position) {
                    _this.initList.posData[machine.machine_id][position.position_id] = position.position_name;
                    _this.initList.codeData[position.position_id + '_' + position.position_name] = Object(_opc_methods__WEBPACK_IMPORTED_MODULE_2__["getSpecVal"])(position.position_type, position.tt_pos_loc);
                  });
                }
              });
            }
          });
        }

        var result = Object(_opc_info_js__WEBPACK_IMPORTED_MODULE_1__["getOpcInfo"])(res);

        if (!result) {
          _this.$emit("child-msg", true);
        } else {
          //组织position结构
          var _result = _slicedToArray(result, 1);

          _this.data = _result[0];

          //渲染表格
          _this.$emit("child-msg", false);

          _this.renderTable();
        }
      });
    },

    /* 渲染表格 */
    renderTable: function renderTable() {
      var _this2 = this;

      var HotTable = null;
      this.hot = null;
      HotTable = document.getElementById('HotTable');
      var property = {
        type: this.type,
        tids: this.$store.state.tids,
        getData: this.getData,
        getHot: this.getHot,
        initList: this.initList,
        changeList: this.changeList,
        router: this.$router,
        store: this.$store
      }; //创建table

      this.hot = new _opc_hdtable_js__WEBPACK_IMPORTED_MODULE_0__["default"](HotTable, property);
      this.reRenderSelectOption(this.hot, this.data);
      /* 监听滚动事件 */

      var wtHolder = document.getElementsByClassName('wtHolder')[0];
      wtHolder.addEventListener('scroll', function (e) {
        _this2.hot.destroyEditor(); //处理当选择下拉框后拖动滚动条框框会跟着跑的问题

      });
    },
    reRenderSelectOption: function reRenderSelectOption(hot, data) {
      //重新渲染selectOption,让每个option
      var cellMeta = hot.getCellMetaAtRow(0);
      var rows = data.length;
      cellMeta.forEach(function (item) {
        if (item.prop == "tree_name") {
          //组织
          for (var i = 0; i <= rows; i++) {
            hot.setCellMeta(i, item.col, "selectOptions", function (row) {
              return data[hot.toPhysicalRow(row)].t_name_sources;
            });
          }
        }

        if (item.prop == "pump.mac_me") {
          //机组
          for (var _i2 = 0; _i2 < rows; _i2++) {
            hot.setCellMeta(_i2, item.col, "selectOptions", function (row) {
              return data[hot.toPhysicalRow(row)].pump.macName_sources;
            });
          }
        }

        if (item.prop == "condition.pos_name1") {
          //工况参考测点1
          for (var _i3 = 0; _i3 < rows; _i3++) {
            hot.setCellMeta(_i3, item.col, "selectOptions", function (row) {
              return data[hot.toPhysicalRow(row)].condition.pos_sources1;
            });
          }
        }

        if (item.prop == "condition.pos_name2") {
          //工况参考测点2
          for (var _i4 = 0; _i4 < rows; _i4++) {
            hot.setCellMeta(_i4, item.col, "selectOptions", function (row) {
              return data[hot.toPhysicalRow(row)].condition.pos_sources2;
            });
          }
        }
      });
    },
    //获取data
    getData: function getData() {
      return this.data;
    },

    /* 获取hot实例 */
    getHot: function getHot() {
      return this.hot;
    }
  }
};

/***/ })

}]);
//# sourceMappingURL=15-697aeda67c665a9b91af.js.map