(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[9],{

/***/ "./src/components/content/system/position/table/js/pos_columns.js":
/*!************************************************************************!*\
  !*** ./src/components/content/system/position/table/js/pos_columns.js ***!
  \************************************************************************/
/*! exports provided: setHeaders, setColumns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setHeaders", function() { return setHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setColumns", function() { return setColumns; });
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

/* 表头部分
 */
//设置 列头(公共)
function setHeaders(type) {
  var _header;

  var header;

  if (type == 200) {
    //长采样（特殊）
    header = ['组织名称', '机组名称', '采集器名称', '测点名称', '采集方式', '是否有效', '序号', '关联通道'];
    return header;
  } // 除长采样之外其他测点的共同头部


  header = ['组织名称', '机组名称', '采集器名称', '测点名称', '关联通道', '是否有效', '是否报警'];

  (_header = header).push.apply(_header, _toConsumableArray(selectHeader(parseInt(type)))); //是否加入频段


  setHeaderFrequency(header, type);
  return header;
} //除公共部分之外的列表头

function selectHeader(type) {
  var header = [];

  switch (type) {
    case 3:
      //振动
      header = ['任务标识', '分析频率', '谱线数', '采样周期', '谱线分辨率', '过采样', '报警投票机制a', '报警投票机制b', '过滤阈值', '增长百分比', '平均值计算时间(h)', '死区时间(h)', '连续n包', '数码管显示', '趋势报警特征值'];
      break;

    case 6:
    case 12:
      //振动，晃度，倾角
      header = ['任务标识', '分析频率', '谱线数', '采样周期', '谱线分辨率', '过采样', '安装高度(m)'];
      break;

    case 4:
      //包络
      header = ['任务标识', '滤波器', '分析频率', '谱线数', '采样周期', '谱线分辨率', '过采样', '数码管显示'];
      break;

    case 15:
      //冲击测点
      header = ['任务标识', '分析频率', '谱线数', '采样周期', '谱线分辨率', '过采样', '数码管显示'];
      break;

    case 8:
      //振动阶次
      header = ['任务标识', '采样周期', '采样点数', '过采样', '数码管显示'];
      break;

    case 9:
      //包络阶次、冲击阶次
      header = ['任务标识', '滤波器', '采样周期', '采样点数', '过采样', '数码管显示'];
      break;

    case 16:
      //包络阶次、冲击阶次
      header = ['任务标识', '采样周期', '采样点数', '过采样', '数码管显示'];
      break;

    case 1:
      //转速
      header = ['转速比', '最小转速', '最大转速', '数码管显示'];
      break;

    case 11:
      //倾覆
      header = ['任务标识', '位移单位', '分析频率', '谱线数', '采样周期', '谱线分辨率', '过采样', '传感器名称', '晃度X名称', '关联通道X', '自振频率1', '晃度Y名称', '关联通道Y', '自振频率2', '安装高度(m)'];
      break;

    case 13:
      //合成倾角
      header = ['分析频率', '谱线数', '采样周期', '谱线分辨率', '过采样', '传感器名称', '传感类型', '数据来源', '偏置角度', '基础直径', '倾角X名称', '关联通道X', '偏移量X', '从设备号X', '过程量类型X', '倾角Y名称', '关联通道Y', '偏移量Y', '从设备号Y', '过程量类型Y', '安装高度(m)'];
      break;

    case 7:
      //温度
      header = ['数码管显示'
      /* 'Ⅰ级报警(高)',
       '预警(高)',
       '预警(低)',
       'Ⅰ级报警(低)',*/
      ];
      break;

    case 2:
      //过程量
      header = [
        /*'Ⅰ级报警(高)',
        '预警(高)',
        '预警(低)',
        'Ⅰ级报警(低)',*/
      ];
      break;

    case 5:
      //数字量
      header = ['计算方式'
      /*'报警(高)',
      '预警(高)'*/
      ];
      break;

    case 10:
      //工艺量
      header = ['单位', '单位精度',
      /*'报警(高)',
      '预警(高)',
      '预警(低)',
      '报警(低)',*/
      '工程量输入范围高', '工程量输入范围低', '信号输入范围高', '信号输入范围低', '校正参数', '零点偏移', '数据地址', '过程量类型', '传感器类型', '从设备号'];
      break;
  }

  return header;
} //频段列表头


function setHeaderFrequency(headers, type) {
  //设置频段列表头
  if (type == 3 || type == 15 || type == 4 || type == 8 || type == 16 || type == 9 || type == 6 || type == 11 || type == 12 || type == 13) {
    var obj0 = [],
        obj1 = [];

    for (var i = 1; i <= 8; i++) {
      obj0.push({
        label: "\u9891\u6BB5".concat(i),
        colspan: 5
      });
      obj1.push.apply(obj1, ["\u9891\u6BB5".concat(i, "\u9009\u62E9"), "\u9891\u6BB5".concat(i, "\u540D\u79F0"), "\u9891\u6BB5".concat(i, "\u7C7B\u578B"), "\u9891\u6BB5".concat(i, "\u8D77\u59CB\u503C(Hz)"), "\u9891\u6BB5".concat(i, "\u7ED3\u675F\u503C(Hz)")]);
    } // obj1.push('')
    // headers[0].push(...obj0)


    headers.push.apply(headers, obj1);
  }
}
/* 表数据部分
 */
//设置columns（公共）（组织名称、机组名称、测点名称、采集器名称、测点类型、通道名称、是否有效、是否报警）


function setColumns(type, data) {
  var _columns;

  var columns;

  if (type == 200) {
    //长采样（特殊）
    columns = [{
      data: "t_name",
      //组织名称
      editor: 'select',
      readOnly: true,
      selectOptions: function selectOptions(row) {
        return data[row].t_sources;
      }
    }, {
      data: "mac_me",
      //机组名称
      editor: 'select',
      readOnly: true,
      selectOptions: function selectOptions(row) {
        return data[row].macName_sources;
      }
    }, {
      data: "dgm_name",
      //采集器名称
      editor: 'select',
      readOnly: true,
      selectOptions: function selectOptions(row) {
        return data[row].dgm_sources;
      }
    }, {
      data: "pos_name"
    }, //测点名称
    {
      data: "baseInfo.method_val",
      //采集方式
      editor: 'select',
      readOnly: true,
      selectOptions: function selectOptions(row) {
        return data[row].baseInfo.method_sources;
      }
    }, {
      data: "pos_activity_val",
      //是否有效
      editor: 'select',
      selectOptions: function selectOptions(row) {
        return data[row].pos_activity_sources;
      }
    }, {
      data: "baseInfo.capture_byId",
      //序号
      editor: 'select',
      readOnly: true,
      selectOptions: function selectOptions(row) {
        return data[row].baseInfo.capture_sources;
      }
    }, {
      data: "baseInfo.capture_chName",
      //关联通道
      editor: 'select',
      readOnly: true,
      selectOptions: function selectOptions(row) {
        return data[row].baseInfo.capture_chName_sources;
      }
    }];
    return columns;
  } // 除长采样之外的数据表部分


  columns = [{
    data: "t_name",
    //组织名称
    editor: 'select',
    readOnly: true,
    selectOptions: function selectOptions(row) {
      return data[row].t_sources;
    }
  }, {
    data: "mac_me",
    //机组名称
    editor: 'select',
    readOnly: true,
    selectOptions: function selectOptions(row) {
      return data[row].macName_sources;
    }
  }, {
    data: "dgm_name",
    //采集器名称
    editor: 'select',
    readOnly: true,
    selectOptions: function selectOptions(row) {
      return data[row].dgm_sources;
    }
  }, {
    data: "pos_name"
  }, //测点名称
  // {
  //     data: `pos_type_name`, //测点类型
  // },
  {
    data: "ch_name",
    //通道名称
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].ch_sources;
    }
  }, {
    data: "pos_activity_val",
    //是否有效
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].pos_activity_sources;
    }
  }, {
    data: "isalarm_val",
    //是否报警
    editor: 'select',
    selectOptions: function selectOptions(row) {
      return data[row].isalarm_sources;
    }
  }];

  (_columns = columns).push.apply(_columns, _toConsumableArray(selectColumns(parseInt(type), data))); //是否加入频段


  setColumnFrequency(columns, type);
  return columns;
} //列表渲染的选择

function selectColumns(type, data) {
  var col;

  switch (type) {
    case 3:
      //振动,
      col = [{
        data: "task_id_val",
        //任务标识
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].task_id_sources;
        }
      }, {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.order",
        //采样周期
        readOnly: true
      }, {
        data: "baseInfo.specOrder",
        //谱线分辨率
        readOnly: true
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.alarm_smooth_a" //报警投票机制a

      }, {
        data: "baseInfo.alarm_smooth_b" //报警投票机制b

      }, {
        data: "baseInfo.levelRms" //过滤阈值

      }, {
        data: "baseInfo.areaRatio" //增长百分比

      }, {
        data: "baseInfo.sampHours" //平均值计算时间

      }, {
        data: "baseInfo.death_time" //死区时间

      }, {
        data: "baseInfo.packn" //连续n包

      }, {
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }, {
        data: "baseInfo.trendAlarm_val",
        //趋势报警特征值
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.trendAlarm_sources;
        }
      }];
      break;

    case 6:
    case 12:
      // 晃度，倾角
      col = [{
        data: "task_id_val",
        //任务标识
        readOnly: true
      }, {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        readOnly: true,
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        readOnly: true,
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.order",
        //采样周期
        readOnly: true
      }, {
        data: "baseInfo.specOrder",
        //谱线分辨率
        readOnly: true
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.tower_H" //塔筒高度

      }];
      break;

    case 4:
      //包络
      col = [{
        data: "task_id_val",
        //任务标识
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].task_id_sources;
        }
      }, {
        data: "baseInfo.filter_val",
        //滤波器
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.filter_sources;
        }
      }, {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.order",
        //采样周期
        readOnly: true
      }, {
        data: "baseInfo.specOrder",
        //谱线分辨率
        readOnly: true
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }];
      break;

    case 15:
      //冲击
      col = [{
        data: "task_id_val",
        //任务标识
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].task_id_sources;
        }
      },
      /*{
        data: `baseInfo.filter_val`,//滤波器
        editor: 'select',
        selectOptions: row => data[row].baseInfo.filter_sources
      },*/
      {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.order",
        //采样周期
        readOnly: true
      }, {
        data: "baseInfo.specOrder",
        //谱线分辨率
        readOnly: true
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }];
      break;

    case 8:
      //振动阶次、
      col = [{
        data: "task_id_val",
        //任务标识
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].task_id_sources;
        }
      }, {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }];
      break;

    case 9:
      //包络阶次,冲击阶次
      col = [{
        data: "task_id_val",
        //任务标识
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].task_id_sources;
        }
      }, {
        data: "baseInfo.filter_val",
        //滤波器
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.filter_sources;
        }
      }, {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }];
      break;

    case 16:
      //包络阶次,冲击阶次
      col = [{
        data: "task_id_val",
        //任务标识
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].task_id_sources;
        }
      },
      /*{
          data: `baseInfo.filter_val`,//滤波器
        editor: 'select',
        selectOptions: row => data[row].baseInfo.filter_sources
      },*/
      {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }];
      break;

    case 1:
      //转速
      col = [{
        data: "baseInfo.speedRate"
      }, //转速比
      {
        data: "baseInfo.min_speed"
      }, {
        data: 'baseInfo.max_speed'
      }, {
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }];
      break;

    case 11:
      //倾覆
      col = [{
        data: "task_id_val",
        //任务标识
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].task_id_sources;
        }
      }, {
        data: "baseInfo.sUnitName" //位移单位

      }, {
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        order: true,
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.order",
        //采样周期
        readOnly: true
      }, {
        data: "baseInfo.specOrder",
        //谱线分辨率
        readOnly: true
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.tt_sensor_name"
      }, //传感器名称
      {
        data: "baseInfo.rock1_pos_name" // 晃度X名称

      }, {
        data: "baseInfo.rock1_ch_name",
        //晃度X关联通道名称
        readOnly: true
      }, {
        data: "baseInfo.self1" //晃度自振频率1

      }, {
        data: "baseInfo.rock2_pos_name"
      }, {
        data: "baseInfo.rock2_ch_name",
        readOnly: true
      }, {
        data: "baseInfo.self2"
      }, {
        data: "baseInfo.tower_H" //塔筒高度

      }];
      break;

    case 13:
      //合成倾角
      col = [{
        data: "baseInfo.frequency_val",
        //分析频率
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.frequency_sources;
        }
      }, {
        data: "baseInfo.spectral",
        //谱线数
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.spectral_sources;
        }
      }, {
        data: "baseInfo.order",
        //采样周期
        readOnly: true
      }, {
        data: "baseInfo.specOrder",
        //谱线分辨率
        readOnly: true
      }, {
        data: "baseInfo.resampling_val",
        //过采样
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.resampling_sources;
        }
      }, {
        data: "baseInfo.tt_sensor_name"
      }, //传感器名称
      {
        data: "baseInfo.dip_model_val",
        //传感器类型
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.dip_model_sources;
        }
      }, {
        data: "baseInfo.sourceType_val",
        //数据来源
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.sourceType_sources;
        }
      }, {
        data: "baseInfo.offset_angle" //偏置角度

      }, {
        data: "baseInfo.diameter" //基础直径

      }, {
        data: "baseInfo.rock1_pos_name" // 倾角X名称

      }, {
        data: "baseInfo.rock1_ch_name",
        //倾角X关联通道名称
        editor: 'select',
        readOnly: true,
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.rock1_ch_sources;
        }
      }, {
        data: "baseInfo.offset1"
      }, {
        data: "baseInfo.slaveid1"
      }, {
        data: "baseInfo.datamode1_val",
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.datamode1_sources;
        }
      }, {
        data: "baseInfo.rock2_pos_name"
      }, {
        data: "baseInfo.rock2_ch_name",
        editor: 'select',
        readOnly: true,
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.rock2_ch_sources;
        }
      }, {
        data: "baseInfo.offset2"
      }, {
        data: "baseInfo.slaveid2"
      }, {
        data: "baseInfo.datamode2_val",
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.datamode2_sources;
        }
      }, {
        data: "baseInfo.tower_H" //塔筒高度

      }];
      break;

    case 7:
      //温度
      col = [{
        data: "baseInfo.if_show_val",
        //数码管显示
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.if_show_sources;
        }
      }
      /*{ data: `baseInfo.hh_limit` },
      { data: `baseInfo.h_limit` },
      { data: `baseInfo.l_limit` },
      { data: `baseInfo.ll_limit` },*/
      ];
      break;

    case 2:
      //过程量
      col = [
        /*{ data: `baseInfo.hh_limit` },
        { data: `baseInfo.h_limit` },
        { data: `baseInfo.l_limit` },
        { data: `baseInfo.ll_limit` }*/
      ];
      break;

    case 5:
      //数字量
      col = [{
        data: "baseInfo.calc_method_val",
        //计算方式
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.calc_method_sources;
        }
      }
      /*{ data: `baseInfo.hh_limit` },
      { data: `baseInfo.h_limit` }*/
      ];
      break;

    case 10:
      //工艺量
      col = [{
        data: "baseInfo.byUnitName"
      }, {
        data: "baseInfo.unitNum"
      },
      /*{ data: `baseInfo.hh_limit` },
      { data: `baseInfo.h_limit` },
      { data: `baseInfo.l_limit` },
      { data: `baseInfo.ll_limit` },*/
      {
        data: "baseInfo.hi_value"
      }, {
        data: "baseInfo.low_value"
      }, {
        data: "baseInfo.ref_vol"
      }, {
        data: "baseInfo.ref_eng"
      }, {
        data: "baseInfo.corr"
      }, {
        data: "baseInfo.scale"
      }, {
        data: "baseInfo.dataaddress"
      }, {
        data: "baseInfo.datamode_val",
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.datamode_sources;
        }
      }, {
        data: "baseInfo.sensor_id_val",
        editor: 'select',
        selectOptions: function selectOptions(row) {
          return data[row].baseInfo.sensorId_sources;
        }
      }, {
        data: "baseInfo.slaveid"
      }];
      break;

    case 14:
      col = [];
      break;
  }

  return col;
} //设置频段


function setColumnFrequency(col, type) {
  if (type == 3 || type == 15 || type == 4 || type == 8 || type == 16 || type == 9 || type == 6 || type == 11 || type == 12 || type == 13) {
    for (var i = 0; i <= 7; i++) {
      col.push.apply(col, [{
        data: "baseInfo.band".concat(i, ".dwOpt_freq_selected"),
        type: 'checkbox',
        checkedTemplate: '1',
        uncheckedTemplate: '0'
      }, {
        data: "baseInfo.band".concat(i, ".dwOpt_freq_name")
      }, {
        data: "baseInfo.band".concat(i, ".optfreq_type_val"),
        editor: 'select',
        selectOptions: ['能量有效值', '速度值', '加速度值']
      }, {
        data: "baseInfo.band".concat(i, ".dwOpt_freq_begin")
      }, {
        data: "baseInfo.band".concat(i, ".dwOpt_freq_end")
      }]);
    }
  }
}

/***/ }),

/***/ "./src/components/content/system/position/table/js/pos_hdtable.js":
/*!************************************************************************!*\
  !*** ./src/components/content/system/position/table/js/pos_hdtable.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(swal, $) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return poshdtable; });
/* harmony import */ var network_getApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! network/getApi */ "./src/network/getApi.js");
/* harmony import */ var common_hdtable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! common/hdtable.js */ "./src/common/hdtable.js");
/* harmony import */ var _pos_info_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pos_info.js */ "./src/components/content/system/position/table/js/pos_info.js");
/* harmony import */ var _pos_methods_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pos_methods.js */ "./src/components/content/system/position/table/js/pos_methods.js");
/* harmony import */ var _pos_columns_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pos_columns.js */ "./src/components/content/system/position/table/js/pos_columns.js");
/* harmony import */ var utils_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! utils/utils */ "./src/utils/utils.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }







var colWidth = '';
function poshdtable(el, vm) {
  var data = vm.getData(); //创建表格属性的实例

  var T = new tableData(vm);
  /* 初始化所有通道可选项 */

  T.initChannel(data);
  T.refresh_channel(); // 组装振动表格数据

  var vibTable = {
    // 表格右键菜单
    contextMenu: T.contextMenu(),
    // 表格显示的数据
    data: data,
    //表格的列
    colHeaders: T.colHeaders(),
    //表格的列头自定义
    // nestedHeaders: T.nestedHeaders(),
    //数据渲染renderData
    columns: T.columns(),
    //单元格属性设置
    cells: T.cells(),
    //单击单元格或行/列标题后触发。如果单击行/列标题，则坐标索引为负。
    afterOnCellMouseUp: T.afterOnCellMouseUp(),
    //过滤之后
    afterFilter: T.afterFilter(),
    //新建行
    afterCreateRow: T.afterCreateRow(),
    beforeChange: T.beforeChange(),
    afterChange: T.afterChange(),
    //移除行事件
    beforeRemoveRow: T.beforeRemoveRow(),
    afterRemoveRow: T.afterRemoveRow(),
    afterScrollHorizontally: T.afterScrollHorizontally(),
    //横向滚动之后
    //列宽改变
    afterColumnResize: T.afterColumnResize()
  };
  /**列宽设置**/
  //默认情况下自适应

  if (data.length === 0) {
    //如果表格没有数据，设置默认宽度，以免表头挤在一起
    vibTable.colWidths = '170';
  } else if (data.length && colWidth !== '') {
    //如果有数据，且拖动表格列宽的情况下，保存为拖动后的列宽
    vibTable.colWidths = colWidth;
  }

  return Object(common_hdtable_js__WEBPACK_IMPORTED_MODULE_1__["default"])(el, vibTable);
}
var TASK_POS = [3, 4, 8, 9, 11, 15, 16]; //振动 包络 振动阶次 包络阶次 倾覆 冲击、冲击阶次

var NORMAL_POS = [1, 2, 7, 5]; //转速、过程量、数组量、温度
//表格的方法

var tableData =
/*#__PURE__*/
function () {
  function tableData(vm) {
    _classCallCheck(this, tableData);

    this.type = vm.type;
    this.getData = vm.getData;
    this.getHot = vm.getHot;
    this.$store = vm.$store;
    this.reload = vm.reload;

    for (var key in vm.initList) {
      this[key] = vm.initList[key];
    }

    for (var _key in vm.changeList) {
      this[_key] = vm.changeList[_key];
    }
  }
  /* 初始化通道选项的方法 */


  _createClass(tableData, [{
    key: "initChannel",
    value: function initChannel(data) {
      var _this = this;

      /* 任务类型的测点初始化 */

      /* 过程量 温度 数字量 转速通道的初始化 */
      if (NORMAL_POS.indexOf(this.type) > -1) {
        data.forEach(function (pos) {
          delete _this.pos_chaList[pos.dgm_id][pos.ch_name];
        });
      }
    }
    /**handsontable 初始化方法
     * ******************************************
     */

  }, {
    key: "contextMenu",
    value: function contextMenu() {
      var that = this;

      if (this.type == 6 || this.type == 12) {
        return;
      } else {
        return {
          items: {
            "row_above": {
              name: '上方新建',
              callback: function callback(key, options) {
                Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["addRows"])(that.getHot(), that.getData(), options[0].start.row);
              }
            },
            "remove_row": {
              name: '删除这行'
            },
            'freeze_column': {
              name: '固定列'
            },
            "unfreeze_column": {
              name: '取消列固定'
            }
          }
        };
      }
    }
    /* 表格的数据渲染 */

  }, {
    key: "colHeaders",
    value: function colHeaders() {
      return Object(_pos_columns_js__WEBPACK_IMPORTED_MODULE_4__["setHeaders"])(this.type);
    } // nestedHeaders() {
    //   return setHeaders(this.type)
    // }

  }, {
    key: "columns",
    value: function columns() {
      return Object(_pos_columns_js__WEBPACK_IMPORTED_MODULE_4__["setColumns"])(this.type, this.getData());
    }
    /* 单元格渲染 */

  }, {
    key: "cells",
    value: function cells() {
      var that = this;
      return function (row, col, prop) {
        var data = that.getData();
        if (data.length == 0) return;
        var type = that.type;
        var cellProperties = this; //0组织名称 1机组名称 2检测采集器

        if (row != -1 && (col == 0 || col == 1 || col == 2)) {
          if (data[row].operate == 1) {
            //operate 1：新建测点  0：已建测点
            cellProperties.readOnly = false;
          } else if (data[row].operate == 0) {
            cellProperties.readOnly = true;
          }
        }
        /* 转速通道 */


        if (type == 1) {
          if (row != -1 && col >= 8) {
            //最大最小转速
            if (data[row].ch_type == 13) {
              cellProperties.readOnly = false;
            } else {
              cellProperties.readOnly = true;
            }
          }
        }
        /* 振动测点 */


        if (type == 3) {
          if (row != -1 && col >= 13) {
            //MHD 屏蔽频段
            if (data[row].dgm_type == 4) {
              cellProperties.readOnly = true;
            } else {
              cellProperties.readOnly = false;
            }
          }
        }
        /* 数字量 */


        if (type == 5) {
          /* V1数字量，计算方式报警禁止修改且置空 */
          if (row != -1 && col == 7 || col == 8 || col == 9) {
            if (data[row].dgm_type == 1 || data[row].dgm_type == 2) {
              cellProperties.readOnly = true;
            } else {
              cellProperties.readOnly = false;
            }
          }
        }
        /* 晃度 和倾角测点测点 */


        if (type == 6 || type == 12) {
          if (row != -1 && (col == 3 || col == 4 || col == 5)) {
            //晃度和倾角的通道禁止编辑 是否有效 测点名称
            cellProperties.readOnly = true;
          } //MHD频段禁止编辑


          if (row != -1 && col >= 14) {
            if (data[row].dgm_type == 4) {
              cellProperties.readOnly = true;
            } else {
              cellProperties.readOnly = false;
            }
          }
        }
        /* 倾覆 */


        if (type == 11) {
          //MHD频段禁止编辑
          if (row != -1 && col >= 22) {
            if (data[row].dgm_type == 4) {
              cellProperties.readOnly = true;
            } else {
              cellProperties.readOnly = false;
            }
          }
        }
        /* 合成倾角 */


        if (type == 13) {
          //18X关联通道 、23Y关联通道,13传感器类型、20X从设备号 、21过程量类型 25Y从设备号、26Y过程量类型
          if (row != -1) {
            if (col == 18 || col == 23 || col == 13 || col == 20 || col == 21 || col == 25 || col == 26) {
              if (data[row].baseInfo.sourceType == 0) {
                //振动通道
                cellProperties.readOnly = true;
              } else {
                cellProperties.readOnly = false;
              }
            }
          } //MHD频段禁止编辑


          if (row != -1 && col >= 28) {
            if (data[row].dgm_type == 4) {
              cellProperties.readOnly = true;
            } else {
              cellProperties.readOnly = false;
            }
          }
        }
        /* 长采样 */


        if (type == 200) {
          /* 新建测点采集方式可以更改 */
          if (row != -1 && col == 4) {
            //
            if (data[row].operate == 1) {
              cellProperties.readOnly = false;
            } else if (data[row].operate == 0) {
              cellProperties.readOnly = true;
            }
          }
          /* 定时采集 */


          if (data[row].baseInfo.capture_mode == 0) {
            if (col == 6) {
              /* 序号可以编辑 */
              cellProperties.readOnly = false;
            }

            if (col == 7) {
              /* 通道禁止编辑 */
              cellProperties.readOnly = true;
            }
          }
          /* 手动采集 */


          if (data[row].baseInfo.capture_mode == 1) {
            if (col == 6) {
              /* 序号禁止编辑 */
              cellProperties.readOnly = true;
            }

            if (col == 7) {
              /* 通道可以编辑 */
              cellProperties.readOnly = false;
            }
          }
        }
        /*tms的测点类型需要加上“数码管显示”字段，其他类型的不可编辑*/


        if (_pos_info_js__WEBPACK_IMPORTED_MODULE_2__["tmsPosList"].includes(type) && prop == 'baseInfo.if_show_val') {
          if (data[row].dgm_type != 7) {
            //非tms采集器的“数码管显示”不可编辑
            cellProperties.readOnly = true;
          } else {
            cellProperties.readOnly = false;
          }
        }

        return cellProperties;
      };
    } // 列宽被改变后

  }, {
    key: "afterColumnResize",
    value: function afterColumnResize() {
      var that = this;
      return function (condition) {
        var hot = that.getHot();
        colWidth = hot.getColWidth(condition); //修改拖动后的列宽
      };
    }
    /* 点击单元格之后输出该行信息（共用） */

  }, {
    key: "afterOnCellMouseUp",
    value: function afterOnCellMouseUp() {
      var that = this;
      return function (e, coords, td) {
        if (coords.row >= 0) {
          var row_info = that.getPositionByIndex(coords.row);
          var linkObj = [row_info.mac_id, row_info.mac_name];
          that.$store.commit('setTreePosition', linkObj);
          console.log(row_info, coords.col);
        }
      };
    }
    /*过滤的方法(有待优化)（共用）*/

  }, {
    key: "afterFilter",
    value: function afterFilter() {
      var that = this;
      return function (condition) {
        var hot = that.getHot(); // let dgm_id_list = [];
        // let dgm_name_list = [];

        var machineList = that.pos_machineList;
        var dgmList = that.pos_dgmList;
        var machine_id_list = [];
        /**
         * 根据 组织、机组、采集器来过滤，最终转化为最小单位为采集器
         */

        condition.forEach(function (item) {
          if (/t_name/.test(hot.colToProp(item.column))) {
            /* 如果过滤的是组织 */
            // item.conditions[0].args[0].forEach(folder_name => { //获取组织名称
            //   let machine = machineList[folder_name]
            //   for(let key in machine){
            //     machine_id_list.push(machine[key].mac_id)
            //   }
            // })
            // dgm_id_list = that.filter_dgmId_byMachineName(machine_id_list);
            // dgm_name_list = that.filter_dgmName_byMachineName(machine_id_list);
            sessionStorage.setItem('filter_tree_name', JSON.stringify(condition));
          }

          if (/mac_me/.test(hot.colToProp(item.column))) {
            // let machine_name_list = item.conditions[0].args[0] //获取机组名称
            // machine_name_list.forEach(mac=>{
            //   for(let t_name in machineList){
            //     for(let mac_name in machineList[t_name]){
            //       if(mac == mac_name){
            //         machine_id_list.push(machineList[t_name][mac_name].mac_id)
            //       }
            //     }
            //   }
            // })
            // dgm_id_list = that.filter_dgmId_byMachineName(machine_id_list);
            // dgm_name_list = that.filter_dgmName_byMachineName(machine_id_list);
            sessionStorage.setItem('filter_mac_name', JSON.stringify(condition));
          }

          if (/dgm_name/.test(hot.colToProp(item.column))) {
            var dgmArray = item.conditions[0].args[0]; //获取采集器名称
            // dgmArray.forEach(dgm_name=>{
            //   for(let macId in dgmList){
            //     for(let dgmName in dgmList[macId]){
            //       if(dgm_name == dgmName){
            //         dgm_id_list.push(dgmList[macId][dgmName].dgm_id);
            //         dgm_name_list.push(dgmName);
            //       }
            //     }
            //   }
            // })

            sessionStorage.setItem('filter_dgm_name', JSON.stringify(condition));
          }
        }); // sessionStorage.setItem('dgm_id', JSON.stringify(dgm_id_list))
        // sessionStorage.setItem('dgm_names', JSON.stringify(dgm_name_list))

        hot.view.wt.wtOverlays.adjustElementsSize(true);
      };
    }
  }, {
    key: "filter_dgmId_byMachineName",
    value: function filter_dgmId_byMachineName(machine_id_list) {
      var dgm_id_list = [];
      var pos_dgmList = this.pos_dgmList;
      machine_id_list.forEach(function (machine_id) {
        for (var key in pos_dgmList[machine_id]) {
          dgm_id_list.push(pos_dgmList[machine_id][key].dgm_id);
        }
      });
      return dgm_id_list;
    }
  }, {
    key: "filter_dgmName_byMachineName",
    value: function filter_dgmName_byMachineName(machine_id_list) {
      var dgm_name_list = [];
      var pos_dgmList = this.pos_dgmList;
      machine_id_list.forEach(function (machine_id) {
        for (var key in pos_dgmList[machine_id]) {
          dgm_name_list.push(key);
        }
      });
      return dgm_name_list;
    } //创建测点之后的方法(共用)

  }, {
    key: "afterCreateRow",
    value: function afterCreateRow() {
      var that = this;
      var type = this.type;
      var creatIndex = 0;
      return function (index, amount, source) {
        //添加行事件
        if (type == 6 || type == 12) {
          //晃度和倾角禁止单独添加
          return;
        }

        var data = that.getData();
        var position = Object(_pos_info_js__WEBPACK_IMPORTED_MODULE_2__["createPosition"])(type); // 默认第一个组织

        var t_sources = Object.keys(that.pos_folderList);
        var t_name = t_sources[0];
        var t_id = that.pos_folderList[t_name];
        position.t_id = t_id;
        position.t_name = t_name;
        position.t_sources = t_sources;
        position.index = creatIndex;
        that.update_t_name(position, t_name);
        data[index] = position;
        /* 将测点添加到addData */

        var sendPosition = Object(_pos_info_js__WEBPACK_IMPORTED_MODULE_2__["changePosition"])(type, position);
        var addData = that.addData;
        addData[creatIndex++] = sendPosition;
      };
    } //删除测点之前的方法,将要删除的测点存到deleteVData（共用）

  }, {
    key: "beforeRemoveRow",
    value: function beforeRemoveRow() {
      var that = this;
      return function (index, amount) {
        if (index != null) {
          for (var i = 0; i < amount; i++) {
            var position = that.getPositionByIndex(index + i);
            that.deleteData.push(position);
          }
        }
      };
    } //删除测点方法 发送请求（共用）

  }, {
    key: "afterRemoveRow",
    value: function afterRemoveRow() {
      var that = this;
      return function () {
        var deleteDataArray = that.beforeRemove();

        if (deleteDataArray) {
          network_getApi__WEBPACK_IMPORTED_MODULE_0__["default"].deletePosition(deleteDataArray).then(function (res) {
            if (res.msg == 0) {
              swal({
                title: "提示",
                text: "\u5220\u9664\u6D4B\u70B9\u6210\u529F",
                button: "确认"
              }).then(function () {
                that.remove_remake(deleteDataArray);
              });
            } else if (res.msg == 1) {
              console.log('参数为空！');
            } else if (res.msg == 2) {
              console.log('后台运行错误！');
            } else if (res.msg == 5) {
              swal({
                title: "提示",
                text: "\u5B58\u5728\u632F\u52A8\u6D4B\u70B9\u7ED1\u5B9A\u8F6C\u901F\u63D0\u53D6\uFF0C\u4E0D\u80FD\u5220\u9664",
                button: "确认"
              }).then(function () {
                that.reload();
              });
            }
          })["catch"](function (err) {
            console.log('请求错误', err);
          });
        }
      };
    }
    /* 自定义-在删除之前组织结构 */

  }, {
    key: "beforeRemove",
    value: function beforeRemove() {
      if (this.deleteData.length == 0) {
        return false;
      }

      var deleteDataArray = [];
      var dataArr = this.deleteData;

      for (var i = 0; i < dataArr.length; i++) {
        var obj = {},
            rock1 = {},
            rock2 = {};
        obj.mac_id = dataArr[i].mac_id;
        obj.position_type = dataArr[i].pos_type;
        obj.position_id = dataArr[i].pos_id;
        obj.position_type_id = dataArr[i].pos_type + "_" + dataArr[i].pos_id;
        deleteDataArray.push(obj);

        if (this.type == 11 || this.type == 13) {
          rock1.mac_id = dataArr[i].mac_id;
          rock1.position_id = dataArr[i].baseInfo.rock1_id;
          rock1.position_type = dataArr[i].pos_type == 11 ? 6 : 12;
          rock1.position_type_id = rock1.position_type + "_" + rock1.position_id;
          deleteDataArray.push(rock1);
          rock2.mac_id = dataArr[i].mac_id;
          rock2.position_id = dataArr[i].baseInfo.rock2_id;
          rock2.position_type = dataArr[i].pos_type == 11 ? 6 : 12;
          rock2.position_type_id = rock2.position_type + "_" + rock2.position_id;
          deleteDataArray.push(rock2);
        }
      }
      /* 如果是倾覆或者是合成倾角测点 ，需要删除下面的子测点*/


      return deleteDataArray;
    }
    /* 横向滚动之后*/

  }, {
    key: "afterScrollHorizontally",
    value: function afterScrollHorizontally() {
      var that = this;
      return function () {
        //修改数据事件
        var wtHolder = document.getElementsByClassName('wtHolder')[0];
        var scrollLeft = wtHolder.scrollLeft;
        var wtWidth = wtHolder.clientWidth;

        if (scrollLeft > wtWidth) {
          //当滚动超出表格宽度之后重新渲染，防止点击表格单元表头错行
          that.getHot().render();
        }
      };
    }
    /**
     * 删除测点之后要做的一些还原素组的方法
     */

  }, {
    key: "remove_remake",
    value: function remove_remake() {
      var delArray = this.deleteData;
      var position,
          isRefresh = false;
      /* 在删除之后还原数组中的task_id (pos_id不重复就行) */

      if (TASK_POS.indexOf(this.type) > -1) {
        for (var i = 0; i < delArray.length; i++) {
          position = delArray[i];
          /* 还原任务 */

          this.clear_taskId(position) && (isRefresh = true);
        }

        isRefresh && this.updateTaskSource();
      } else if (NORMAL_POS.indexOf(this.type) > -1) {
        for (var _i = 0; _i < delArray.length; _i++) {
          position = delArray[_i];
          /* 还原通道 */

          this.restore_channel(position, true);
        }

        this.refresh_channel();
      }
      /* 删除changeData 和addData里面的数据 */


      for (var _i2 = 0; _i2 < delArray.length; _i2++) {
        position = delArray[_i2];

        if (position.operate == 0) {
          //旧测点
          delete this.changeData[position.mac_id + "_" + this.type + "_" + position.pos_id];
        } else if (position.operate == 1) {
          //新建测点
          delete this.addData[position.index];
        }
      }
      /* 重置删除数据的数组 */


      this.deleteData = [];
    }
    /* 还原被删除的通道 */

  }, {
    key: "restore_channel",
    value: function restore_channel(position, del_res) {
      //del_res：true =>删除时候的通道还原
      var dgm_id = position.oldInfo['dgm_id'] ? del_res ? position.dgm_id : position.oldInfo['dgm_id'] : position.dgm_id;
      position.ch_name && (this.pos_chaList[dgm_id][position.ch_name] = {
        "ch_id": position.ch_id,
        "ch_type": position.ch_type
      });
      console.log(position);
    }
    /* 刷新所有的通道 */

  }, {
    key: "refresh_channel",
    value: function refresh_channel() {
      var _this2 = this;

      if (NORMAL_POS.indexOf(this.type) > -1) {
        var data = this.getData(); //遍历data，将所有的task_id_sources都更新

        data.forEach(function (position) {
          //遍历所有数据
          if (position.mac_id) {
            position.oldInfo = {};
            var ch_sources = Object.keys(_this2.pos_chaList[position.dgm_id]);

            if (_this2.pos_chaList[position.dgm_id][position.ch_name] == undefined && position.ch_name) {
              //集合中没自己的通道
              ch_sources.push(position.ch_name);
            }

            ch_sources.sort();
            position.ch_sources = ch_sources;
          }
        });
      }
    } //改变数据的时候拼装数据结构（共用）

  }, {
    key: "beforeChange",
    value: function beforeChange() {
      var that = this;
      return function (changes, source) {
        var hot = that.getHot();
        var change_index;
        var change_prop;
        var change_oldVal;
        var change_newVal;
        var sources;
        var keys; //创建更改组织、机组、采集器、通道、任务的联动实例

        for (var i = 0; i < changes.length; i++) {
          var physicalRow = hot.toPhysicalRow(changes[i][0]);
          var columnVal = hot.propToCol(changes[i][1]);
          change_index = changes[i][0];
          change_prop = changes[i][1];
          change_oldVal = changes[i][2];
          change_newVal = changes[i][3];
          /* 如果选定的值没有改变 返回false */

          if (change_oldVal == change_newVal) {
            continue;
          }

          var reg = new RegExp(/^\d+(\.\d+)?$/); //判断字符串是否为数字

          var regPositiveNum = new RegExp(/^[1-9]+[0-9]*]*$/); // 判断正整数

          var reg2 = new RegExp(/^[+]{0,1}(\d+)$|^[+]{0,1}(\d+\.\d+)$/); //判断正数

          var position = that.getPositionByIndex(change_index);

          if (change_prop == "t_name") {
            //组织
            var t_sources = position.t_sources;

            if (t_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u7EC4\u7EC7"),
                button: "确认"
              });
              return false;
            } else {
              that.update_t_name(position, change_newVal);
            }
          }

          if (change_prop == "mac_me") {
            //机组
            var macName_sources = position.macName_sources;

            if (macName_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u673A\u7EC4"),
                button: "确认"
              });
              return false;
            } else {
              that.update_mac(position, change_newVal);
            }
          }

          if (change_prop == "dgm_name") {
            //采集器
            var dgm_sources = position.dgm_sources;

            if (dgm_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u91C7\u96C6\u5668"),
                button: "确认"
              });
              return false;
            } else {
              that.update_dgm(position, change_newVal);

              if (position.dgm_type != 7) {
                //非tms采集器这个属性值置空
                position.baseInfo.if_show = ''; //数码管显示

                position.baseInfo.if_show_val = ''; //数码管显示
              } else {
                position.baseInfo.if_show = '0'; //数码管显示

                position.baseInfo.if_show_val = '不显示'; //数码管显示
              }
            }
          }

          if (change_prop == "ch_name") {
            //通道
            var ch_sources = position.ch_sources;

            if (ch_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u901A\u9053"),
                button: "确认"
              });
              return false;
            } else {
              that.update_channel(position, change_newVal);
            }
          }

          if (change_prop == "task_id_val") {
            //任务
            var task_id_sources = position.task_id_sources;

            if (change_newVal === "") {
              return false;
            } //任务未做修改的时候，保持原样


            if (task_id_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u4EFB\u52A1"),
                button: "确认"
              });
              return false;
            } else {
              that.update_taskId(position, change_newVal);
            }
          }

          if (change_prop == "baseInfo.filter_val") {
            //滤波器 包络测点
            var filter_sources = position.baseInfo.filter_sources;

            if (filter_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u6EE4\u6CE2\u5668"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.filter_sources;
              keys = position.baseInfo.filter_sources_key;
              position.baseInfo.filter_val = change_newVal;
              position.baseInfo.filter = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
              /* 更改滤波器的时候改变分析频率 */

              that.update_frequency_spectral_sources(position);
            }
          }

          if (change_prop == "baseInfo.frequency_val") {
            // 分析频率 采样周期
            var frequency_sources = position.baseInfo.frequency_sources;

            if (frequency_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u5206\u6790\u9891\u7387"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.frequency_sources;
              keys = position.baseInfo.frequency_sources_key;
              position.baseInfo.frequency_val = change_newVal;
              position.baseInfo.frequency = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
              Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["computed__frequency_spectral"])(position);
            }
          }

          if (change_prop == "baseInfo.spectral") {
            //谱线数 采样点数
            var spectral_sources = position.baseInfo.spectral_sources;

            if (spectral_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u8C31\u7EBF\u6570"),
                button: "确认"
              });
              return false;
            } else {
              position.baseInfo.spectral = change_newVal;
              Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["computed__frequency_spectral"])(position);
            }
          }

          if (change_prop == "pos_activity_val") {
            //是否有效
            var pos_activity_sources = position.pos_activity_sources;

            if (pos_activity_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u503C"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.pos_activity_sources;
              keys = position.pos_activity_sources_key;
              position.pos_activity_val = change_newVal;
              position.pos_activity = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          if (change_prop == "isalarm_val") {
            //是否报警
            var isalarm_sources = position.isalarm_sources;

            if (isalarm_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u503C"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.isalarm_sources;
              keys = position.isalarm_sources_key;
              position.isalarm_val = change_newVal;
              position.isalarm = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          if (change_prop == "baseInfo.resampling_val") {
            //过采样
            var resampling_sources = position.baseInfo.resampling_sources;

            if (resampling_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u503C"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.resampling_sources;
              keys = position.baseInfo.resampling_sources_key;
              position.baseInfo.isalarm_val = change_newVal;
              position.baseInfo.resampling = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          for (var _i3 = 0; _i3 < 8; _i3++) {
            if (change_prop == "baseInfo.band".concat(_i3, ".optfreq_type_val")) {
              //频段
              var optfreq_type_sources = position.baseInfo["band".concat(_i3)].optfreq_type_sources;

              if (optfreq_type_sources.indexOf(change_newVal) == -1) {
                swal({
                  title: "提示",
                  text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u9891\u6BB5\u7C7B\u578B"),
                  button: "确认"
                });
                return false;
              } else {
                sources = position.baseInfo["band".concat(_i3)].optfreq_type_sources;
                keys = position.baseInfo["band".concat(_i3)].optfreq_type_sources_key;
                position.baseInfo["band".concat(_i3)].optfreq_type_val = change_newVal;
                position.baseInfo["band".concat(_i3)].optfreq_type = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
              }
            }
          }

          if (change_prop == "baseInfo.datamode1_val") {
            //过程量1 合成倾角
            var datamode1_val_sources = position.baseInfo.datamode1_sources;

            if (datamode1_val_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u8FC7\u7A0B\u91CF\u7C7B\u578B"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.datamode1_sources;
              keys = position.baseInfo.datamode1_sources_key;
              position.baseInfo.datamode1_val = change_newVal;
              position.baseInfo.datamode1 = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          if (change_prop == "baseInfo.datamode2_val") {
            //过程量2合成倾角
            var datamode2_val_sources = position.baseInfo.datamode2_sources;

            if (datamode2_val_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u8FC7\u7A0B\u91CF\u7C7B\u578B"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.datamode2_sources;
              keys = position.baseInfo.datamode2_sources_key;
              position.baseInfo.datamode2_val = change_newVal;
              position.baseInfo.datamode2 = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          if (change_prop == "baseInfo.rock1_ch_name") {
            //倾角X关联通道名称
            var rock1_ch_name_sources = position.baseInfo.rock1_ch_sources;

            if (rock1_ch_name_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u5173\u8054\u901A\u9053X"),
                button: "确认"
              });
              return false;
            } else {
              that.update_rock_ch(position, change_newVal);
            }
          }

          if (change_prop == "baseInfo.rock2_ch_name") {
            //倾角Y关联通道名称
            var rock2_ch_name_sources = position.baseInfo.rock2_ch_sources;

            if (rock2_ch_name_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u5173\u8054\u901A\u9053Y"),
                button: "确认"
              });
              return false;
            } else {
              that.update_rock_ch(position, change_newVal);
            }
          }

          if (change_prop == "baseInfo.sourceType_val") {
            //数据来源 合成倾角
            var sourceType_val_sources = position.baseInfo.sourceType_sources;

            if (sourceType_val_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u4F20\u6570\u636E\u6765\u6E90"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.sourceType_sources;
              keys = position.baseInfo.sourceType_sources_key;
              position.baseInfo.sourceType = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
              that.update_sourceType(position);
            }
          }

          if (change_prop == "baseInfo.dip_model_val") {
            //传感器类型 合成倾角
            var dip_model_val_sources = position.baseInfo.dip_model_sources;

            if (dip_model_val_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u4F20\u611F\u5668\u7C7B\u578B"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.dip_model_sources;
              keys = position.baseInfo.dip_model_sources_key;
              position.baseInfo.dip_model_val = change_newVal;
              position.baseInfo.dip_model = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          if (change_prop == "baseInfo.calc_method_val") {
            //计算方式 数字量测点
            var calc_method_val_sources = position.baseInfo.calc_method_sources;

            if (calc_method_val_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u8BA1\u7B97\u65B9\u5F0F"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.calc_method_sources;
              keys = position.baseInfo.calc_method_sources_key;
              position.baseInfo.calc_method_val = change_newVal;
              position.baseInfo.calc_method = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          if (change_prop == "baseInfo.datamode_val") {
            //过程量类型  工艺量测点
            var datamode_val_sources = position.baseInfo.datamode_sources;

            if (datamode_val_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u8FC7\u7A0B\u91CF\u7C7B\u578B"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.datamode_sources;
              keys = position.baseInfo.datamode_sources_key;
              position.baseInfo.datamode_val = change_newVal;
              position.baseInfo.datamode = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }
          /* 长采样的序号、关联通道、 采集方式*/


          if (change_prop == "baseInfo.method_val") {
            //采集方式 长采样测点
            var method_val = position.baseInfo.method_sources;

            if (method_val.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u91C7\u96C6\u65B9\u5F0F"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.method_sources;
              keys = position.baseInfo.method_sources_key;
              position.baseInfo.method_val = change_newVal;
              position.baseInfo.capture_mode = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
              /* 方法：选择对应通道更改关联通道 */

              that.capture_mode(position);
            }
          }

          if (change_prop == "baseInfo.capture_byId") {
            //序号 长采样测点
            var capture_sources = position.baseInfo.capture_sources;

            if (capture_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u5E8F\u53F7"),
                button: "确认"
              });
              return false;
            } else {
              that.update_capCh_byNumber(position, change_newVal);
            }
          }

          if (change_prop == "baseInfo.capture_chName") {
            //通道名字 长采样测点
            var capture_chName_sources = position.baseInfo.capture_chName_sources;

            if (capture_chName_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u901A\u9053"),
                button: "确认"
              });
              return false;
            } else {
              that.update_channel(position, change_newVal);
            }
          }
          /* 振动测点微信报警参数 */


          if (change_prop == "baseInfo.levelRms") {
            //过滤阈值：这个可以填小数
            var val = Number(change_newVal);

            if (change_newVal === '') {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8FC7\u6EE4\u9608\u503C\u4E0D\u80FD\u4E3A\u7A7A"),
                button: "确认"
              });
              return false;
            }

            if (!reg.test(val)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6570\u5B57"),
                button: "确认"
              });
              return false;
            }
          }

          if (change_prop == "baseInfo.areaRatio") {
            //增长百分比：正数，填20，就是20%的意思
            if (change_newVal === '') {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u589E\u957F\u767E\u5206\u6BD4\u4E0D\u80FD\u4E3A\u7A7A"),
                button: "确认"
              });
              return false;
            }

            if (!reg2.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6B63\u6570"),
                button: "确认"
              });
              return false;
            }
          }

          if (change_prop == "baseInfo.sampHours") {
            //平均值计算时间：正整数，多少小时的意思
            if (change_newVal === '') {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u5E73\u5747\u503C\u8BA1\u7B97\u65F6\u95F4\u4E0D\u80FD\u4E3A\u7A7A"),
                button: "确认"
              });
              return false;
            }

            if (!regPositiveNum.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6B63\u6574\u6570"),
                button: "确认"
              });
              return false;
            }
          }

          if (change_prop == "baseInfo.death_time") {
            //死区时间，单位小时，新增：正整数
            if (change_newVal === '') {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u6B7B\u533A\u65F6\u95F4\u4E0D\u80FD\u4E3A\u7A7A"),
                button: "确认"
              });
              return false;
            }

            if (!regPositiveNum.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6B63\u6574\u6570"),
                button: "确认"
              });
              return false;
            }
          }

          if (change_prop == "baseInfo.packn") {
            //连续n包，新增：正整数
            if (change_newVal === '') {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8FDE\u7EEDn\u5305\u4E0D\u80FD\u4E3A\u7A7A"),
                button: "确认"
              });
              return false;
            }

            if (!regPositiveNum.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6B63\u6574\u6570"),
                button: "确认"
              });
              return false;
            }
          }

          if (change_prop == "baseInfo.alarm_smooth_a") {
            //报警投票机制a，新增：正整数
            if (change_newVal === '') {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u62A5\u8B66\u6295\u7968\u673A\u5236a\u4E0D\u80FD\u4E3A\u7A7A"),
                button: "确认"
              });
              return false;
            }

            if (!regPositiveNum.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6B63\u6574\u6570"),
                button: "确认"
              });
              return false;
            }
          }

          if (change_prop == "baseInfo.alarm_smooth_b") {
            //报警投票机制b，新增：正整数
            if (change_newVal === '') {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u62A5\u8B66\u6295\u7968\u673A\u5236b\u4E0D\u80FD\u4E3A\u7A7A"),
                button: "确认"
              });
              return false;
            }

            if (!regPositiveNum.test(change_newVal)) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u8BF7\u8F93\u5165\u6B63\u6574\u6570"),
                button: "确认"
              });
              return false;
            }
          }

          if (change_prop == "baseInfo.if_show_val") {
            //数码管显示
            var if_show_sources = position.baseInfo.if_show_sources;

            if (if_show_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u9009\u9879"),
                button: "确认"
              });
              return false;
            } else {
              position.baseInfo.if_show_val = change_newVal;
              position.baseInfo.if_show = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, position.baseInfo.if_show_sources, position.baseInfo.if_show_sources_key);
            }
          }

          if (change_prop == "baseInfo.trendAlarm_val") {
            //趋势报警特征值
            var trendAlarm_sources = position.baseInfo.trendAlarm_sources;

            if (trendAlarm_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u7279\u5F81\u503C"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.trendAlarm_sources;
              keys = position.baseInfo.trendAlarm_sources_key;
              position.baseInfo.trendAlarm_val = change_newVal;
              position.baseInfo.trendAlarm = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          if (change_prop == "baseInfo.sensor_id_val") {
            //传感器类型
            var sensorId_sources = position.baseInfo.sensorId_sources;

            if (sensorId_sources.indexOf(change_newVal) == -1) {
              swal({
                title: "提示",
                text: "\u7B2C".concat(change_index + 1, "\u884C\u4E0D\u5B58\u5728\u8BE5\u4F20\u611F\u5668\u7C7B\u578B"),
                button: "确认"
              });
              return false;
            } else {
              sources = position.baseInfo.sensorId_sources;
              keys = position.baseInfo.sensorId_sources_key;
              position.baseInfo.sensor_id_val = change_newVal;
              position.baseInfo.sensor_id = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(change_newVal, sources, keys);
            }
          }

          hot.setCellMeta(changes[i][0], columnVal, 'className', 'red-color');
        }
      };
    } //改变数据后的方法 （共用）

  }, {
    key: "afterChange",
    value: function afterChange() {
      var that = this;
      return function (changes, source) {
        //修改数据事件
        var changeData = that.changeData;
        var addData = that.addData;

        if (changes) {
          changes.forEach(function (change) {
            var position = that.getPositionByIndex(change[0]);
            var sendPosition = Object(_pos_info_js__WEBPACK_IMPORTED_MODULE_2__["changePosition"])(that.type, position);

            if (position.operate == 0) {
              changeData[position.mac_id + "_" + that.type + "_" + position.pos_id] = sendPosition;
            } else if (position.operate == 1) {
              addData[position.index] = sendPosition;
            }
          });
        }
      };
    }
    /* beforeRender: ()=>{
          },
        afterRender: ()=>{
      },  */

    /**
     * 工具方法
     * ************************************************
     */

    /* 根据索引行获取真实数据和物理行 (共用)*/

  }, {
    key: "getPositionByIndex",
    value: function getPositionByIndex(index) {
      var hot = this.getHot();
      var data = this.getData();
      var physicalRow = hot.toPhysicalRow(index);
      var info = data[physicalRow];
      return info;
    }
    /* 改变组织 */

  }, {
    key: "update_t_name",
    value: function update_t_name(position, t_name) {
      position.t_name = t_name;
      position.t_id = this.pos_folderList[t_name];
      this.update_mac_source(position);
    }
    /* 更改机组源 */

  }, {
    key: "update_mac_source",
    value: function update_mac_source(position) {
      var pos_machineList = this.pos_machineList[position.t_name];
      var macName_source = Object.keys(pos_machineList);
      position.macName_sources = macName_source; //保存机组源
      //选取第一个机组为默认机组

      var mac_me = macName_source[0];
      this.update_mac(position, mac_me);
    }
    /* 更改机组 */

  }, {
    key: "update_mac",
    value: function update_mac(position, mac_me) {
      position.mac_me = mac_me;
      position.mac_id = this.pos_machineList[position.t_name][mac_me].mac_id;
      position.m_type = this.pos_machineList[position.t_name][mac_me].m_type; //在更改机组的时候更改测点ID

      position.pos_id = this.setPosId(position.mac_id);

      if (this.type == 11 || this.type == 13) {
        //如果是倾覆和合成倾角还需要为两个晃度或倾角测点添加ID

        /* tt_ch_id */
        position.baseInfo.tt_ch_id = position.pos_id;
        position.baseInfo.rock1_id = this.set_rock_posId(position.mac_id);
        position.baseInfo.rock2_id = this.set_rock_posId(position.mac_id);
      } //更改采集器源


      this.update_dgm_source(position);
    }
    /* 更改采集器源 */

  }, {
    key: "update_dgm_source",
    value: function update_dgm_source(position) {
      var pos_dgmList = this.pos_dgmList[position.mac_id];
      var dgmName_sources = Object.keys(pos_dgmList);
      position.dgm_sources = dgmName_sources; //保存采集器源
      //选取第一个采集器为默认采集器

      var dgm_name = dgmName_sources[0];
      this.update_dgm(position, dgm_name);
    }
    /* 更改采集器 */

  }, {
    key: "update_dgm",
    value: function update_dgm(position, dgm_name) {
      /* 记录旧采集器的信息 */
      position.oldInfo['dgm_id'] = position.dgm_id;
      position.oldInfo['dgm_name'] = position.dgm_name;
      position.dgm_name = dgm_name;
      position.dgm_id = this.pos_dgmList[position.mac_id][dgm_name].dgm_id;
      position.dgm_type = this.pos_dgmList[position.mac_id][dgm_name].dgm_type;
      var arr = [3, 4, 6, 8, 9, 11, 12, 13, 15, 16]; //振动、 包络、 阶次、 晃度、 倾覆、 倾角 、 合成倾角,冲击

      if (arr.indexOf(this.type) > -1) {
        //在更改采集器的时候更改分析频率和谱线数(如果有谱线数的话)
        this.update_frequency_spectral_sources(position);
      } //更改通道源


      this.update_ch_source(position); //更改数码管显示

      if (_pos_info_js__WEBPACK_IMPORTED_MODULE_2__["tmsPosList"].includes(this.type)) {
        this.setIfShow(position);
      }
    }
    /* 更改采集器 -> 更改通道源并选择默认通道 */

  }, {
    key: "update_ch_source",
    value: function update_ch_source(position) {
      var chList = this.pos_chaList[position.dgm_id];
      var ch_sources = [];
      var ch_name;

      if (this.type == 200) {
        //长采样测点
        this.capture_mode(position);
      } else {
        //其他类型测点
        if (this.type == 11) {
          //倾覆的可选通道只有塔顶和机舱
          ch_sources = _pos_info_js__WEBPACK_IMPORTED_MODULE_2__["over_pos_loc_ch"]; // ch_sources = ['机舱','塔顶','塔筒1',"塔筒2","塔筒3","塔筒4","塔筒5"]
        } else if (this.type == 13) {
          ch_sources = _pos_info_js__WEBPACK_IMPORTED_MODULE_2__["syn_pos_loc_ch"];
        } else {
          ch_sources = Object.keys(chList);
        }

        position.ch_sources = ch_sources.sort(); //保存通道源
        //选取第一个通道为默认通道

        if (ch_sources.length == 0) {
          ch_name = "";
        } else {
          ch_name = ch_sources[0];
        }

        this.update_channel(position, ch_name);
      }
    }
    /* 更改通道 */

  }, {
    key: "update_channel",
    value: function update_channel(position, ch_name) {
      position.oldInfo["ch_id"] = position.ch_id;
      position.oldInfo['ch_name'] = position.ch_name;
      position.oldInfo['ch_type'] = position.ch_type;
      /* 温度、过程量、转速、数字量测点 */

      var flag = NORMAL_POS.indexOf(this.type) > -1;
      /* 普通类型测点，需要删除通道 */

      if (flag && position.ch_id !== '') {
        /* 之前的通道，先要在数组中还原之前的通道 */
        this.restore_channel(position);
      }
      /* 所有测点-设置新的通道 */


      this.set_channel(position, ch_name, flag);
      /* 任务类测点 */

      if (TASK_POS.indexOf(this.type) > -1) {
        /* 清空任务是否更改了数组，要全部遍历 */
        this.clear_taskId(position) && this.updateTaskSource(position);
        /* 为这个测点设置选项 */

        var source = this.task_idSources[position.dgm_id][position.ch_name];
        position.task_id_sources = Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["taskArray"])(source);
      }
      /* 倾覆和倾角测点用其他方法 */


      if (this.type == 11 || this.type == 13) {
        this.update_virtual_chaName(position);
      }
    }
    /* 通道的值的设置 */

  }, {
    key: "set_channel",
    value: function set_channel(position, ch_name, del_pos) {
      //del 4种类型换通道的时候要将通道删除
      if (ch_name === "" || ch_name === undefined) {
        //采集器下面没有通道，直接返回
        position.ch_id = position.ch_name = position.ch_type = "";
      } else {
        position.ch_name = ch_name;
        position.ch_id = this.pos_chaList[position.dgm_id][ch_name].ch_id;
        position.ch_type = this.pos_chaList[position.dgm_id][ch_name].ch_type;
        /* 如果是要删除通道的测点 */

        if (del_pos) {
          delete this.pos_chaList[position.dgm_id][ch_name];
        }
      }

      this.refresh_channel();
    }
    /* 改变任务  "" 空为没有任务*/

  }, {
    key: "update_taskId",
    value: function update_taskId(position, task_val) {
      var task_id = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(task_val, position.task_id_choose, position.task_id_choose_key);
      /* 设置新值 */

      this.set_taskId(position, task_id, task_val, this.clear_taskId(position));
    }
    /* 清空任务 */

  }, {
    key: "clear_taskId",
    value: function clear_taskId(position) {
      var isChange = false;
      position.oldInfo['task_id'] = position.task_id;
      position.task_id = position.task_id_val = '';
      /* 之前存在任务，还原 */

      if (position.oldInfo['task_id'] !== "") {
        var dgm_id = position.oldInfo['dgm_id'] || position.dgm_id;
        var ch_name = position.oldInfo['ch_name'] || position.ch_name;
        this.task_idSources[dgm_id][ch_name].push(position.oldInfo['task_id']);
        /* 如果是删除测点，就遍历全部测点的任务 */

        isChange = true; //测点修改，需要遍历
      }

      position.oldInfo = {}; //将信息置空

      return isChange;
    }
  }, {
    key: "set_taskId",
    value: function set_taskId(position, task_id, task_val, isChange) {
      /* 无新任务 */
      if (task_id === undefined || task_id === "") {
        if (!isChange) return; //无旧任务，直接返回
      } else {
        var source = this.task_idSources[position.dgm_id][position.ch_name];
        source.splice(source.indexOf(task_id), 1);
        position.task_id = task_id;
        position.task_id_val = task_val;
      }
      /* 刷新所有测点的任务 */


      this.updateTaskSource();
    }
    /* 遍历全部测点，更新任务 */

  }, {
    key: "updateTaskSource",
    value: function updateTaskSource() {
      var data = this.getData();
      var task_idSources = this.task_idSources;
      /* 新建测点的时候，这个测点不在data中 */

      var self_task_id_sources; //遍历data，将所有的task_id_sources都更新

      data.forEach(function (position) {
        //遍历所有数据
        if (position.mac_id) {
          //新建的测点
          if (position.ch_id === "") return;
          self_task_id_sources = _toConsumableArray(task_idSources[position.dgm_id][position.ch_name]); //克隆这个数组

          if (position.task_id !== "") {
            //如果自己的task_id为空则不添加
            self_task_id_sources.push(position.task_id); //加入自己的id
          }

          position.task_id_sources = Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["taskArray"])(self_task_id_sources); //将任务转化为文字
        }
      });
    }
    /* 更改采集器联动更改分析频率和谱线数 */

  }, {
    key: "update_frequency_spectral_sources",
    value: function update_frequency_spectral_sources(position) {
      var frequency_object = Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["frequencySources"])(position, position.baseInfo.filter);
      position.baseInfo.frequency = Object.keys(frequency_object)[0]; //取第一个值

      position.baseInfo.frequency_val = Object.values(frequency_object)[0];
      position.baseInfo.frequency_sources = Object.values(frequency_object);
      position.baseInfo.frequency_sources_key = Object.keys(frequency_object);
      position.baseInfo.spectral = Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["spectralSources"])(position.dgm_type, position.pos_type)[0];
      position.baseInfo.spectral_sources = Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["spectralSources"])(position.dgm_type, position.pos_type);
      Object(_pos_methods_js__WEBPACK_IMPORTED_MODULE_3__["computed__frequency_spectral"])(position);
    }
    /* 长采样测点 */

  }, {
    key: "capture_mode",
    value: function capture_mode(position) {
      var capture_mode = position.baseInfo.capture_mode;

      if (capture_mode == 0) {
        //定时长采样
        this.update_cap_number(position);
      } else if (capture_mode == 1) {
        //手动长采样
        this.update_cap_channel(position);
      }
    }
    /* 定时采样 更改长采样的序号源 */

  }, {
    key: "update_cap_number",
    value: function update_cap_number(position) {
      /*  清空关联通道和通道源 */
      position.baseInfo.capture_byId = "";
      position.baseInfo.capture_sources = [];
      position.baseInfo.capture_chName = "";
      var chList = this.cap_sequenceNum[position.dgm_id];
      var sequenceNums = Object.keys(chList);
      position.baseInfo.capture_sources = sequenceNums; //选定的一个序号

      this.update_capCh_byNumber(position, sequenceNums[0]);
    }
    /* 长采样根据序号改变关联通道 */

  }, {
    key: "update_capCh_byNumber",
    value: function update_capCh_byNumber(position, capture_byId) {
      if (typeof capture_byId !== "undefined") {
        //如果有选中的序号
        position.baseInfo.capture_byId = capture_byId;
        /* 获取序号对应的振动通道ID */

        var vib_id = this.cap_sequenceNum[position.dgm_id][capture_byId].vib_id;
        /* 获取振动通道的name */

        var ch_name = this.cap_chaList[position.dgm_id][vib_id].ch_name;
        position.baseInfo.capture_chName = ch_name;
        this.update_channel(position, ch_name);
      }
    }
    /* 手动采样 更改长采样的通道 */

  }, {
    key: "update_cap_channel",
    value: function update_cap_channel(position) {
      /* 清空序号 */
      position.baseInfo.capture_byId = "1";
      position.baseInfo.capture_sources = [];
      /* 更改关联通道源 */

      var ch_sources = Object.keys(this.pos_chaList[position.dgm_id]).sort();
      position.baseInfo.capture_chName = ch_sources[0];
      position.baseInfo.capture_chName_sources = ch_sources; //保存通道源

      /* 保存选定通道的 type name id*/

      this.update_channel(position, ch_sources[0]);
    }
    /* 更改倾覆等虚拟通道 */

  }, {
    key: "update_virtual_chaName",
    value: function update_virtual_chaName(position) {
      /* 改变通道ID */
      var sources = position.baseInfo.tt_pos_loc_source;
      var keys = position.baseInfo.tt_pos_loc_source_key;
      position.baseInfo.tt_pos_loc = Object(utils_utils__WEBPACK_IMPORTED_MODULE_5__["find_key"])(position.ch_name, sources, keys);

      if (this.type == 11) {
        //倾覆测点

        /* 判断选中的虚拟通道下面有没有 rock_ch，没有则置空 */
        this.updateRock(position);
      } else if (this.type == 13) {
        //合成倾角
        position.baseInfo.sourceType = 5; //改变数据源默认为串口

        this.update_sourceType(position);
      }
    }
    /* 合成倾角测点 */

    /* 更改合成倾角的数据来源 */

  }, {
    key: "update_sourceType",
    value: function update_sourceType(position) {
      /* 串口 */
      var ch_name;
      var sourceType = position.baseInfo.sourceType;

      if (sourceType == 5) {
        position.baseInfo.sourceType_val = "串口";
        /* 选择串口通道 */

        var moduleList = this.rock_chaList[position.dgm_id]['module_name'];
        var source = Object.keys(moduleList);
        /* 更改通道源 */

        position.baseInfo.rock1_ch_sources = position.baseInfo.rock2_ch_sources = source;
        /* 选择第一个通道为默认通道 */

        ch_name = source[0];
        this.update_rock_ch(position, ch_name);
      }
      /* 振动 */


      if (sourceType == 0) {
        this.updateRock(position);
      }
      /* 串口和振动的分析频率不同 */


      this.update_frequency_spectral_sources(position);
    }
    /* 串口的条件下更改rock_ch */

  }, {
    key: "update_rock_ch",
    value: function update_rock_ch(position, ch_name) {
      var moduleList = this.rock_chaList[position.dgm_id]['module_name'];
      position.baseInfo.rock1_ch_name = position.baseInfo.rock2_ch_name = ch_name;
      position.baseInfo.rock1_ch_id = position.baseInfo.rock2_ch_id = moduleList[ch_name].ch_id;
      position.baseInfo.rock1_ch_type = position.baseInfo.rock2_ch_type = moduleList[ch_name].ch_type;
    }
    /* 倾覆测点 */

    /* 根据倾覆的通道自动计算出 晃度xy的通道 */

  }, {
    key: "updateRock",
    value: function updateRock(position) {
      var list1 = this.rock_chaList[position.dgm_id][position.ch_name + "X"];
      var list2 = this.rock_chaList[position.dgm_id][position.ch_name + "Y"];

      if ($.isEmptyObject(list1)) {
        //如果是空对象，把rock_ch通道置空
        position.baseInfo.rock1_ch_name = '';
        position.baseInfo.rock1_ch_id = '';
        position.baseInfo.rock1_ch_type = '';
        position.baseInfo.rock2_ch_name = '';
        position.baseInfo.rock2_ch_id = '';
        position.baseInfo.rock2_ch_type = '';
      } else {
        position.baseInfo.rock1_ch_name = list1.ch_name;
        position.baseInfo.rock1_ch_id = list1.ch_id;
        position.baseInfo.rock1_ch_type = list1.ch_type;
        position.baseInfo.rock2_ch_name = list2.ch_name;
        position.baseInfo.rock2_ch_id = list2.ch_id;
        position.baseInfo.rock2_ch_type = list2.ch_type;
      }
    }
    /* 设置测点ID */

  }, {
    key: "setPosId",
    value: function setPosId(macId) {
      var arr = this.mac_pos_id_list[macId];
      var pos_id; //遍历数组，undefined的就进去站位

      if (arr.length > 0) {
        for (var i = 0; i < arr.length; i++) {
          if (arr[i] == undefined) {
            pos_id = i;
            arr[i] = pos_id;
            break;
          }
        }
      } //如果数组是满的，就在数组后面加1就是pos_id


      if (!pos_id) {
        pos_id = arr.length;
        arr[pos_id] = pos_id;
      }

      return pos_id;
    }
    /* 设置rock 测点ID */

  }, {
    key: "set_rock_posId",
    value: function set_rock_posId(macId) {
      var arr = this.rock_pos_id_list[macId];
      var pos_id; //遍历数组，undefined的就进去站位

      if (arr.length > 0) {
        for (var i = 0; i < arr.length; i++) {
          if (arr[i] == undefined) {
            pos_id = i;
            arr[i] = pos_id;
            break;
          }
        }
      } //如果数组是满的，就在数组后面加1就是pos_id


      if (!pos_id) {
        pos_id = arr.length;
        arr[pos_id] = pos_id;
      }

      return pos_id;
    }
    /* 设置数码管显示 */

  }, {
    key: "setIfShow",
    value: function setIfShow(position) {
      if (position.dgm_type != 7) {
        //非tms采集器这个属性值置空
        position.baseInfo.if_show = ''; //数码管显示

        position.baseInfo.if_show_val = ''; //数码管显示
      } else {
        position.baseInfo.if_show = '0'; //数码管显示

        position.baseInfo.if_show_val = '不显示'; //数码管显示
      }
    }
  }, {
    key: "deepClone",
    value: function deepClone(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
  }]);

  return tableData;
}();
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! sweetalert */ "./node_modules/sweetalert/dist/sweetalert.min.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./src/components/content/system/position/table/js/pos_mixin.js":
/*!**********************************************************************!*\
  !*** ./src/components/content/system/position/table/js/pos_mixin.js ***!
  \**********************************************************************/
/*! exports provided: posMixin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($, swal) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "posMixin", function() { return posMixin; });
/* harmony import */ var _pos_hdtable_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pos_hdtable.js */ "./src/components/content/system/position/table/js/pos_hdtable.js");
/* harmony import */ var _pos_info_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./pos_info.js */ "./src/components/content/system/position/table/js/pos_info.js");
/* harmony import */ var _pos_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pos_methods */ "./src/components/content/system/position/table/js/pos_methods.js");
/* harmony import */ var _components_content_system_dgm_table_js_dgm_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/content/system/dgm/table/js/dgm_methods */ "./src/components/content/system/dgm/table/js/dgm_methods.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }





var posMixin = {
  inject: ['reload'],
  //组件的局部加载
  data: function data() {
    return {
      hot: {},
      //hottable对象
      data: [],
      //hottable的data数据
      initList: {
        pos_folderList: {},
        //所有的组织列表
        pos_machineList: {},
        //所有的机组列表
        pos_dgmList: {},
        //所有的采集器列表
        pos_chaList: {},
        //所有的通道列表，根据name来查询
        cap_chaList: {},
        //长采样序号对应振动的通道列表，根据ID来查询
        cap_sequenceNum: {},
        //长采样序号列表
        rock_chaList: {},
        //晃度通道对应列表
        mac_pos_id_list: [],
        //机组对应测点表{机组：[]}
        rock_pos_id_list: [],
        //存晃度和倾角的pos_id列表
        rock_list: {},
        //存放倾覆或合成倾角带的晃度或者倾角测点
        task_idSources: {} //任务的统计列表 {dgm_id:{ch_id:{[task_id_sources],[indexs]}}}

      },
      changeList: {
        changeData: {},
        //修改的数据
        deleteData: [],
        //删除的数据
        addData: {} //新增的数据

      },
      scroll: 0 //滚动距离

    };
  },
  //销毁的时候清除位置
  destroyed: function destroyed() {
    this.$store.commit('clearSroll', 'position');
  },
  //进入的时候恢复scoll位置
  activated: function activated() {
    var wtHolder = document.getElementsByClassName('wtHolder')[0];

    if (wtHolder) {
      var state = this.$store.state.scroll['position'][this.type];
      wtHolder.scrollTop = state === undefined ? 0 : state.scrollTop;
      wtHolder.scrollLeft = state === undefined ? 0 : state.scrollLeft;
    }
  },
  beforeRouteLeave: function beforeRouteLeave(to, from, next) {
    if (!$.isEmptyObject(this.changeList.changeData) || !$.isEmptyObject(this.changeList.addData)) {
      swal({
        title: "警告",
        text: "".concat(Object(_pos_methods__WEBPACK_IMPORTED_MODULE_2__["posType_name"])(this.type), "\u6570\u636E\u4FEE\u6539\u672A\u4FDD\u5B58"),
        buttons: {
          sure: "确认",
          cancel: "取消"
        },
        dangerMode: true
      }).then(function (willDelete) {
        if (willDelete) {
          next();
        } else {
          window.history.go(1);
        }
      });
    } else {
      next();
    }
  },
  //离开的时候提示修改数据
  // deactivated() {
  //   if (!$.isEmptyObject(this.changeList.changeData) || !$.isEmptyObject(this.changeList.addData)) {
  //     swal({
  //       title: "提示",
  //       text: `${posType_name(this.type)}数据修改未保存`,
  //       button: "确认"
  //     })
  //   }
  // },
  mounted: function mounted() {
    this.getListData(this.type);
  },
  methods: {
    getListData: function getListData(type) {
      var _this = this;

      this.$getApi.queryPositionInfo(type, this.$store.state.tids).then(function (res) {
        var result = Object(_pos_info_js__WEBPACK_IMPORTED_MODULE_1__["getPositionInfo"])(res, type); //有点问题

        console.log(result);

        if (!result) {
          _this.$emit("child-msg", _this.type, false); //没有机组显示提示

        } else {
          var _result = _objectSpread({}, result),
              data = _result.data,
              invalidPos = _result.invalidPos,
              initList = _objectWithoutProperties(_result, ["data", "invalidPos"]);

          if (invalidPos.length) {
            //如果有失效测点则 发送父组件处理
            _this.$emit("invalidPosM", invalidPos);
          }

          _this.data = data;
          _this.initList = initList; //渲染表格

          _this.$emit("child-msg", _this.type, true); // this.filter_by_dgmName()


          _this.renderTable();
          /* 将默认的第一个机组发送个树状图 */


          if (_this.data.length > 0) {
            var linkObj = [_this.data[0].mac_id];

            _this.$store.commit('setTreePosition', linkObj);
          }
        }
      })["catch"](function (err) {
        console.log('请求错误', err);
      });
    },

    /* 渲染表格 */
    renderTable: function renderTable() {
      var HotTable = document.getElementById('HotTable'); //创建table

      this.hot = new _pos_hdtable_js__WEBPACK_IMPORTED_MODULE_0__["default"](HotTable, this);
      /* 添加行之后选项框错位 */

      Object(_pos_methods__WEBPACK_IMPORTED_MODULE_2__["reRenderSelectOption"])(this.hot, this.data);
      /* 监听滚动事件 */

      this.listenScroll();
      /* 过滤采集器名称 */

      this.filterRows(this.hot);
    },

    /* 切换测点的时候机组 */
    listenScroll: function listenScroll() {
      var _this2 = this;

      var wtHolder = document.getElementsByClassName('wtHolder')[0];
      wtHolder.addEventListener('scroll', function (e) {
        var scrollTop = wtHolder.scrollTop;
        var scrollLeft = wtHolder.scrollLeft;
        var paload = {
          scrollType: 'position',
          type: _this2.type,
          scrollTop: scrollTop,
          scrollLeft: scrollLeft
        };

        _this2.$store.commit('setScroll', paload);

        _this2.hot.destroyEditor(); //处理当选择下拉框后拖动滚动条框框会跟着跑的问题

      });
    },

    /* 加载的时候根据dgm_name 来过滤数据 */
    filter_by_dgmName: function filter_by_dgmName() {
      var _this3 = this;

      var data = [];
      if (!sessionStorage.getItem('dgm_id')) return;
      /* 没有这一选项返回  */

      var dgm_ids = JSON.parse(sessionStorage.getItem('dgm_id'));
      if (dgm_ids.length == 0) return;
      /* 选项为空，返回 */

      dgm_ids.forEach(function (dgm_id) {
        _this3.data.forEach(function (position) {
          if (position.dgm_id == dgm_id) {
            data.push(position);
          }
        });
      });
      this.data = data;
    },
    //保留过滤后的结果
    filterRows: function filterRows(hot) {
      var filtersPlugin = hot.getPlugin('filters');

      if (sessionStorage.getItem('filter_dgm_name')) {
        var filterArr = JSON.parse(sessionStorage.getItem('filter_dgm_name'));
        filterArr.forEach(function (condition) {
          filtersPlugin.addCondition(2, condition.conditions[0].name, condition.conditions[0].args, condition.operations);
        });
        filtersPlugin.filter();
      }

      if (sessionStorage.getItem('filter_mac_name')) {
        var _filterArr = JSON.parse(sessionStorage.getItem('filter_mac_name'));

        _filterArr.forEach(function (condition) {
          filtersPlugin.addCondition(condition.column, condition.conditions[0].name, condition.conditions[0].args, condition.operations);
        });

        filtersPlugin.filter();
      }

      if (sessionStorage.getItem('filter_tree_name')) {
        var _filterArr2 = JSON.parse(sessionStorage.getItem('filter_tree_name'));

        _filterArr2.forEach(function (condition) {
          filtersPlugin.addCondition(condition.column, condition.conditions[0].name, condition.conditions[0].args, condition.operations);
        });

        filtersPlugin.filter();
      }
    },
    //获取data
    getData: function getData() {
      return this.data;
    },

    /* 获取hot实例 */
    getHot: function getHot() {
      return this.hot;
    }
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! sweetalert */ "./node_modules/sweetalert/dist/sweetalert.min.js")))

/***/ })

}]);
//# sourceMappingURL=9-6cfce981.js.map