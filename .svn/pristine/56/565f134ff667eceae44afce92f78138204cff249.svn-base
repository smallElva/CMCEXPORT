(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[4],{

/***/ "./src/components/content/system/dgm/table/js/dgm_methods.js":
/*!*******************************************************************!*\
  !*** ./src/components/content/system/dgm/table/js/dgm_methods.js ***!
  \*******************************************************************/
/*! exports provided: dgmSnycState, sensorType, sensorTypeSource, integral, mode, posClassToPosLoc, posSidePosLoc, getPosLoc, findKey, unitToSources, destToDatabit, freqToCaptureTime, dgmBtn_name, dgmChType_name, rangeType_name, compareId, getChNum, getVibChNum, getTempChNum */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dgmSnycState", function() { return dgmSnycState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sensorType", function() { return sensorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sensorTypeSource", function() { return sensorTypeSource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "integral", function() { return integral; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mode", function() { return mode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "posClassToPosLoc", function() { return posClassToPosLoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "posSidePosLoc", function() { return posSidePosLoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPosLoc", function() { return getPosLoc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findKey", function() { return findKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unitToSources", function() { return unitToSources; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destToDatabit", function() { return destToDatabit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "freqToCaptureTime", function() { return freqToCaptureTime; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dgmBtn_name", function() { return dgmBtn_name; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dgmChType_name", function() { return dgmChType_name; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rangeType_name", function() { return rangeType_name; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compareId", function() { return compareId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChNum", function() { return getChNum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getVibChNum", function() { return getVibChNum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getTempChNum", function() { return getTempChNum; });
/**
 * 同步状态 @dgmSnycState
 * 值与信息的转化
 * param@val=从后台获取的值
 *
 * **/
function dgmSnycState(val) {
  var modeVal = "";

  if (Number(val) > 0) {
    modeVal = "未同步";
  } else if (val == "") {
    modeVal = "";
  } else {
    modeVal = "已同步";
  }

  return modeVal;
}
/**
  * 传感器类型 @sensorType
  * 值与信息的转化
  * param@val=从后台获取的值
  *
  * **/

function sensorType(val) {
  var sensorVal = "";
  var sensorUnit = "";

  switch (val + "") {
    case "0":
      sensorVal = "位移";
      sensorUnit = "mV/μm";
      break;

    case "1":
      sensorVal = "速度";
      sensorUnit = "mV/(mm/s)";
      break;

    case "2":
      sensorVal = "加速度";
      sensorUnit = "mV/g";
      break;

    case "3":
      sensorVal = "温度";
      sensorUnit = "℃";
      break;

    case "4":
      sensorVal = "电流";
      sensorUnit = "mA";
      break;

    case "5":
      sensorVal = "频率";
      sensorUnit = "Hz";
      break;

    case "13":
      sensorVal = "纵波";
      sensorUnit = "kN";
      break;

    case "14":
      sensorVal = "横波";
      sensorUnit = "kN";
      break;

    case "127":
      sensorVal = "其它";
      sensorUnit = "自定义";
      break;

    default:
      sensorVal = "";
      sensorUnit = "";
      break;
  }

  return [sensorVal, sensorUnit, val];
}
/**
 * 传感器类型下拉选项 @sensorTypeSource
 * 值与信息的转化
 * param@dgmType=采集器类型
 *
 * **/

function sensorTypeSource(dgmType) {
  var sensorSource = {};

  if (dgmType == 5) {
    sensorSource = {
      '13': '纵波',
      '14': '横波'
    };
  } else if (dgmType == 6) {
    sensorSource = {
      '0': '位移',
      '1': '速度',
      '2': '加速度',
      '3': '温度',
      '4': '电流',
      '5': '频率',
      '127': '其它'
    };
  } else {
    sensorSource = {
      '0': '位移',
      '1': '速度',
      '2': '加速度'
    }; //传感器类型下拉选项
  }

  return sensorSource;
}
/**
  * 是否积分@integral
  * 值与信息的转化
  * param@val=从后台获取的值
  * param@type=采集器类型
  * **/

function integral(val) {
  var integralVal = "";

  switch (val + "") {
    case "0":
      integralVal = "不积分";
      break;

    case "1":
      integralVal = "一次积分";
      break;

    case "2":
      integralVal = "二次积分";
      break;

    default:
      integralVal = "不积分";
      break;
  }

  return integralVal;
}
/**
  *传输方式 @mode
  * 值与信息的转化
  *
  * param@val=从后台获取的值
  *
  * **/

function mode(val) {
  var modeVal = "";

  switch (val + "") {
    case "0":
      modeVal = "字符串方式";
      break;

    case "1":
      modeVal = "二进制方式";
      break;
  }

  return modeVal;
}
/**
 * 已知posClass求posLocSource @posClassToPosLoc
 * param@posClass=部件分类值
 *
 * **/

function posClassToPosLoc(posClass, dgmType, t_root) {
  var posLocSource = {};

  if (t_root == 2) {
    //tmu2000
    posLocSource = {
      "255": '其它',
      '1': '1位',
      '2': '2位',
      '3': '3位',
      '4': '4位',
      '5': '5位',
      '6': '6位',
      '7': '7位',
      '8': '8位'
    };
    return posLocSource;
  } else {
    switch (posClass + "") {
      case "0":
        posLocSource = {
          "255": '其它'
        };
        break;

      case "1":
        if (dgmType == 2) {
          posLocSource = {
            '21': '叶片1',
            '22': '叶片2',
            '23': '叶片3',
            '30': '轮毂'
          };
        } else {
          posLocSource = {
            '0': '主轴承径向',
            '19': '主轴承1径向',
            '26': '主轴承1轴向',
            '20': '主轴承2径向',
            '27': '主轴承2轴向'
          };
        }

        break;

      case "2":
        posLocSource = {
          '1': '输入轴轴承径向',
          '2': '内齿圈径向',
          '3': '低速轴轴承径向',
          '4': '低速轴轴承轴向',
          '5': '中间轴轴承径向',
          '6': '中间轴轴承轴向',
          '28': '高速轴前轴承径向',
          '7': '高速轴轴承径向',
          '8': '高速轴轴承轴向',
          '9': '一级行星内齿圈径向',
          '10': '二级行星内齿圈径向'
        };
        break;

      case "3":
        posLocSource = {
          '11': '传动端轴承径向水平',
          '12': '传动端轴承径向垂直',
          '29': '传动端轴承轴向',
          '13': '自由端轴承径向水平',
          '14': '自由端轴承径向垂直'
        };
        break;

      case "4":
        if (dgmType == 5) {
          posLocSource = {
            '31': '顶部法兰',
            '32': '底部法兰',
            '33': '基础环顶部法兰',
            '34': '基础环底部法兰',
            '35': '联接法兰1',
            '36': '联接法兰2',
            '37': '联接法兰3',
            '38': '联接法兰4'
          };
        } else {
          //新增加的塔筒位置暂时屏蔽
          posLocSource = {
            '15': '机舱X',
            '16': '机舱Y',
            '17': '塔顶X',
            '18': '塔顶Y',
            '24': '塔底X',
            '25': '塔底Y' // '45':'塔筒1X','46':'塔筒1Y','47':'塔筒2X','48':'塔筒2Y','49':'塔筒3X','50':'塔筒3Y','51':'塔筒4X','52':'塔筒4Y','53':'塔筒5X','54':'塔筒5Y'

          };
        }

        break;

      case "5":
        if (dgmType == 5) {
          posLocSource = {
            '21': '叶片1',
            '22': '叶片2',
            '23': '叶片3',
            '30': '轮毂'
          };
        } else {
          posLocSource = {
            '39': '叶片1法兰1',
            '40': '叶片2法兰1',
            '41': '叶片3法兰1',
            '42': '叶片1法兰2',
            '43': '叶片2法兰2',
            '44': '叶片3法兰2'
          };
        }

        break;
    }
  }

  return posLocSource;
}
/**
 * 塔筒的关联位置需要成对选择
 * **/

function posSidePosLoc(posLoc) {
  var posLocSource = {
    '15': '机舱X',
    '16': '机舱Y',
    '17': '塔顶X',
    '18': '塔顶Y',
    '24': '塔底X',
    '25': '塔底Y'
  };

  switch (posLoc + "") {
    case "15":
      posLocSource = {
        '16': '机舱Y'
      };
      break;

    case "16":
      posLocSource = {
        '15': '机舱X'
      };
      break;

    case "17":
      posLocSource = {
        '18': '塔顶Y'
      };
      break;

    case "18":
      posLocSource = {
        '17': '塔顶X'
      };
      break;

    case "24":
      posLocSource = {
        '25': '塔底Y'
      };
      break;

    case "25":
      posLocSource = {
        '24': '塔底X'
      };
      break;
  }

  return posLocSource;
}
/**
* 已知posClass求posLocSource @posClassToPosLoc
* param@posClass=部件分类值
    *dgm_type: dgu2000=1,dgu2200=2,dgu2001=3,mhd=4,dgu2600=5
dgm_type:1,// 采集器型号 1:振动采集器V1 2.叶轮采集器 3.振动采集器V2 4.MHD采集器 5.螺栓采集器 6.821E 7.tms采集器
    * **/

function getPosLoc(dgmType, chId) {
  var posClassSource = {};

  switch (dgmType + "") {
    case "1":
      if (chId == 10 || chId == 11) {
        posClassSource = {
          '0': '公共',
          '1': '主轴',
          '2': '齿轮箱',
          '3': '发电机',
          '4': '塔筒'
        };
      } else {
        posClassSource = posClassSource = {
          '0': '公共',
          '1': '主轴',
          '2': '齿轮箱',
          '3': '发电机'
        };
      }

      break;

    case "2":
      posClassSource = {
        '0': '公共',
        '1': '叶轮'
      };
      break;

    case "3":
      posClassSource = {
        '0': '公共',
        '1': '主轴',
        '2': '齿轮箱',
        '3': '发电机',
        '4': '塔筒'
      };
      break;

    case "4":
      posClassSource = {
        '0': '公共',
        '1': '主轴',
        '2': '齿轮箱',
        '3': '发电机',
        '4': '塔筒'
      };
      break;

    case "5":
      posClassSource = {
        '0': '公共',
        '4': '塔筒',
        '5': '叶轮'
      };
      break;

    case "7":
      posClassSource = {
        '0': '公共',
        '1': '1轴',
        '2': '2轴',
        '3': '3轴',
        '4': '4轴'
      };
      break;
  }

  return posClassSource;
}
/**
 * 对象已知值求key
 * **/

function findKey(value, data) {
  for (var key in data) {
    if (data[key] == value) {
      return key;
    }
  }
}
/**
 * 求 unitSource和integralSource @unitToSources
 * param@灵敏系数单位=sensorUnit
 * param@积分参数=byIntegral
 * 返回数组：第一项表示积分单位下拉列表；第二项表示积分下拉列表
 * **/

function unitToSources(sensorUnit, byIntegral, dgmType, sensorType) {
  var unitSource = {};
  var integralSource = {};

  if (dgmType == 5 || dgmType == 6) {
    switch (sensorType + '') {
      case "2":
        unitSource = {
          "1": "g",
          "2": "m/s²"
        };
        break;

      case "1":
        unitSource = {
          "3": "mm/s"
        };
        break;

      case "0":
        unitSource = {
          "4": "μm",
          '9': 'mm'
        };
        break;

      case "3":
        unitSource = {
          "6": "℃",
          '7': '℉'
        };
        break;

      case "13":
      case "14":
        unitSource = {
          "8": "kN"
        };
        break;

      case "4":
        unitSource = {
          "10": "mA",
          '11': 'A',
          '12': 'kA'
        };
        break;

      case "5":
        unitSource = {
          "13": "Hz"
        };
        break;

      case "127":
        unitSource = {
          "0": "自定义"
        };
        break;
    }
  } else {
    if (dgmType == 7) {
      switch (sensorType + '') {
        case "2":
          unitSource = {
            "1": "g",
            "2": "m/s²"
          };
          break;

        case "1":
          unitSource = {
            "3": "mm/s"
          };
          break;

        case "0":
          unitSource = {
            "4": "μm",
            '9': 'mm'
          };
          break;

        case "3":
          unitSource = {
            "6": "℃",
            '7': '℉'
          };
          break;

        case "13":
        case "14":
          unitSource = {
            "8": "kN"
          };
          break;

        case "4":
          unitSource = {
            "10": "mA",
            '11': 'A',
            '12': 'kA'
          };
          break;

        case "5":
          unitSource = {
            "13": "Hz"
          };
          break;

        case "127":
          unitSource = {
            "0": "自定义"
          };
          break;
      }
    }

    if (sensorUnit == "mV/g") {
      if (dgmType == 4) {
        integralSource = {
          "0": "不积分",
          "1": "积分"
        };
      } else {
        integralSource = {
          "0": "不积分",
          "1": "一次积分",
          "2": "二次积分"
        };
      }

      switch (byIntegral) {
        case "0":
          unitSource = {
            "1": "g",
            "2": "m/s²"
          };
          break;

        case "1":
          unitSource = {
            "3": "mm/s"
          };
          break;

        case "2":
          unitSource = {
            "4": "μm"
          };
          break;
      }
    } else if (sensorUnit == "mV/μm") {
      integralSource = {
        "0": "不积分"
      };
      unitSource = {
        "4": "μm"
      };
    } else if (sensorUnit == "mV/(mm/s)") {
      if (dgmType == 4) {
        integralSource = {
          "0": "不积分",
          "1": "积分"
        };
      } else {
        integralSource = {
          "0": "不积分",
          "1": "一次积分"
        };
      }

      switch (byIntegral) {
        case "0":
          unitSource = {
            "3": "mm/s"
          };
          break;

        case "1":
          unitSource = {
            "4": "μm"
          };
          break;
      }
    }
  }

  return [unitSource, integralSource];
}
/**
 * @destToDatabit
 * param@destType=外部集成器类型
 *返回数据位列表
 * **/

function destToDatabit(destType) {
  var databitSource = [];

  if (Number(destType) === 0) {
    databitSource = [["8", "8"], ["7", "7"], ["6", "6"], ["5", "5"]];
  } else {
    databitSource = [["4", "Float"], ["1", "Byte"], ["2", "Short"], ["3", "Int"], ["5", "Double"]];
  }

  return databitSource;
}
/**
 * @freqToCaptureTime
 * param@capture_freq=分析频率
 *返回采样时间列表
 * **/

function freqToCaptureTime(capture_freq) {
  var captureTimeSource = {};

  switch (parseInt(capture_freq)) {
    case 7:
      captureTimeSource = {
        "0": "2秒",
        "1": "4秒",
        "2": "8秒",
        "3": "16秒",
        "4": "32秒",
        "5": "64秒",
        "6": "128秒",
        "7": "256秒"
      };
      break;

    case 0:
      captureTimeSource = {
        "0": "51.2秒",
        "1": "102.4秒",
        "2": "204.8秒",
        "3": "409.6秒",
        "4": "819.2秒",
        "5": "1638.4秒",
        "6": "3276.8秒",
        "7": "6553.6秒"
      };
      break;

    case 1:
      captureTimeSource = {
        "0": "51.2秒",
        "1": "102.4秒",
        "2": "204.8秒",
        "3": "409.6秒",
        "4": "819.2秒",
        "5": "1638.4秒",
        "6": "3276.8秒"
      };
      break;

    case 2:
      captureTimeSource = {
        "0": "51.2秒",
        "1": "102.4秒",
        "2": "204.8秒",
        "3": "409.6秒",
        "4": "819.2秒",
        "5": "1638.4秒"
      };
      break;

    case 3:
      captureTimeSource = {
        "0": "51.2秒",
        "1": "102.4秒",
        "2": "204.8秒",
        "3": "409.6秒",
        "4": "819.2秒"
      };
      break;

    case 4:
      captureTimeSource = {
        "0": "51.2秒",
        "1": "102.4秒",
        "2": "204.8秒",
        "3": "409.6秒"
      };
      break;

    case 5:
      captureTimeSource = {
        "0": "51.2秒",
        "1": "102.4秒",
        "2": "204.8秒"
      };
      break;

    case 6:
      captureTimeSource = {
        "0": "51.2秒",
        "1": "102.4秒"
      };
      break;
  }

  return captureTimeSource;
} //采集器设置按钮文本转化

/**
 *
 * @param type
 * @returns {string}
 * {type:1,textBtn:"采集器信息",name:'dgminfo'},
 {type:2,textBtn:"振动设置",name:'vibch'},
 {type:3,textBtn:"温度设置",name:'tempch'},
 {type:4,textBtn:"过程量设置",name:'stach'},
 {type:5,textBtn:"转速设置",name:'speedch'},
 {type:6,textBtn:"数字量设置",name:'digch'},
 {type:7,textBtn:"外部集成设置",name:'modch'},
 // {type:8,textBtn:"工艺量设置"},
 {type:9,textBtn:"长采样设置",name:'capturech'},
 */

function dgmBtn_name(type) {
  var dgmBtn_name = '';

  switch (parseInt(type)) {
    case 1:
      dgmBtn_name = "采集器信息";
      break;

    case 2:
      dgmBtn_name = "振动设置";
      break;

    case 3:
      dgmBtn_name = "温度设置";
      break;

    case 4:
      dgmBtn_name = "过程量设置";
      break;

    case 5:
      dgmBtn_name = "转速设置";
      break;

    case 6:
      dgmBtn_name = "数字量设置";
      break;

    case 7:
      dgmBtn_name = "外部集成设置";
      break;

    case 8:
      dgmBtn_name = "工艺量设置";
      break;

    case 9:
      dgmBtn_name = "长采样设置";
      break;

    case 10:
      dgmBtn_name = "前置处理器";
      break;

    case 11:
      dgmBtn_name = "MHD从设备";
      break;

    case 12:
      dgmBtn_name = "连续采集";
      break;

    case 13:
      dgmBtn_name = "采集设置";
      break;

    case 14:
      dgmBtn_name = "法兰设置";
      break;

    case 15:
      dgmBtn_name = "预处理器设置";
      break;

    case 16:
      dgmBtn_name = "螺栓设置";
      break;
  }

  return dgmBtn_name;
}
/**
 * 通道类型转换
 * */

function dgmChType_name(type) {
  var dgmChType_name = '';

  switch (parseInt(type)) {
    case 1:
      dgmChType_name = "全8通道";
      break;

    case 2:
      dgmChType_name = "后8通道";
      break;

    case 3:
      dgmChType_name = "9通道";
      break;

    case 0:
      dgmChType_name = "全16通道";
      break;
  }

  return dgmChType_name;
}
/**
 * 量程类型转换
 * */

function rangeType_name(type) {
  var rangeType_name = '';

  switch (parseInt(type)) {
    case 0:
      rangeType_name = "普通4量程";
      break;

    case 1:
      rangeType_name = "高精度多量程";
      break;
  }

  return rangeType_name;
}
/**
 * 对象根据值进行排序id
 * */

function compareId(val) {
  // val表示要通过那个参数来对比呢
  return function (a, b) {
    return a[val] - b[val]; // 倒序 b[val]-a[val]    正序  a[val] - b[val]
  };
}
/**
  * 丝印 @chId  过程量
  */

function getChNum(item, dgmType) {
  var tempStr;
  var tempNum = Number(item.ch_id);
  var tValue = tempNum + 1;

  if (dgmType == 3) {
    //DGU200V2
    tempStr = "IN" + tValue;
  } else if (dgmType == 6) {
    //E821
    if (tValue < 10) {
      tempStr = "A0" + tValue;
    } else {
      tempStr = "A" + tValue;
    }
  }

  return tempStr;
}
/**
  * 丝印 @chId 振动通道
  */

function getVibChNum(item) {
  var tempStr = '';
  var tempNum = Number(item.ch_id);
  var tValue = '';

  if (tempNum < 8) {
    tValue = (tempNum + 8) * 2 + 1;
    tempStr = "A" + tValue;
  } else if (tempNum < 16) {
    tValue = (tempNum - 8) * 2 + 1;

    if (tValue < 10) {
      tempStr = "A0" + tValue;
    } else {
      tempStr = "A" + tValue;
    }
  } else if (tempNum < 24) {
    tValue = (tempNum - 8) * 2 + 2;
    tempStr = "A" + tValue;
  } else if (tempNum < 32) {
    tValue = (tempNum - 24) * 2 + 2;

    if (tValue < 10) {
      tempStr = "A0" + tValue;
    } else {
      tempStr = "A" + tValue;
    }
  } else if (tempNum < 36) {
    tValue = tempNum - 32 + 1;
    tempStr = "IN" + tValue;
  }

  return tempStr;
}
/**
  * 丝印 @chId 温度通道
  */

function getTempChNum(item) {
  var tempStr = '';
  var tempNum = Number(item.ch_id);
  var tValue = "";

  if (tempNum < 8) {
    tValue = (tempNum + 8) * 2 + 2;
    tempStr = "A" + tValue;
  } else if (tempNum < 16) {
    tValue = (tempNum - 8) * 2 + 2;

    if (tValue < 10) {
      tempStr = "A0" + tValue;
    } else {
      tempStr = "A" + tValue;
    }
  }

  return tempStr;
}

/***/ })

}]);
//# sourceMappingURL=4-96eb7a5006f3d96b3786.js.map