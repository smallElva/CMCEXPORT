(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[5],{

/***/ "./src/components/content/system/dgm/table/js/dgm_info.js":
/*!****************************************************************!*\
  !*** ./src/components/content/system/dgm/table/js/dgm_info.js ***!
  \****************************************************************/
/*! exports provided: getDgmInfo, changeDgm, getMHDInfo, createMHD, createE821, createFlange, createPreps, createTms, createServerDgm, getArrFromObj, getIndexOfArr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDgmInfo", function() { return getDgmInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "changeDgm", function() { return changeDgm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getMHDInfo", function() { return getMHDInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMHD", function() { return createMHD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createE821", function() { return createE821; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createFlange", function() { return createFlange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPreps", function() { return createPreps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTms", function() { return createTms; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createServerDgm", function() { return createServerDgm; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getArrFromObj", function() { return getArrFromObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getIndexOfArr", function() { return getIndexOfArr; });
/* harmony import */ var _dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dgm_methods.js */ "./src/components/content/system/dgm/table/js/dgm_methods.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/utils */ "./src/utils/utils.js");


var posLocSource = {}; //安装位置下拉选项

var sensorSource = {}; //传感器类型下拉选项

var hwFilterSource = {}; //硬件滤波下拉选项

var swFilterSource = {
  '0': '不滤波',
  '1': '2Hz高通滤波',
  '2': '10Hz高通滤波'
}; //软件滤波下拉选项

var vibSignalZoomSource = {}; //信号增益下拉选项

var vibSignalZoomVal = []; //信号增益下拉选项

var vibSignalZoomMaxVal = []; //信号增益最大值下拉选项

var vibSignalZoomKey = []; //信号增益下拉选项

var integralSource = {}; //积分下拉选项

var powerTimeSource = {
  '60': '1分钟',
  '120': '2分钟',
  '300': '5分钟',
  '600': '10分钟'
}; //能量有效值计算时间

var rangeSource = {}; //增益下拉列表

var staByStaTypeSource = {}; //过程量类型

var byStrongTypeSource = {}; //键相增益

var dwCompreVoltSources = {
  "0": "0V",
  "1": "0.6V",
  "2": "1.2V",
  "3": "1.8V",
  "4": "2.4V",
  "5": "3.0V",
  "6": "3.6V",
  "7": "4.2V"
}; //比较电压

var polarSources = {
  "0": "正极",
  "1": "负极"
}; //极性

var highDensitySources = {
  "0": "否",
  "1": "是"
}; //高密度采样

var byDigitalTypeSources = {
  "0": "输入",
  "1": "输出"
}; //数字量类型

var bybindchSources = [["255", "无"], ["0", "信号1"], ["1", "信号2"]]; //信号绑定

var bybindtypeSources = [["255", "无"], ["0", "正向"], ["1", "反向"]]; //信号传输

var byifpowerSource = {}; //是否带电源

var byifalarmsource = {}; //自检输出

var stopbitSource = {
  '0': '1位',
  '1': '1.5位',
  '2': '2位'
}; ////停止位

var destTypeSources = {
  "PT-04": "1",
  "倾角": "3",
  "JC2300DWCV": "2",
  "JC2301B": "4",
  "JC2301M": "5"
}; //型号暂时只做了串口，其他先注释

var baudrateSources = {
  "2400": "2400",
  "4800": "4800",
  "9600": "9600",
  "19200": "19200",
  "38400": "38400",
  "57600": "57600",
  "115200": "115200"
}; //波特率

var paritySources = {
  "0": "无",
  "1": "奇校验",
  "2": "偶校验"
}; //奇偶校验

var modeSources = {
  "0": "字符串方式",
  "1": "二进制方式"
}; //传输方式

var masterslaveSources = {
  "0": "主设备",
  "1": "从设备"
}; //设备选择

var databitSource = {}; //数据位

var channelSource = {
  "无": "255"
}; //长采样通道

var captureTypeSources = {
  '0': '不采集',
  '1': '1小时',
  '2': '4小时',
  '3': '8小时',
  '4': '12小时',
  '5': '24小时',
  '100': '工况存储'
}; //采集间隔

var captureFreqSources = {
  "0": "500Hz",
  "1": "1000Hz",
  "2": "2000Hz",
  "3": "4000Hz",
  "4": "8000Hz",
  "5": "16000Hz",
  "6": "32000Hz",
  "7": "12800Hz"
}; //分析频率

var captureTimeSource = {}; //采集时间

var channels;
var posClassSource = {
  '0': '公共',
  '1': '主轴',
  '2': '齿轮箱',
  '3': '发电机',
  '4': '塔筒',
  '5': '叶轮'
}; //安装分类

var unitSource = {
  '6': '℃',
  '7': '°F'
}; //单位下拉选项

var byStaTypeSources = {
  '1': '-20~20V',
  '2': '4~20mA'
}; //过程量类型下拉选项

var posPartSource = {}; //关联部件下拉列表

var transChTypeSource = {
  '0': '振动',
  '4': '温度'
}; //振动与温度通道互转

var ifOutputSource = {
  '0': '不输出',
  '1': '输出'
}; //modbus是否输出

var intZoomSource = {
  '0': '自动',
  '1': '100',
  '2': '10',
  '3': '1'
}; //mhd采集器积分量程

var byHwIntegralSource = {
  '0': '不积分',
  '1': '积分'
}; //mhd采集器的硬件积分

var hwOptions = {
  '0': '温度(WiFi模式)',
  '1': '过程量(WiFi模式)',
  '2': '温度(zigbee模式)',
  '3': '过程量(zigbee模式)'
}; //dgu2200支持类型

var reverseSource = {
  '0': '正向触发',
  '1': '反向触发'
}; //dgu2000v1触发类型

var statusSource = {
  '0': '在线',
  '1': '离线',
  '2': '未注册'
}; //前置处理器状态是否在线

var have_cfgSource = {
  '0': '否',
  '1': '是'
}; //前置处理器是否下设置

/*2600采集设置参数*/

var frqSource = {
  'RFQ_1': '接收频率 1M',
  'RFQ_2Dt25': '接收频率 2.25M',
  'RFQ_5': '接收频率 5M',
  'RFQ_10': '接收频率 10M',
  'RFQ_15': '接收频率 15M',
  'RFQ_0Dt2_30': '接收频率 0.2M~30M',
  'RFQ_10_30': '接收频率 10M~30M',
  'RFQ_RSV': '保留'
}; //信号接收频率

var wmSource = {
  'RF': 'RF 型检波方式',
  'FullWave': '全波型检波方式',
  'SemiPositive': '正半波型检波方式',
  'SemiNegetive': '负半波型检波方式'
}; //检波方式

var wkmSource = {
  'ST_Resetting': '复位状态',
  'ST_Idle': '空闲状态',
  'ST_Normal': '正常状态',
  'ST_Error': '异常状态',
  'ST_Test': '测试状态'
}; //工作模式

var flmSource = {
  'FM_HP1': '高通 1M',
  'FM_HP2Dt5': '高通 2.5M',
  'FM_HP5': '高通 5M',
  'FM_HP10': '高通 10M'
}; //滤波模式

var evSource = {
  'EV_100': '100V',
  'EV_200': '200V',
  'EV_300': '300V',
  'EV_400': '400V'
}; //激励电压

var pmSource = {
  'PM_Internal': '内部激励',
  'PM_External': '外部激励'
}; //脉冲重复频率模式

var slSource = {
  'SL_512': 'AScan 数据帧长度为 512（点数）',
  'SL_1024': 'AScan 数据帧长度为 1024（点数）'
}; //采样深度

var tmSource = {
  'TM_Soft': '软件触发',
  'TM_Encoder': '编码器触发',
  'TM_Pos': '位置触发',
  'TM_Outside': '外部触发',
  'TM_One': '内部触发',
  'TM_Threshold': '阈值触发'
}; //触发模式

var swDampingSource = {
  'SW_ON': '打开',
  'SW_OFF': '关闭'
}; //阻抗匹配使能开关

var extSource = {
  'ET_High': '激励强度最高值',
  'ET_Low': '激励强度最低值'
}; //激励强度

var pulserCtx_mdSource = {
  'TR_Integrated': '收发一体',
  'TR_Seperated': '收发分离'
}; //收发模式

var gateMode_gtSource = {
  'I': 'I 闸门',
  'A': 'A 闸门',
  'B': 'B 闸门',
  'C': 'C 闸门'
}; //指定某个闸门

var gateMode_mdSource = {
  'GM_Peak': '峰值',
  'GM_FirstPeak': '第一峰值',
  'GM_Flank': '脉冲边缘',
  'GM_ZeroBefore': '跨零点前',
  'GM_ZeroAfter': '跨零点后'
}; //测量模式

var gateFlawJudge_gtSource = {
  'I': 'I 闸门',
  'A': 'A 闸门',
  'B': 'B 闸门',
  'C': 'C 闸门'
}; //检测缺陷时的判别策略:指定某个闸门

var lgSource = {
  'Alm_Pos': '回波幅值冲过闸门输出报警',
  'Alm_Neg': '回波幅值低于闸门输出报警',
  'Alm_OFF': '关闭报警'
}; //检测缺陷时的判别策略:报警逻辑

var swSuppressCntSource = {
  'SW_ON': '打开',
  'SW_OFF': '关闭'
}; //闸门抑制功能使能标志

var measurementCtx_gtSource = {
  'Gate_I': 'I 闸门',
  'Gate_A': 'A 闸门',
  'Gate_B': 'B 闸门',
  'Gate_C': 'C 闸门',
  'Gate_BA': 'B 和 A 闸门组合',
  'Gate_AI': 'A 和 I 闸门组合',
  'Gate_BI': 'B 和 I 闸门组合',
  'Gate_CI': 'C 和 I 闸门组合'
}; //指定报警源

var measurementCtx_mdSource = {
  'MTOF_Peak': '波峰对应的渡越时间（横坐标）',
  'MTOF_Max': '最大渡越时间',
  'MTOF_Min': '最小渡越时间',
  'MThk_Max': '最大厚度值',
  'MThk_Min': '最小厚度值',
  'MAMP_Persentage': '幅值（百分比）',
  'MAMP_dB': '幅值（分贝）',
  'MAMP_DAC_Persentage': '幅值 DAC 补偿量（百分比）',
  'MAMP_DAC_dB': '幅值 DAC 补偿量（分贝）',
  'MAMP_Diff_Persentage': '两波峰在幅值上差值（百分比）',
  'MAMP_Diff_dB': '两波峰在幅值上差值（分贝）',
  'MDIS_Surface': '耦合层深度',
  'MDIS_ReductedSurf': '耦合层深度',
  'MDepth': '深度',
  'MLEG': '预留',
  'MMUTI_DAC': '多条 DAC 补偿'
}; //测量模式

var jdSource = {
  'MJ_Anti_Coincidence': '反向一致',
  'MJ_Coincidence': '一致',
  'MJ_Flank': '边沿检测',
  'MJ_Peak': '峰值检测',
  'MJ_Sup_Cnt': '抑制次数对比',
  'MJ_Tol_Mtr': '容差检测',
  'MJ_Pha': '相位检测'
}; //测量判断

var swSource = {
  'SW_ON': '打开',
  'SW_OFF': '关闭'
}; //功能开关

var roleSource = {
  'ROLE_Master': '主板卡',
  'ROLE_Slave': '从板卡'
}; //板卡的主从关系

var chanTypeSource = {
  "0": "转速通道",
  "1": "MVB_TC1",
  "2": "MVB_TC2",
  "3": "MVB_MP1",
  "4": "MVB_MP2",
  "5": "MVB_MC1",
  "6": "MVB_MC2"
}; // 数据来源

/*2600预处理设置参数*/

var collectModeSource = {
  '0': '轮询采集',
  '1': '同步采集'
}; //采集模式

/*2600螺栓设置参数*/

var bySensorTypeSource = {};
var byUnitNameSource = {};
var prepsIdSource = {};
var bIdSource = {};
var highSampSource = {
  '0': '否',
  '1': '是'
}; //高密度采样

var scanLengthSource = {
  '-1': '自动',
  '20480': '20480',
  '38912': '38912'
}; //采样长度

var stressTypeSource = {
  "1": "模式1",
  "2": "模式2"
}; // 测量模式

var readModeSource = {
  '0': '全波',
  '1': '闸门波'
}; //波形模式

var flange_prepsIdSource = {
  '255': {
    '255': '无'
  }
};
var needSaveCorrSource = {
  '0': '否',
  '1': '是'
}; //修改校正系数 0：否 1：是 默认0

var hostCarTypeSource = {
  "0": "TC1",
  "1": "TC2",
  "2": "MP1",
  "3": "MP2",
  "4": "MC1",
  "5": "MC2"
}; //主机车辆类型 默认空，必填

function getDgmInfo(res, type) {
  var data = [];
  var dgm = {};

  if (res === null || res === undefined || res.model === undefined || res.model === null || res.model.length === 0) {
    console.log('缺少model信息，数据错误！');
    return data;
  } else {
    if (type == 1) {
      var realTimeSource = []; //特征值实时上传间隔的下拉选项

      var byVectorSource = []; //特征值存储时间间隔的下拉选项

      var waveIntrvlSource = []; //波形实时上传间隔

      var bvWaveIntrvlSource = []; //波形存储时间间隔

      res.model.forEach(function (model) {
        if (model.dgm_type == 3 || model.dgm_type == 5) {
          realTimeSource = {
            '127': '最快',
            '0': '3秒',
            '1': '5秒',
            '2': '10秒',
            '3': '30秒',
            '4': '1分钟',
            '5': '3分钟',
            '6': '5分钟',
            '7': '30分钟',
            '8': '1小时',
            '9': '2小时',
            '10': '4小时',
            '11': '6小时'
          };
          byVectorSource = {
            '0': '不存储',
            '127': '最快',
            '1': '1分钟',
            '2': '2分钟',
            '3': '5分钟',
            '4': '10分钟',
            '5': '30分钟',
            '6': '1小时',
            '7': '2小时',
            '8': '4小时',
            '9': '6小时'
          };
          waveIntrvlSource = {
            '127': '最快',
            '0': '5秒',
            '1': '10秒',
            '2': '30秒',
            '3': '1分钟',
            '4': '5分钟',
            '5': '30分钟',
            '6': '1小时',
            '7': '2小时',
            '8': '4小时',
            '9': '6小时',
            '10': '12小时',
            '11': '24小时'
          };
          bvWaveIntrvlSource = {
            '0': '不存储',
            '127': '最快',
            '1': '5分钟',
            '2': '30分钟',
            '3': '1小时',
            '4': '2小时',
            '5': '4小时',
            '6': '6小时',
            '7': '12小时',
            '8': '24小时',
            '100': '工况存储'
          };
        } else {
          realTimeSource = {
            '0': '3秒',
            '1': '5秒',
            '2': '10秒',
            '3': '30秒',
            '4': '1分钟',
            '5': '3分钟',
            '6': '5分钟',
            '7': '30分钟',
            '8': '1小时',
            '9': '2小时',
            '10': '4小时',
            '11': '6小时'
          };
          byVectorSource = {
            '0': '不存储',
            '1': '1分钟',
            '2': '2分钟',
            '3': '5分钟',
            '4': '10分钟',
            '5': '30分钟',
            '6': '1小时',
            '7': '2小时',
            '8': '4小时',
            '9': '6小时'
          };
          waveIntrvlSource = {
            '0': '5秒',
            '1': '10秒',
            '2': '30秒',
            '3': '1分钟',
            '4': '5分钟',
            '5': '30分钟',
            '6': '1小时',
            '7': '2小时',
            '8': '4小时',
            '9': '6小时',
            '10': '12小时',
            '11': '24小时'
          };
          bvWaveIntrvlSource = {
            '0': '不存储',
            '1': '5分钟',
            '2': '30分钟',
            '3': '1小时',
            '4': '2小时',
            '5': '4小时',
            '6': '6小时',
            '7': '12小时',
            '8': '24小时',
            '100': '工况存储'
          };
        }

        var byBlackSource = {
          '0': '不存储',
          '8': '仅存储报警数据',
          '9': '黑匣子存储'
        };
        var fleshSource = {
          '0': '不存储',
          '1': '1小时',
          '2': '2小时',
          '3': '4小时',
          '4': '6小时',
          '5': '12小时',
          '6': '24小时'
        };

        if (model.dgm_type == 6) {
          //e821采集器
          realTimeSource = {
            '1': '1秒',
            '2': '2秒',
            '4': '4秒',
            '16': '16秒',
            '60': '1分钟',
            '300': '5分钟'
          };
          byVectorSource = {
            '0': '不存储',
            '1': '1分钟',
            '2': '2分钟',
            '3': '5分钟',
            '4': '10分钟',
            '5': '30分钟',
            '6': '1小时',
            '7': '2小时',
            '8': '4小时',
            '9': '6小时',
            '10': '1秒',
            '11': '5秒',
            '12': '30秒'
          };
        }

        if (model.dgm_type == 4) {
          ifOutputSource = {
            '0': '不输出',
            '1': '输出'
          };
          model.baseInfo.sf_fix_ver = ""; //mhd没有该字段，置空处理

          model.baseInfo.sf_main_ver = ""; //mhd没有该字段，置空处理

          model.baseInfo.hw_db_ver = ""; //mhd没有该字段，置空处理

          model.baseInfo.hw_ab_ver = ""; //mhd没有该字段，置空处理

          model.baseInfo.hw_ch_type = ""; //mhd没有该字段，置空处理

          model.baseInfo.hw_range_type = ""; //mhd没有该字段，置空处理
        }

        if (model.dgm_type == 1) {
          model.baseInfo.sf_fix_ver = ""; //v1采集器，置空处理

          model.baseInfo.sf_main_ver = ""; //v1采集器，置空处理

          model.baseInfo.hw_db_ver = ""; //v1采集器没有该字段，置空处理

          model.baseInfo.hw_ab_ver = ""; //v1采集器没有该字段，置空处理

          model.baseInfo.hw_ch_type = ""; //v1采集器没有该字段，置空处理

          model.baseInfo.hw_range_type = ""; //v1采集器没有该字段，置空处理
        }

        if (model.dgm_type == 7) {
          model.baseInfo.sf_fix_ver = ""; //tms采集器没有该字段，置空处理

          model.baseInfo.hw_ch_type = ""; //tms采集器没有该字段，置空处理

          model.baseInfo.hw_range_type = ""; //tms采集器没有该字段，置空处理
        }

        if (model.dgm_type == 5) {
          //2600采集器没有的字段置空处理
          model.baseInfo.byBlack_Data_intrvl = "";
          model.baseInfo.byRealtime_TZ_intrvl = "";
          model.baseInfo.byRealtime_Wave_intrvl = "";
          model.baseInfo.change_channels = "";
          model.baseInfo.hw_ab_ver = "";
          model.baseInfo.hw_ch_type = "";
          model.baseInfo.hw_db_ver = "";
          model.baseInfo.hw_fp_ver = "";
          model.baseInfo.hw_mb_ver = "";
          model.baseInfo.hw_options = "";
          model.baseInfo.hw_range_type = "";
          model.baseInfo.if_output = "";
          model.baseInfo.sf_fix_ver = "";
          model.baseInfo.sf_main_ver = "";
        }

        if (model.dgm_type == 6) {
          //E821采集器没有的字段置空处理
          model.baseInfo.byVector_Wave_intrvl = "";
          model.baseInfo.byBlack_Data_intrvl = "";
          model.baseInfo.byRealtime_Wave_intrvl = "";
          model.baseInfo.change_channels = "";
          model.baseInfo.flash_intrvl = "";
          model.baseInfo.hw_ab_ver = "";
          model.baseInfo.hw_ch_type = "";
          model.baseInfo.hw_db_ver = "";
          model.baseInfo.hw_fp_ver = "";
          model.baseInfo.hw_mb_ver = "";
          model.baseInfo.hw_options = "";
          model.baseInfo.hw_range_type = "";
          model.baseInfo.if_output = "";
          model.baseInfo.sf_fix_ver = "";
          model.baseInfo.sf_main_ver = "";
        }

        if (model.dgm_type != 2) {
          model.baseInfo.hw_options = ''; //其他类型这个值置空
        } else {
          model.baseInfo.hw_ch_type = ""; //叶轮采集器没有该字段，置空处理

          model.baseInfo.hw_range_type = ""; //叶轮采集器没有该字段，置空处理
        }

        if (model.dgm_type == 7) {
          model.baseInfo.if_output = ""; //tms采集器没有该字段，置空处理
        }

        if (model.dgm_type != 7) {
          model.baseInfo.need_save_corr = ""; //tms采集器没有该字段，置空处理

          model.baseInfo.mvb_car_id = ""; //mvb所在车厢号，tms特有，默认空，必填项

          model.baseInfo.host_car_type = ""; //主机车辆类型，tms特有，默认空，必填项
        }

        dgm = {
          updateTime: model.updateTime,
          //更新时间
          dgm_id: model.dgm_id,
          //采集器uid
          dgm_type: model.dgm_type,
          //采集器型号
          machineId: model.machineId,
          //机组id
          t_root: model.t_root,
          //0：cs2000,1:9100,2:tms2000
          dgm_activity: model.dgm_activity,
          //采集器有效性 0:以绑定 1:未绑定
          dgm_name: model.dgm_name,
          //采集站名称
          dgm_ip: model.dgm_ip,
          //采集器ip
          config_state: model.config_state,
          dgm_state: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["dgmSnycState"])(model.dgm_state),
          //同步状态：0成功；1失败
          dgm_state_val: model.dgm_state,
          //同步状态：0成功；1失败
          dgm_state_time: model.dgm_state_time,
          //同步时间
          if_output: model.baseInfo.if_output,
          if_output_val: ifOutputSource[model.baseInfo.if_output],
          //modbus是否输出
          ifOutputSources: Object.values(ifOutputSource),
          ifOutputSources_key: Object.keys(ifOutputSource),
          byRealtime_TZ_intrvl: model.baseInfo.byRealtime_TZ_intrvl,
          byRealtime_TZ_intrvl_val: realTimeSource[model.baseInfo.byRealtime_TZ_intrvl],
          //特征值实时上传间隔
          realTimeSources: Object.values(realTimeSource),
          realTimeSources_key: Object.keys(realTimeSource),
          byVector_TZ_intrvl: model.baseInfo.byVector_TZ_intrvl,
          byVector_TZ_intrvl_val: byVectorSource[model.baseInfo.byVector_TZ_intrvl],
          //特征值存储时间间隔
          byVectorSources: Object.values(byVectorSource),
          byVectorSources_key: Object.keys(byVectorSource),
          byRealtime_Wave_intrvl: model.baseInfo.byRealtime_Wave_intrvl,
          byRealtime_Wave_intrvl_val: waveIntrvlSource[model.baseInfo.byRealtime_Wave_intrvl],
          //波形实时上传间隔
          waveIntrvlSources: Object.values(waveIntrvlSource),
          waveIntrvlSources_key: Object.keys(waveIntrvlSource),
          byVector_Wave_intrvl: model.baseInfo.byVector_Wave_intrvl,
          byVector_Wave_intrvl_val: bvWaveIntrvlSource[model.baseInfo.byVector_Wave_intrvl],
          //波形存储时间间隔
          bvWaveIntrvlSources: Object.values(bvWaveIntrvlSource),
          bvWaveIntrvlSources_key: Object.keys(bvWaveIntrvlSource),
          byBlack_Data_intrvl: model.baseInfo.byBlack_Data_intrvl,
          byBlack_Data_intrvl_val: byBlackSource[model.baseInfo.byBlack_Data_intrvl],
          //黑匣子存储时间间隔
          byBlackSources: Object.values(byBlackSource),
          byBlackSources_key: Object.keys(byBlackSource),
          flash_intrvl: model.baseInfo.flash_intrvl,
          flash_intrvl_val: fleshSource[model.baseInfo.flash_intrvl],
          //数据缓存间隔
          fleshSources: Object.values(fleshSource),
          fleshSources_key: Object.keys(fleshSource),
          need_save_corr: model.baseInfo.need_save_corr,
          need_save_corr_val: needSaveCorrSource[model.baseInfo.need_save_corr],
          //修改校正系数
          needSaveCorrSources: Object.values(needSaveCorrSource),
          needSaveCorrSources_key: Object.keys(needSaveCorrSource),
          mvb_car_id: model.baseInfo.mvb_car_id,
          //mvb所在车厢号，tms特有，默认空，必填项
          host_car_type: model.baseInfo.host_car_type,
          host_car_type_val: hostCarTypeSource[model.baseInfo.host_car_type],
          //主机车辆类型
          hostCarTypeSources: Object.values(hostCarTypeSource),
          hostCarTypeSources_key: Object.keys(hostCarTypeSource),
          hw_ab_ver: model.baseInfo.hw_ab_ver,
          //AB版本号
          hw_ch_type: model.baseInfo.hw_ch_type,
          //通道类型 dgu2001
          hw_ch_type_val: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["dgmChType_name"])(model.baseInfo.hw_ch_type),
          //通道类型 dgu2001
          hw_db_ver: model.baseInfo.hw_db_ver,
          //DB版本号
          hw_options: model.baseInfo.hw_options,
          //支持类型dgu2200
          hw_options_val: hwOptions[model.baseInfo.hw_options],
          //支持类型
          hw_range_type: model.baseInfo.hw_range_type,
          //量程类型 dgu2001
          hw_range_type_val: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["rangeType_name"])(model.baseInfo.hw_range_type),
          //量程类型 dgu2001
          sf_fix_ver: model.baseInfo.sf_fix_ver,
          //软件修正版本号
          sf_main_ver: model.baseInfo.sf_main_ver,
          //软件主版本号
          hw_mb_ver: model.baseInfo.hw_mb_ver,
          //mhd采集器的mb版本号
          hw_fp_ver: model.baseInfo.hw_fp_ver,
          //mhd采集器的fp
          change_channels: model.change_channels,
          //16个通道，0代表振动，4代表温度
          number: model.number,
          // 2000v1的字段
          deleteType: model.deleteType // 采集器是否可删除

        };
        data.push({
          dgm: dgm
        });
      });
    } else if (type == 10) {
      var tmsInfo = res.tmsDgmInfo;
      var tmsList = {};
      tmsInfo.forEach(function (tms) {
        tmsList[tms.dgm_id] = tms.dgm_name;
      });
      var dgmSource = Object.values(tmsList);
      var dgmSources_key = Object.keys(tmsList);
      res.model.forEach(function (model) {
        var tmsList = model.tms_list;

        if (tmsList.length > 0) {
          tmsList.forEach(function (tms) {
            dgm = {
              dgm_id: model.dgm_id,
              dgm_name: model.dgm_name,
              dgmSources: dgmSource,
              dgmSources_keys: dgmSources_key,
              byId: tms.byId,
              byName: tms.byName,
              pre_id: tms.pre_id,
              status: tms.status,
              car_id: tms.car_id,
              dev_id: tms.dev_id,
              status_val: statusSource[tms.status] // have_cfg:tms.have_cfg,
              // have_cfg_val:have_cfgSource[tms.have_cfg],

            };
            data.push({
              dgm: dgm
            });
          });
        }
      });
    } else if (type == 13) {
      var models = res.model;
      models.forEach(function (model) {
        dgm = {
          dgm_id: model.dgm_id,
          dgm_name: model.dgm_name,
          ev: model.ev,
          ev_val: evSource[model.ev],
          evSources: Object.values(evSource),
          evSources_key: Object.keys(evSource),
          ext: model.ext,
          ext_val: extSource[model.ext],
          extSources: Object.values(extSource),
          extSources_key: Object.keys(extSource),
          fGain: model.fGain,
          flm: model.flm,
          flm_val: flmSource[model.flm],
          flmSources: Object.values(flmSource),
          flmSources_key: Object.keys(flmSource),
          frq: model.frq,
          frq_val: frqSource[model.frq],
          frqSources: Object.values(frqSource),
          frqSources_key: Object.keys(frqSource),
          gateFlawJudge_gt: model.gateFlawJudge_gt,
          gateFlawJudge_gt_val: gateFlawJudge_gtSource[model.gateFlawJudge_gt],
          gateFlawJudge_gtSources: Object.values(gateFlawJudge_gtSource),
          gateFlawJudge_gtSources_key: Object.keys(gateFlawJudge_gtSource),
          gateMode_gt: model.gateMode_gt,
          gateMode_gt_val: gateMode_gtSource[model.gateMode_gt],
          gateMode_gtSources: Object.values(gateMode_gtSource),
          gateMode_gtSources_key: Object.keys(gateMode_gtSource),
          gateMode_md: model.gateMode_md,
          gateMode_md_val: gateMode_mdSource[model.gateMode_md],
          gateMode_mdSources: Object.values(gateMode_mdSource),
          gateMode_mdSources_key: Object.keys(gateMode_mdSource),
          iDamping: model.iDamping,
          iDmp: model.iDmp,
          iPRF: model.iPRF,
          iPulseCoarseDly: model.iPulseCoarseDly,
          iPulseFineDly: model.iPulseFineDly,
          iPulseWdh: model.iPulseWdh,
          iSupCnt: model.iSupCnt,
          jd: model.jd,
          jd_val: jdSource[model.jd],
          jdSources: Object.values(jdSource),
          jdSources_key: Object.keys(jdSource),
          lg: model.lg,
          lg_val: lgSource[model.lg],
          lgSources: Object.values(lgSource),
          lgSources_key: Object.keys(lgSource),
          measurementCtx_gt: model.measurementCtx_gt,
          measurementCtx_gt_val: measurementCtx_gtSource[model.measurementCtx_gt],
          measurementCtx_gtSources: Object.values(measurementCtx_gtSource),
          measurementCtx_gtSources_key: Object.keys(measurementCtx_gtSource),
          measurementCtx_md: model.measurementCtx_md,
          measurementCtx_md_val: measurementCtx_mdSource[model.measurementCtx_md],
          measurementCtx_mdSources: Object.values(measurementCtx_mdSource),
          measurementCtx_mdSources_key: Object.keys(measurementCtx_mdSource),
          pm: model.pm,
          pm_val: pmSource[model.pm],
          pmSources: Object.values(pmSource),
          pmSources_key: Object.keys(pmSource),
          pulserCtx_md: model.pulserCtx_md,
          pulserCtx_md_val: pulserCtx_mdSource[model.pulserCtx_md],
          pulserCtx_mdSources: Object.values(pulserCtx_mdSource),
          pulserCtx_mdSources_key: Object.keys(pulserCtx_mdSource),
          role: model.role,
          role_val: roleSource[model.role],
          roleSources: Object.values(roleSource),
          roleSources_key: Object.keys(roleSource),
          sl: model.sl,
          sl_val: slSource[model.sl],
          slSources: Object.values(slSource),
          slSources_key: Object.keys(slSource),
          sw: model.sw,
          sw_val: swSource[model.sw],
          swSources: Object.values(swSource),
          swSources_key: Object.keys(swSource),
          swDamping: model.swDamping,
          swDamping_val: swDampingSource[model.swDamping],
          swDampingSources: Object.values(swDampingSource),
          swDampingSources_key: Object.keys(swDampingSource),
          swDmpEnb: model.swDmpEnb,
          swSuppressCnt: model.swSuppressCnt,
          swSuppressCnt_val: swSuppressCntSource[model.swSuppressCnt],
          swSuppressCntSources: Object.values(swSuppressCntSource),
          swSuppressCntSources_key: Object.keys(swSuppressCntSource),
          tm: model.tm,
          tm_val: tmSource[model.tm],
          tmSources: Object.values(tmSource),
          tmSources_key: Object.keys(tmSource),
          tower_flange_sum: model.tower_flange_sum,
          trm: model.trm,
          wkm: model.wkm,
          wkm_val: wkmSource[model.wkm],
          wkmSources: Object.values(wkmSource),
          wkmSources_key: Object.keys(wkmSource),
          wm: model.wm,
          wm_val: wmSource[model.wm],
          wmSources: Object.values(wmSource),
          wmSources_key: Object.keys(wmSource)
        };
        data.push({
          dgm: dgm
        });
      });
    } else if (type == 14) {
      var _models = res.model;
      var dgmList = {};
      var dgmInfo = res.dgm_list;
      dgmInfo.forEach(function (dgm) {
        dgmList[dgm.dgm_id] = dgm.dgm_name;
      });
      var arr = [];

      _models.forEach(function (model) {
        model.posLocSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["posClassToPosLoc"])(model.pos_class, 5, model.t_root);
        posClassSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getPosLoc"])(5, model.ch_id, model.t_root);
        dgm = {
          dgm_id_byName: model.dgm_id + '_' + model.byName,
          dgm_id: model.dgm_id,
          dgm_name: model.dgm_name,
          dgmSources: Object.values(dgmList),
          dgmSources_keys: Object.keys(dgmList),
          bolt_sum: model.bolt_sum,
          byActivity: model.byActivity,
          byChannelType: model.byChannelType,
          byId: model.byId,
          byName: model.byName,
          pos_class2600: model.pos_class,
          pos_class2600_val: posClassSource[model.pos_class],
          posClassSources: Object.values(posClassSource),
          posClassSources_keys: Object.keys(posClassSource),
          pos_loc: model.pos_loc,
          pos_loc_val: model.posLocSource[model.pos_loc],
          posLocSources: Object.values(model.posLocSource),
          posLocSources_key: Object.keys(model.posLocSource),
          rowId: model.rowId,
          updateTime: model.updateTime
        };
        arr.push(dgm);
        /*data.push({
            dgm
        });*/
      });

      arr = arr.sort(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["compareName"])('dgm_id_byName')); //根据法兰名称排序

      arr.forEach(function (item) {
        var dgm = item;
        data.push({
          dgm: dgm
        });
      });
    } else if (type == 15) {
      var _models2 = res.model;
      var _dgmList = {};
      var flangeList = {};
      var _dgmInfo = res.dgm_list;

      _dgmInfo.forEach(function (dgm) {
        _dgmList[dgm.dgm_id] = dgm.dgm_name;
        flangeList[dgm.dgm_id] = {};
        flangeList[dgm.dgm_id][255] = '无';
        dgm.flangeList.forEach(function (flange) {
          flangeList[dgm.dgm_id][flange.byId] = flange.byName;
        });
      });

      var _arr = [];

      _models2.forEach(function (model) {
        dgm = {
          dgm_id_byName: model.dgm_id + '_' + model.byName,
          bolt_num_beigin: model.bolt_num_beigin,
          bolt_num_end: model.bolt_num_end,
          byActivity: model.byActivity,
          byChannelType: model.byChannelType,
          byId: model.byId,
          byName: model.byName,
          flange_id: model.flange_id,
          flange_name: flangeList[model.dgm_id][model.flange_id],
          flangeSources: Object.values(flangeList[model.dgm_id]),
          flangeSources_keys: Object.keys(flangeList[model.dgm_id]),
          collect_mode: model.collect_mode,
          collect_mode_val: collectModeSource[model.collect_mode],
          collectModeSources: Object.values(collectModeSource),
          collectModeSources_keys: Object.keys(collectModeSource),
          dgm_name: model.dgm_name,
          dgm_id: model.dgm_id,
          dgmSources: Object.values(_dgmList),
          dgmSources_keys: Object.keys(_dgmList),
          preps_id: model.preps_id,
          rowId: model.rowId,
          updateTime: model.updateTime
        };

        _arr.push(dgm); // data.push({
        //     dgm
        // });

      });

      _arr = _arr.sort(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["compareName"])('dgm_id_byName')); //根据法兰名称排序

      _arr.forEach(function (item) {
        var dgm = item;
        data.push({
          dgm: dgm
        });
      });
    } else if (type == 999) {
      res.model.forEach(function (model) {
        dgm = {
          clampLen: model.clampLen,
          fBoltLength: model.fBoltLength,
          fDiameter: model.fDiameter,
          fittingRatio: model.fittingRatio,
          totalLen: model.totalLen,
          updateTime: model.updateTime,
          dgm_id: model.dgm_id,
          dgm_name: model.dgm_name,
          modelName: model.modelName,
          version: model.version,
          fitting: '算法' + model.fitting
        };
        data.push({
          dgm: dgm
        });
      });
    } else {
      res.model.forEach(function (model) {
        dgm = {
          updateTime: model.updateTime,
          //更新时间
          machineId: model.machineId,
          //机组id
          t_root: model.t_root,
          rowId: model.rowId,
          ch_id: model.ch_id,
          //通道id
          ch_name: model.ch_name,
          //通道名称
          ch_type: model.ch_type,
          //通道类型
          ch_class: model.ch_class,
          //机泵-通道（采集器、测点）对应关系
          ch_activity: model.ch_activity,
          //是否有效 0=有效 1=无效
          dgm_id: model.dgmInfo.dgm_id,
          //采集器uid
          dgm_name: model.dgmInfo.dgm_name,
          //采集器uid
          dgm_type: model.dgmInfo.dgm_type,
          //采集器型号
          hw_db_ver: model.dgmInfo.hw_db_ver,
          hw_ab_ver: model.dgmInfo.hw_ab_ver,
          hw_range_type: model.dgmInfo.hw_range_type,
          same_pre: model.same_pre
        };

        if (type == 2) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.vib == null || model.baseInfo.vib == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.vib信息，数据错误！');
            return data;
          }

          sensorSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["sensorTypeSource"])(model.dgmInfo.dgm_type); //传感器类型下拉选项

          var sensorUnit = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["sensorType"])(model.baseInfo.vib.bySensorType)[1];
          model.baseInfo.vib.posLocSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["posClassToPosLoc"])(model.baseInfo.vib.pos_class, model.dgmInfo.dgm_type, model.t_root);
          posClassSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getPosLoc"])(model.dgmInfo.dgm_type, model.ch_id, model.t_root);

          if (model.dgmInfo.dgm_type == 4) {//mhd采集器没有硬件滤波，软件滤波，阶次滤波，将值置空

            /*model.baseInfo.vib.byHw_Filter="";
            model.baseInfo.vib.order_filter="";
            model.baseInfo.vib.bySw_Filter="";*/
          }

          if (model.dgmInfo.dgm_type == 7) {//v1采集器没有阶次滤波，将值置空

            /* model.baseInfo.vib.order_filter="";*/
          }

          if (model.dgmInfo.dgm_type == 1) {
            hwFilterSource = [['127', '自动滤波'], ['0', '不需要滤波'], ['1', '需要滤波'], ['2', '500Hz'], ['3', '2KHz'], ['4', '10KHz']];
            vibSignalZoomSource = [["1", "1/5倍"], ["2", "1倍"], ["3", "5倍"], ["4", "25倍"], ["5", "125倍"], ["6", "1/5倍(ac+dc)"]];
            vibSignalZoomMaxVal = [10000, 10000, 2000, 400, 80, 50000];
            vibSignalZoomKey = ["1", "2", "3", "4", "5", "6"];
          } else if (model.dgmInfo.dgm_type == 2) {
            hwFilterSource = [['127', '自动滤波'], ['0', '不滤波'], ['1', '10Hz'], ['2', '1KHz'], ['3', '50Hz']];

            if (model.dgmInfo.hw_db_ver == 100) {
              vibSignalZoomSource = [["0", "自动量程"], ["50", "0.125"], ["51", "0.25"], ["1", "0.3125"], ["52", "0.5"], ["53", "1"], ["54", "2"], ["55", "4"], ["56", "8"], ["57", "16"], ["58", "32"], ["59", "64"], ["11", "320"], ["43", "1600"]];
              vibSignalZoomMaxVal = ["自动量程", 40000, 32000, 25600, 16000, 8000, 4000, 2000, 1000, 500, 250, 125, 25, 5];
              vibSignalZoomKey = ["0", "50", "51", "1", "52", "53", "54", "55", "56", "57", "58", "59", "11", "42"];
            } else {
              vibSignalZoomSource = [["0", "自动量程"], ["1", "0.5"], ["9", "5"], ["25", "40"], ["29", "400"]];
              vibSignalZoomMaxVal = ["自动量程", 20000, 2000, 250, 25];
              vibSignalZoomKey = ["0", "1", "9", "25", "29"];
            }
          } else if (model.dgmInfo.dgm_type == 3) {
            hwFilterSource = [['127', '自动滤波'], ['1', '1KHz'], ['2', '10KHz'], ['3', '40KHz']];

            if (parseInt(model.dgmInfo.hw_db_ver) <= 100 && model.dgmInfo.hw_range_type == 0) {
              //group1=0 group2=0
              vibSignalZoomSource = [["0", "自动量程"], ["1", "0.5"], ["2", "2.5"], ["3", "12.5"]];
              vibSignalZoomMaxVal = ["自动量程", 8000, 1600, 320];
              vibSignalZoomKey = ["0", "1", "2", "3"];
            } else if (parseInt(model.dgmInfo.hw_db_ver) <= 100 && model.dgmInfo.hw_range_type != 0) {
              //group1=0 group2=1
              vibSignalZoomSource = [["0", "自动量程"], ["1", "0.15625"], ["2", "0.3125"], ["3", "0.5"], ["4", "0.625"], ["5", "0.78125"], ["6", "1.25"], ["7", "1.5625"], ["8", "2.5"], ["9", "3.125"], ["10", "5"], ["11", "6.25"], ["12", "10"], ["13", "12.5"], ["14", "20"], ["15", "25"], ["16", "40"], ["17", "50"], ["18", "80"], ["19", "100"], ["20", "160"], ["21", "200"], ["22", "400"], ["23", "800"]];
              vibSignalZoomMaxVal = ["自动量程", 25600, 12800, 8000, 6400, 5120, 3200, 2560, 1600, 1280, 800, 640, 400, 320, 200, 160, 100, 80, 50, 40, 25, 20, 10, 5];
              vibSignalZoomKey = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"];
            } else if (parseInt(model.dgmInfo.hw_db_ver) > 100 && model.dgmInfo.hw_range_type == 0) {
              //group1=1 group2=0
              vibSignalZoomSource = [["0", "自动量程"], ["1", "0.5"], ["2", "2.5"], ["3", "12.5"], ["4", "62.5"]];
              vibSignalZoomMaxVal = ["自动量程", 8000, 1600, 320, 64];
              vibSignalZoomKey = ["0", "1", "2", "3", "4"];
            } else if (parseInt(model.dgmInfo.hw_db_ver) > 100 && model.dgmInfo.hw_range_type != 0) {
              //group1=1 group2=1
              vibSignalZoomSource = [["0", "自动量程"], ["1", "0.25"], ["2", "0.5"], ["3", "1"], ["4", "1.25"], ["5", "2"], ["6", "2.5"], ["7", "4"], ["8", "5"], ["9", "6.25"], ["10", "8"], ["11", "10"], ["12", "12.5"], ["13", "16"], ["14", "20"], ["15", "25"], ["16", "32"], ["17", "40"], ["18", "50"], ["19", "64"], ["20", "80"], ["21", "100"], ["22", "128"], ["23", "160"], ["24", "200"], ["25", "256"], ["26", "320"], ["27", "400"], ["28", "640"], ["29", "800"], ["30", "1280"], ["31", "1600"], ["32", "3200"], ["33", "6400"]];
              vibSignalZoomMaxVal = ["自动量程", 16000, 8000, 4000, 3200, 2000, 1600, 1000, 800, 640, 500, 400, 320, 250, 200, 160, 125, 100, 80, 62.5, 50, 40, 31.25, 25, 20, 15.625, 12.5, 10, 6.25, 5, 3.125, 2.5, 1.25, 0.625];
              vibSignalZoomKey = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33"];
            }
          } else if (model.dgmInfo.dgm_type == 7) {
            hwFilterSource = [['127', '自动滤波'], ['0', '1kLP'], ['1', '10kLP'], ['2', '20kLP'], ['3', '16k-20k检波']];
            vibSignalZoomSource = [["255", "固定量程"]];
            vibSignalZoomMaxVal = ["固定量程"];
            vibSignalZoomKey = ["255"];
          } else if (model.dgmInfo.dgm_type == 4) {
            if (model.hw_mb_ver == 1) {
              //hw_mb_ver硬件版本号:1代表老版本，4代表新版本，如果给0等同于新版本
              vibSignalZoomSource = [["0", "自动"], ["1", "125"], ["2", "25"], ["3", "5"], ["4", "1"], ["5", "0.2"]];
              vibSignalZoomMaxVal = ["自动", 40, 200, 1000, 5000, 25000];
              vibSignalZoomKey = ["0", "1", "2", "3", "4", "5"];
            } else if (model.hw_mb_ver == 4 || model.hw_mb_ver == 0) {
              vibSignalZoomSource = [["0", "自动"], ["1", "50"], ["2", "5"], ["3", "0.5"]];
              vibSignalZoomMaxVal = ["自动", 400, 4000, 40000];
              vibSignalZoomKey = ["0", "1", "2", "3"];
            }
          } else {
            hwFilterSource = [['127', '自动滤波'], ['0', '不需要滤波'], ['1', '需要滤波']];
            vibSignalZoomSource = [["0", "自动"], ["1", "125"], ["2", "25"], ["3", "5"], ["4", "1"], ["5", "0.2"]];
            vibSignalZoomMaxVal = ["自动", 40, 200, 1000, 5000, 25000];
            vibSignalZoomKey = ["0", "1", "2", "3", "4", "5"];
          }

          if (model.dgmInfo.dgm_type == 4) {
            intZoomSource = {
              '0': '自动',
              '1': '100',
              '2': '10',
              '3': '1'
            }; //mhd采集器积分量程
          } else {
            intZoomSource = {};
            /*model.baseInfo.vib.int_zoom = "";//只有mhd有积分量程，其他类型采集器置空*/
          }

          unitSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["unitToSources"])(sensorUnit, model.baseInfo.vib.byIntegral, model.dgmInfo.dgm_type)[0];
          integralSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["unitToSources"])(sensorUnit, model.baseInfo.vib.byIntegral, model.dgmInfo.dgm_type)[1];
          vibSignalZoomVal = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getVibSignalZoom"])(vibSignalZoomMaxVal, model.baseInfo.vib.dwVib_Scale); //量程

          posPartSource = {};

          if (model.itemList.length > 0) {
            model.itemList.forEach(function (drivechain) {
              if (drivechain.itemType != 4 && drivechain.itemType != "" && drivechain.itemType != 1) {
                posPartSource[drivechain.id] = drivechain.name;
                posPartSource['255'] = '无';
              }
            });
          } else {
            //没有传动链
            posPartSource['255'] = '无';
          }

          Object.assign(dgm, {
            bind_count: model.bind_count,
            //该通道是否绑定了测点0表示没有，1表示有
            hw_mb_ver: model.hw_mb_ver,
            //mhd采集器mb版本号
            rowName: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getVibChNum"])(model),
            //通道号（丝印）
            pos_class: model.baseInfo.vib.pos_class,
            pos_class_val: posClassSource[model.baseInfo.vib.pos_class],
            //安装分类
            posClassSources: Object.values(posClassSource),
            posClassSources_key: Object.keys(posClassSource),
            pos_loc: model.baseInfo.vib.pos_loc,
            pos_loc_val: model.baseInfo.vib.posLocSource[model.baseInfo.vib.pos_loc],
            //安装位置
            posLocSources: Object.values(model.baseInfo.vib.posLocSource),
            posLocSources_key: Object.keys(model.baseInfo.vib.posLocSource),
            pos_part: model.baseInfo.vib.pos_part,
            pos_part_val: posPartSource[model.baseInfo.vib.pos_part],
            posPartSources: Object.values(posPartSource),
            posPartSources_key: Object.keys(posPartSource),
            bySensorType: model.baseInfo.vib.bySensorType,
            bySensorType_val: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["sensorType"])(model.baseInfo.vib.bySensorType)[0],
            //传感器类型
            sensorSources: Object.values(sensorSource),
            sensorSources_key: Object.keys(sensorSource),
            dwVib_Scale: model.baseInfo.vib.dwVib_Scale,
            //灵敏系数
            scale_unit: sensorUnit,
            //灵敏系数单位
            scale_unit_val: model.baseInfo.vib.scale_unit,
            byHwIntegral: model.baseInfo.vib.byHwIntegral,
            //是否硬件积分，只有mhd有这个属性
            byHwIntegral_val: integralSource[model.baseInfo.vib.byHwIntegral],
            //
            byHwIntegralSources: Object.values(byHwIntegralSource),
            byHwIntegralSources_key: Object.keys(byHwIntegralSource),
            byIntegral: model.baseInfo.vib.byIntegral,
            byIntegral_val: integralSource[model.baseInfo.vib.byIntegral],
            //是否软件积分
            integralSources: Object.values(integralSource),
            integralSources_key: Object.keys(integralSource),
            byUnit: model.baseInfo.vib.byUnit,
            //单位
            byUnitName: model.baseInfo.vib.byUnitName,
            //单位名称
            unitSources: Object.values(unitSource),
            unitSources_key: Object.keys(unitSource),
            byVib_Signal_Zoom: model.baseInfo.vib.byVib_Signal_Zoom,

            /*byVib_Signal_Zoom_val:getArrFromObj(vibSignalZoomSource)[1][getIndexOfArr(getArrFromObj(vibSignalZoomSource)[0],model.baseInfo.vib.byVib_Signal_Zoom)],//信号增益
            vibSignalZoomSources:getArrFromObj(vibSignalZoomSource)[1],
            vibSignalZoomSources_key:getArrFromObj(vibSignalZoomSource)[0],*/
            byVib_Signal_Zoom_val: vibSignalZoomVal[getIndexOfArr(vibSignalZoomKey, model.baseInfo.vib.byVib_Signal_Zoom)],
            //信号增益
            vibSignalZoomSources: vibSignalZoomVal,
            vibSignalZoomSources_key: vibSignalZoomKey,
            vibSignalZoomMaxVal: vibSignalZoomMaxVal,
            byHw_Filter: model.baseInfo.vib.byHw_Filter,
            byHw_Filter_val: getArrFromObj(hwFilterSource)[1][getIndexOfArr(getArrFromObj(hwFilterSource)[0], model.baseInfo.vib.byHw_Filter)],
            //硬件滤波
            hwFilterSources: getArrFromObj(hwFilterSource)[1],
            hwFilterSources_key: getArrFromObj(hwFilterSource)[0],
            bySw_Filter: model.baseInfo.vib.bySw_Filter,
            bySw_Filter_val: swFilterSource[model.baseInfo.vib.bySw_Filter],
            //软件滤波
            swFilterSources: Object.values(swFilterSource),
            swFilterSources_key: Object.keys(swFilterSource),
            dwRef_gap: model.baseInfo.vib.dwRef_gap,
            //参考间隙电压
            shHi_vol: model.baseInfo.vib.shHi_vol,
            //电压范围高
            shLo_vil: model.baseInfo.vib.shLo_vil,
            //电压范围低
            power_a: model.baseInfo.vib.power_a,
            //有效频率下限
            power_b: model.baseInfo.vib.power_b,
            //有效频率上限
            power_time: model.baseInfo.vib.power_time,
            power_time_val: powerTimeSource[model.baseInfo.vib.power_time],
            //能量有效值计算时间
            powerTimeSources: Object.values(powerTimeSource),
            powerTimeSources_key: Object.keys(powerTimeSource),
            order_filter: model.baseInfo.vib.order_filter,
            //阶次滤波
            trans_ch_type: model.trans_ch_type,
            //是否振动转温度：0振动通道；4转温度通道; 3表示9通道（通道不能转）
            trans_ch_type_val: transChTypeSource[model.trans_ch_type],
            transChTypeSources: Object.values(transChTypeSource),
            transChTypeSources_key: Object.keys(transChTypeSource),
            null_shift: model.baseInfo.vib.null_shift,
            //零漂
            ac_corr: model.baseInfo.vib.ac_corr,
            //交流校正系数
            dc_corr: model.baseInfo.vib.dc_corr,
            //直流校正系数
            int_zoom: model.baseInfo.vib.int_zoom,
            //mhd的积分量程
            int_zoom_val: intZoomSource[model.baseInfo.vib.int_zoom],
            intZoomSources: Object.values(intZoomSource),
            intZoomSources_key: Object.keys(intZoomSource),

            /*tms采集器*/
            pre_id: model.pre_id,
            //前置id
            byId: model.baseInfo.vib.byId,
            //
            dwVib_Null_shift: model.baseInfo.vib.dwVib_Null_shift,
            //vib 零漂
            dwVib_Ac_corr: model.baseInfo.vib.dwVib_Ac_corr,
            //振动交流矫正参数；3.5；必须大于0
            dwVib_Dc_corr: model.baseInfo.vib.dwVib_Dc_corr,
            //振动直流矫正参数；3.5；必须大于0
            dwVib_Ac_integ1_corr: model.baseInfo.vib.dwVib_Ac_integ1_corr,
            //振动交流一次积分矫正参数；3.5；必须大于0
            dwVib_AC_integ2_corr: model.baseInfo.vib.dwVib_AC_integ2_corr,
            //振动交流二次积分矫正参数；3.5；必须大于0
            conn_mode: model.baseInfo.vib.conn_mode,
            //接线方式 0 2线　 1 3线
            supply_voltage: model.baseInfo.vib.supply_voltage //供电电压 0 +24V 1 -24V

          });
          /*if(model.dgmInfo.dgm_type!=3){//非DGU2000V2采集器的通道号（丝印）显示置空
              dgm.rowName = '';
          }*/
        }

        if (type == 3) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.temp == null || model.baseInfo.temp == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.temp信息，数据错误！');
            return data;
          }

          model.baseInfo.temp.posLocSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["posClassToPosLoc"])(model.baseInfo.temp.pos_class, model.dgmInfo.dgm_type, model.t_root);
          posClassSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getPosLoc"])(model.dgmInfo.dgm_type);
          unitSource = {
            '6': '℃',
            '7': '°F'
          }; //单位下拉选项

          if (model.dgmInfo.dgm_type == 2) {
            if (model.dgmInfo.hw_db_ver == 0) {
              // rangeSource={"0":"1倍","1":"0.2倍","2":"2倍","3":"4倍"};
              rangeSource = {
                "0": "4000mV",
                "1": "20000mV",
                "2": "2000mV",
                "3": "1000mV"
              };
            } else {
              // rangeSource={"0":"5倍","1":"0.5倍"};
              rangeSource = {
                "0": "2000mV",
                "1": "20000mV"
              };
            }
          } else if (model.dgmInfo.dgm_type == 3) {
            // rangeSource={"0":"0.5倍","1":"1倍","2":"2倍"};
            rangeSource = {
              "0": "16000mV",
              "1": "8000mV",
              "2": "4000mV"
            };
          } else if (model.dgmInfo.dgm_type == 7) {
            rangeSource = {
              "255": "固定量程"
            };
          }

          Object.assign(dgm, {
            bind_count: model.bind_count,
            //该通道是否绑定了测点0表示没有，1表示有
            rowName: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getTempChNum"])(model),
            //通道号（丝印）
            pos_class: model.baseInfo.temp.pos_class,
            pos_class_val: posClassSource[model.baseInfo.temp.pos_class],
            //安装分类
            posClassSources: Object.values(posClassSource),
            posClassSources_key: Object.keys(posClassSource),
            pos_loc: model.baseInfo.temp.pos_loc,
            pos_loc_val: model.baseInfo.temp.posLocSource[model.baseInfo.temp.pos_loc],
            //安装位置
            posLocSources: Object.values(model.baseInfo.temp.posLocSource),
            posLocSources_key: Object.keys(model.baseInfo.temp.posLocSource),
            bySensorType: model.baseInfo.temp.bySensorType,
            //单位
            byUnit: model.baseInfo.temp.byUnit,
            //单位
            byUnitName: model.baseInfo.temp.byUnitName,
            //单位名称
            unitSources: Object.values(unitSource),
            unitSources_key: Object.keys(unitSource),
            byStaType: model.baseInfo.temp.byStaType,
            byStaType_val: byStaTypeSources[model.baseInfo.temp.byStaType],
            //过程量类型
            byStaTypeSources: Object.values(byStaTypeSources),
            //过程量类型下拉选项
            byStaTypeSources_key: Object.keys(byStaTypeSources),
            //过程量类型下拉选项
            dwHi_signal_value: model.baseInfo.temp.dwHi_signal_value,
            //信号输入范围高/输入信号高（B-X）
            dwLow_signal_value: model.baseInfo.temp.dwLow_signal_value,
            //信号输入范围低/输入信号低（A-X）
            dwHi_eng_value: model.baseInfo.temp.dwHi_eng_value,
            //工程量输入范围高/工程量高（B-Y）
            dwLow_eng_value: model.baseInfo.temp.dwLow_eng_value,
            //工程量输入范围低/工程量低（A-Y）
            range: model.baseInfo.temp.range,
            range_val: rangeSource[model.baseInfo.temp.range],
            //信号增益
            rangeSources: Object.values(rangeSource),
            rangeSources_key: Object.keys(rangeSource),
            trans_ch_type: model.trans_ch_type,
            //是否振动转温度：0振动通道；4转温度通道
            trans_ch_type_val: transChTypeSource[model.trans_ch_type],
            transChTypeSources: Object.values(transChTypeSource),
            transChTypeSources_key: Object.keys(transChTypeSource),

            /*tms*/
            pre_id: model.pre_id,
            //前置id
            conn_mode: model.baseInfo.temp.conn_mode,
            //
            supply_voltage: model.baseInfo.temp.supply_voltage,
            dwNull_shift: model.baseInfo.temp.dwNull_shift,
            //零漂
            dwCorr: model.baseInfo.temp.dwCorr //校正系数

          }); // if(model.dgmInfo.dgm_type!=3){//非DGU2000V2采集器的通道号（丝印）显示置空
          //     dgm.rowName = '';
          // }
        }

        if (type == 4) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.sta == null || model.baseInfo.sta == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.sta信息，数据错误！');
            return data;
          }

          if (model.dgmInfo.dgm_type == 1) {
            // model.baseInfo.sta.dwHi_signal_value = 0;
            staByStaTypeSource = {
              '0': '1~5V',
              '1': '-20~20V',
              '2': '4~20mA'
            };
          } else if (model.dgmInfo.dgm_type == 2) {
            staByStaTypeSource = {
              '2': '4~20mA',
              '3': '-10~10V'
            };
          } else if (model.dgmInfo.dgm_type == 4 || model.dgmInfo.dgm_type == 6) {
            staByStaTypeSource = {
              '2': '4~20mA'
            };
          } else {
            staByStaTypeSource = {
              '1': '-20~20V',
              '2': '4~20mA'
            };
          }

          model.rowName = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getChNum"])(model, model.dgmInfo.dgm_type); //通道号

          sensorSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["sensorTypeSource"])(model.dgmInfo.dgm_type); //传感器类型下拉选项

          byUnitNameSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["unitToSources"])(null, null, model.dgmInfo.dgm_type, model.baseInfo.sta.bySensorType)[0];
          Object.assign(dgm, {
            rowName: model.rowName,
            //通道号
            bySensorType: model.baseInfo.sta.bySensorType,
            bySensorType821_val: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["sensorType"])(model.baseInfo.sta.bySensorType)[0],
            //传感器类型
            sensorSources: Object.values(sensorSource),
            sensorSources_key: Object.keys(sensorSource),
            byUnit: model.baseInfo.sta.byUnit,
            //单位
            byUnitName_val: model.baseInfo.sta.byUnitName,
            //单位名称
            byUnitNameSources: Object.values(byUnitNameSource),
            byUnitNameSources_key: Object.keys(byUnitNameSource),
            byStaType: model.baseInfo.sta.byStaType,
            byStaType_val: staByStaTypeSource[model.baseInfo.sta.byStaType],
            //过程量类型
            byStaTypeSources: Object.values(staByStaTypeSource),
            //过程量类型下拉选项
            byStaTypeSources_key: Object.keys(staByStaTypeSource),
            dwHi_signal_value: model.baseInfo.sta.dwHi_signal_value,
            //信号输入范围高
            dwLow_signal_value: model.baseInfo.sta.dwLow_signal_value,
            //信号输入范围低
            dwHi_eng_value: model.baseInfo.sta.dwHi_eng_value,
            //工程量输入范围高
            dwLow_eng_value: model.baseInfo.sta.dwLow_eng_value,
            //工程量输入范围低
            dwNull_shift: model.baseInfo.sta.dwNull_shift,
            //零漂
            dwCorr: model.baseInfo.sta.dwCorr //校正系数

          });

          if (model.dgmInfo.dgm_type != 6) {
            //非821采集器的传感器类型显示置空
            dgm.bySensorType821_val = '';
          }
        }

        if (type == 5) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.speed == null || model.baseInfo.speed == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.speed信息，数据错误！');
            return data;
          }

          if (model.dgmInfo.dgm_type == 4 || model.dgmInfo.dgm_type == 1) {//mhd采集器"最低转速"字段置为空,"键项增益"置为空

            /*model.baseInfo.speed.min_speed="";
            model.baseInfo.speed.byStrong="";*/
          }

          if (model.dgmInfo.dgm_type == 1) {//v1采集器以下几项内容置空并且不可编辑

            /*model.baseInfo.speed.polar="";//极性
            model.baseInfo.speed.high_density="";//高密度采样
            model.baseInfo.speed.max_speed="";//最高转速
            model.baseInfo.speed.min_speed="";//最低转速*/
          }

          if (model.dgmInfo.dgm_type != 1) {
            model.baseInfo.speed.reverse = ''; //dgu2000v1采集器的触发类型,其他采集器没有这个字段置空
          }

          if (model.dgmInfo.dgm_type != 7) {
            model.baseInfo.speed.chan_type = ''; //tms采集器的数据来源chan_type,其他采集器没有这个字段置空
          }

          if (model.dgmInfo.dgm_type == 3 && model.ch_id == 0 || model.dgmInfo.dgm_type == 1 && model.ch_id == 16) {
            byStrongTypeSource = {
              "255": "无增益"
            };
          } else if (model.ch_id == 1) {
            if (model.hw_ch_type == 3) {
              byStrongTypeSource = {
                "0": "自动",
                "1": "1",
                "2": "7.2",
                "3": "63"
              };
            } else {
              byStrongTypeSource = {
                "127": "自动",
                "0": "10",
                "1": "1",
                "2": "0.4",
                "3": "-1"
              };
            }
          }

          if (model.dgmInfo.dgm_type == 7) {
            //暂定tms无增益
            byStrongTypeSource = {
              "255": "无增益"
            };
          }

          Object.assign(dgm, {
            pos_class: model.baseInfo.speed.pos_class,
            pos_loc: model.baseInfo.speed.pos_loc,
            bySensorType: model.baseInfo.speed.bySensorType,
            byUnit: model.baseInfo.speed.byUnit,
            //单位
            byUnitName_val: model.baseInfo.speed.byUnitName,
            //单位名称
            byStrong: model.baseInfo.speed.byStrong,
            byStrong_val: byStrongTypeSource[model.baseInfo.speed.byStrong],
            //键相增益
            byStrongSources: Object.values(byStrongTypeSource),
            byStrongSources_key: Object.keys(byStrongTypeSource),
            dwCompre_volt: model.baseInfo.speed.dwCompre_volt,
            dwCompre_volt_val: dwCompreVoltSources[model.baseInfo.speed.dwCompre_volt],
            //比较电压 @dwCompre_volt
            dwCompreVoltSources: Object.values(dwCompreVoltSources),
            dwCompreVoltSources_key: Object.keys(dwCompreVoltSources),
            reverse: model.baseInfo.speed.reverse,
            //dgu2000v1采集器的触发类型
            reverse_val: reverseSource[model.baseInfo.speed.reverse],
            reverseSources: Object.values(reverseSource),
            reverseSources_key: Object.keys(reverseSource),
            polar: model.baseInfo.speed.polar,
            polar_val: polarSources[model.baseInfo.speed.polar],
            //极性
            polarSources: Object.values(polarSources),
            polarSources_key: Object.keys(polarSources),
            high_density: model.baseInfo.speed.high_density,
            high_density_val: highDensitySources[model.baseInfo.speed.high_density],
            //高密度采样
            highDensitySources: Object.values(highDensitySources),
            highDensitySources_key: Object.keys(highDensitySources),
            chan_type: model.baseInfo.speed.chan_type,
            chan_type_val: chanTypeSource[model.baseInfo.speed.chan_type],
            // 数据来源
            chanTypeSources: Object.values(chanTypeSource),
            chanTypeSources_key: Object.keys(chanTypeSource),
            max_speed: model.baseInfo.speed.max_speed,
            //最高转速
            min_speed: model.baseInfo.speed.min_speed,
            //最低转速
            shHi_vol: model.baseInfo.speed.shHi_vol,
            //电压范围高
            shLo_vil: model.baseInfo.speed.shLo_vil,
            //电压范围低

            /*tms*/
            byId: model.baseInfo.speed.byId,
            dwSpeed_Ac_corr: model.baseInfo.speed.dwSpeed_Ac_corr,
            //交流校正系数	float
            dwSpeed_Dc_corr: model.baseInfo.speed.dwSpeed_Dc_corr,
            //直流校正系数	float
            dwSpeed_Null_shift: model.baseInfo.speed.dwSpeed_Null_shift //直流零点偏移	float

          });
        }

        if (type == 6) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.digital == null || model.baseInfo.digital == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.digital信息，数据错误！');
            return data;
          }

          if (model.dgmInfo.dgm_type == 4) {//mhd采集器没有数字量类型字段,将默认值设为空
            // model.baseInfo.digital.byifpower = "";
          }

          if (model.dgmInfo.dgm_type == 1) {
            if (model.baseInfo.digital.byDigitalType == 0) {
              byifpowerSource = {
                "0": "无"
              };
            } else {
              byifpowerSource = {
                "0": "带电源",
                "1": "不带电源"
              };
            }
          } else if (model.dgmInfo.dgm_type == 2) {
            if (model.baseInfo.digital.byDigitalType == 1) {
              byifpowerSource = {
                "0": "继电器断开",
                "1": "继电器闭合"
              };
            } else {
              byifpowerSource = {
                "0": "无",
                "1": "转速"
              };
            }
          } else {
            if (model.baseInfo.digital.byDigitalType == 1) {
              byifpowerSource = {
                "0": "继电器断开",
                "1": "继电器闭合"
              };
            } else {
              byifpowerSource = {
                "0": "无",
                "1": "不带电源"
              };
            }
          }

          if (model.dgmInfo.dgm_type == 4) {
            byifalarmsource = {
              "0": "有效",
              "1": "无效"
            };
          } else {
            if (model.baseInfo.digital.byDigitalType == 1) {
              byifalarmsource = {
                "0": "关",
                "1": "开"
              };
            } else {
              byifalarmsource = {
                "0": "无"
              };
            }
          }

          Object.assign(dgm, {
            pos_class: model.baseInfo.digital.pos_class,
            pos_loc: model.baseInfo.digital.pos_loc,
            bySensorType: model.baseInfo.digital.bySensorType,
            byUnit: model.baseInfo.digital.byUnit,
            //单位
            byUnitName_val: model.baseInfo.digital.byUnitName,
            //单位名称
            byDigitalType: model.baseInfo.digital.byDigitalType,
            byDigitalType_val: byDigitalTypeSources[model.baseInfo.digital.byDigitalType],
            //数字量类型 @byDigitalType
            byDigitalTypeSources: Object.values(byDigitalTypeSources),
            byDigitalTypeSources_key: Object.keys(byDigitalTypeSources),
            byifpower: model.baseInfo.digital.byifpower,
            byifpower_val: byifpowerSource[model.baseInfo.digital.byifpower],
            //数字量状态 @byifpower
            byifpowerSources: Object.values(byifpowerSource),
            byifpowerSources_key: Object.keys(byifpowerSource),
            byifalarm: model.baseInfo.digital.byifalarm,
            byifalarm_val: byifalarmsource[model.baseInfo.digital.byifalarm],
            //自检输出 @byifalarm
            byifalarmsources: Object.values(byifalarmsource),
            byifalarmsources_key: Object.keys(byifalarmsource),
            bybindch: model.baseInfo.digital.bybindch,
            bybindch_val: getArrFromObj(bybindchSources)[1][getIndexOfArr(getArrFromObj(bybindchSources)[0], model.baseInfo.digital.bybindch)],
            //信号绑定
            bybindchSources: getArrFromObj(bybindchSources)[1],
            bybindchSources_key: getArrFromObj(bybindchSources)[0],
            bybindtype: model.baseInfo.digital.bybindtype,
            bybindtype_val: getArrFromObj(bybindtypeSources)[1][getIndexOfArr(getArrFromObj(bybindtypeSources)[0], model.baseInfo.digital.bybindtype)],
            //信号输出
            bybindtypeSources: getArrFromObj(bybindtypeSources)[1],
            bybindtypeSources_key: getArrFromObj(bybindtypeSources)[0]
          });
        }

        if (type == 7) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.outer == null || model.baseInfo.outer == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.outer信息，数据错误！');
            return data;
          }

          if (model.dgmInfo.dgm_type == 4) {//mhd采集器"类型、IP地址、端口号"字段置为空
            // model.baseInfo.outer.dest_type="";
            // model.baseInfo.outer.dest_ip="";
            // model.baseInfo.outer.dest_port="";
          }

          if (model.dgmInfo.dgm_type == 1) {
            destTypeSources = {
              "串口": "0",
              "PT-04": "1",
              "倾角": "3",
              "JC2300DWCV": "2",
              "JC2301B": "4",
              "JC2301M": "5"
            }; //型号暂时只做了串口，其他先注释
          } else {
            destTypeSources = {
              "串口": "0"
            };
          }

          databitSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["destToDatabit"])(model.baseInfo.outer.dest_type);
          Object.assign(dgm, {
            pos_class: model.baseInfo.outer.pos_class,
            pos_loc: model.baseInfo.outer.pos_loc,
            dest_type: model.baseInfo.outer.dest_type,
            dest_type_val: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["findKey"])(model.baseInfo.outer.dest_type, destTypeSources),
            //型号
            destTypeSources: Object.keys(destTypeSources),
            destTypeSources_key: Object.values(destTypeSources),
            dest_ip: model.baseInfo.outer.dest_ip,
            //ip地址
            dest_port: model.baseInfo.outer.dest_port,
            //端口号
            databit: model.baseInfo.outer.databit,
            databit_val: getArrFromObj(databitSource)[1][getIndexOfArr(getArrFromObj(databitSource)[0], model.baseInfo.outer.databit)],
            //数据位
            databitSources: getArrFromObj(databitSource)[1],
            databitSources_key: getArrFromObj(databitSource)[0],
            stopbit: model.baseInfo.outer.stopbit,
            stopbit_val: stopbitSource[model.baseInfo.outer.stopbit],
            //停止位
            stopbitSources: Object.values(stopbitSource),
            stopbitSources_key: Object.keys(stopbitSource),
            baudrate: model.baseInfo.outer.baudrate,
            baudrate_val: baudrateSources[model.baseInfo.outer.baudrate],
            //波特率
            baudrateSources: Object.values(baudrateSources),
            baudrateSources_key: Object.keys(baudrateSources),
            parity: model.baseInfo.outer.parity,
            parity_val: paritySources[model.baseInfo.outer.parity],
            //奇偶校验
            paritySources: Object.values(paritySources),
            paritySources_key: Object.keys(paritySources),
            mode: model.baseInfo.outer.mode,
            mode_val: modeSources[model.baseInfo.outer.mode],
            //传输方式
            modeSources: Object.values(modeSources),
            modeSources_key: Object.keys(modeSources),
            masterslave: model.baseInfo.outer.masterslave,
            masterslave_val: masterslaveSources[model.baseInfo.outer.masterslave],
            //设备选择
            masterslaveSources: Object.values(masterslaveSources),
            masterslaveSources_key: Object.keys(masterslaveSources),
            slaveid: model.baseInfo.outer.slaveid //从设备号

          });
        }

        if (type == 9) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.capture == null || model.baseInfo.capture == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.capture信息，数据错误！');
            return data;
          }

          if (res.vib_list == undefined || res.vib_list == null || res.vib_list.length === 0) {
            console.log('缺少vib_list信息,数据错误！');
            return data;
          }

          channelSource = {
            "无": "255"
          }; //长采样通道

          for (var j = 0; j < res.vib_list.length; j++) {
            if (model.dgmInfo.dgm_id == res.vib_list[j].dgm_id) {
              var chanList = res.vib_list[j].vib_value;
              model.dgmInfo.channels = chanList.sort(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["compareName"])('ch_name')); //通道列表根据通道名从小到大排序

              break;
            }
          }

          for (var m = 0; m < model.dgmInfo.channels.length; m++) {
            var ch = model.dgmInfo.channels[m]; //如果该振动通道绑定的位置在塔筒上，需要过滤掉

            if (ch.pos_loc == 15 || ch.pos_loc == 16 || ch.pos_loc == 17 || ch.pos_loc == 18 || ch.pos_loc == 24 || ch.pos_loc == 25 || ch.pos_loc == 45 || ch.pos_loc == 46 || ch.pos_loc == 47 || ch.pos_loc == 48 || ch.pos_loc == 49 || ch.pos_loc == 50 || ch.pos_loc == 51 || ch.pos_loc == 52 || ch.pos_loc == 53 || ch.pos_loc == 54) {
              continue;
            }

            var ch_name = ch.ch_name;
            channelSource[ch_name] = ch.ch_id;
          }

          captureTimeSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["freqToCaptureTime"])(model.baseInfo.capture.capture_freq);
          var index = Object.values(channelSource).indexOf(model.baseInfo.capture.ch1);
          Object.assign(dgm, {
            capture_type: model.baseInfo.capture.capture_type,
            capture_type_val: captureTypeSources[model.baseInfo.capture.capture_type],
            //采集间隔
            captureTypeSources: Object.values(captureTypeSources),
            captureTypeSources_key: Object.keys(captureTypeSources),
            capture_freq: model.baseInfo.capture.capture_freq,
            capture_freq_val: captureFreqSources[model.baseInfo.capture.capture_freq],
            //分析频率
            captureFreqSources: Object.values(captureFreqSources),
            captureFreqSources_key: Object.keys(captureFreqSources),
            capture_time: model.baseInfo.capture.capture_time,
            capture_time_val: captureTimeSource[model.baseInfo.capture.capture_time],
            //采样时间
            captureTimeSources: Object.values(captureTimeSource),
            captureTimeSources_key: Object.keys(captureTimeSource),
            ch1: Object.keys(channelSource)[index],
            ch1_val: model.baseInfo.capture.ch1,
            //通道名
            channelSources: Object.keys(channelSource),
            channelSources_key: Object.values(channelSource)
          });
        }

        if (type == 16) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.bolt == null || model.baseInfo.bolt == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.speed信息，数据错误！');
            return data;
          }

          posLocSource = {
            '255': '无'
          };
          prepsIdSource = {
            '255': '无'
          };
          bIdSource = {
            '255': '无'
          };

          if (res.flangeInfo != undefined && res.flangeInfo != null && res.flangeInfo[model.dgmInfo.dgm_id] != undefined && res.flangeInfo[model.dgmInfo.dgm_id] != null && res.flangeInfo[model.dgmInfo.dgm_id].length > 0) {
            var _flangeList = res.flangeInfo[model.dgmInfo.dgm_id];
            var channelList = res.channelInfo[model.dgmInfo.dgm_id];

            _flangeList.forEach(function (flange) {
              posLocSource[flange.flange_id] = flange.flange_name; //安装位置下拉选项

              var obj = {
                '255': '无'
              };
              var preps = flange.preprocessor_list;

              if (preps.length > 0) {
                preps.forEach(function (prep) {
                  obj[prep.prep_id] = prep.prep_name;
                });
              }

              flange_prepsIdSource[flange.flange_id] = obj;
            });

            channelList.forEach(function (channel) {
              bIdSource[channel.ch_id] = channel.ch_name; //安装位置下拉选项
            });
            delete bIdSource[model.ch_id];
            prepsIdSource = flange_prepsIdSource[model.baseInfo.bolt.flange_id]; //预处理器控制下拉选项

            bySensorTypeSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["sensorTypeSource"])(model.dgmInfo.dgm_type);
            byUnitNameSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["unitToSources"])(null, null, model.dgmInfo.dgm_type, model.baseInfo.bolt.bySensorType)[0];
            Object.assign(dgm, {
              bind_count: model.bind_count,
              //该通道是否绑定了测点0表示没有，1表示有
              pos_class: model.baseInfo.bolt.pos_class,
              bolt_pos_loc: model.baseInfo.bolt.pos_loc,
              bolt_pos_loc_val: posLocSource[model.baseInfo.bolt.pos_loc],
              //安装位置
              posLocSources: Object.values(posLocSource),
              posLocSources_key: Object.keys(posLocSource),
              pos_part: model.baseInfo.bolt.pos_part,
              boltID: model.baseInfo.bolt.boltID,
              //螺栓id
              bySensorType: model.baseInfo.bolt.bySensorType,
              bySensorTypeBolt_val: bySensorTypeSource[model.baseInfo.bolt.bySensorType],
              bySensorTypeSources: Object.values(bySensorTypeSource),
              bySensorTypeSources_key: Object.keys(bySensorTypeSource),
              byUnit: model.baseInfo.bolt.byUnit,
              byUnitName: model.baseInfo.bolt.byUnitName,
              byUnitNameSources: Object.values(byUnitNameSource),
              byUnitNameSources_key: Object.keys(byUnitNameSource),
              flange_id: model.baseInfo.bolt.flange_id,
              //安装位置(法兰id)
              flange_prepsIdSources: flange_prepsIdSource,
              preps_id: model.baseInfo.bolt.preps_id,
              //预处理器控制
              preps_id_val: prepsIdSource[model.baseInfo.bolt.preps_id],
              //预处理器控制
              prepsIdSources: Object.values(prepsIdSource),
              prepsIdSources_key: Object.keys(prepsIdSource),
              ac_id: model.baseInfo.bolt.ac_id,
              //采集控制id
              b_id: model.baseInfo.bolt.b_id,
              //关联通道
              b_id_val: bIdSource[model.baseInfo.bolt.b_id],
              bIdSources: Object.values(bIdSource),
              bIdSources_key: Object.keys(bIdSource),
              bolt_num: model.baseInfo.bolt.bolt_num,
              //螺栓计数
              highSamp: model.baseInfo.bolt.highSamp,
              //高密度采样
              highSamp_val: highSampSource[model.baseInfo.bolt.highSamp],
              highSampSources: Object.values(highSampSource),
              highSampSources_key: Object.keys(highSampSource),
              scanLength: model.baseInfo.bolt.scanLength,
              //采样长度
              stressType: model.baseInfo.bolt.stressType,
              //测量模式
              stressType_val: stressTypeSource[model.baseInfo.bolt.stressType],
              stressTypeSources: Object.values(stressTypeSource),
              stressTypeSources_key: Object.keys(stressTypeSource),
              readMode: model.baseInfo.bolt.readMode,
              //波形模式
              readMode_val: readModeSource[model.baseInfo.bolt.readMode],
              readModeSources: Object.values(readModeSource),
              readModeSources_key: Object.keys(readModeSource),
              fBoltLength: model.baseInfo.bolt.fBoltLength,
              //标称长度
              fDiameter: model.baseInfo.bolt.fDiameter,
              //螺栓直径
              fStart: model.baseInfo.bolt.fStart,
              //闸门的起始坐标点
              fWidth: model.baseInfo.bolt.fWidth,
              //闸门的宽度
              fThreshold: model.baseInfo.bolt.fThreshold,
              //闸门的高度
              fGain: model.baseInfo.bolt.fGain,
              //增益
              totalLen: model.baseInfo.bolt.totalLen,
              clampLen: model.baseInfo.bolt.clampLen,
              cableLen: model.baseInfo.bolt.cableLen,
              //电缆长度
              cableCoeff: model.baseInfo.bolt.cableCoeff,
              //电缆系数
              preQuantity: model.baseInfo.bolt.preQuantity,
              //前置数量
              preCoeff: model.baseInfo.bolt.preCoeff,
              //前置系数
              offsetValue: model.baseInfo.bolt.offsetValue,
              //校准数值
              wStart: model.baseInfo.bolt.wStart,
              //波形起始
              wRange: model.baseInfo.bolt.wRange //波形范围

            });
          } else {
            console.log('缺少flangeInfo信息，数据错误！');
            return data;
          }
        }

        if (type == 18) {
          if (model.baseInfo == null || model.baseInfo == undefined || model.baseInfo.outer == null || model.baseInfo.outer == undefined) {
            console.log('缺少baseinfo信息或者baseInfo.outer信息，数据错误！');
            return data;
          }

          destTypeSources = {
            "PT-04": "1",
            "倾角": "3",
            "JC2300DWCV": "2",
            "JC2301B": "4",
            "JC2301M": "5"
          };
          databitSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["destToDatabit"])(model.baseInfo.outer.dest_type);
          Object.assign(dgm, {
            bindCount: model.bindCount,
            //是否绑定了测点 >0表示绑定了测点不能删除
            operate: 0,
            pos_class: model.baseInfo.outer.pos_class,
            pos_loc: model.baseInfo.outer.pos_loc,
            dest_type: model.baseInfo.outer.dest_type,
            dest_type_val: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["findKey"])(model.baseInfo.outer.dest_type, destTypeSources),
            //型号
            destTypeSources: Object.keys(destTypeSources),
            destTypeSources_key: Object.values(destTypeSources),
            dest_ip: model.baseInfo.outer.dest_ip,
            //ip地址
            dest_port: model.baseInfo.outer.dest_port,
            //端口号
            databit: model.baseInfo.outer.databit,
            databit_val: getArrFromObj(databitSource)[1][getIndexOfArr(getArrFromObj(databitSource)[0], model.baseInfo.outer.databit)],
            //数据位
            databitSources: getArrFromObj(databitSource)[1],
            databitSources_key: getArrFromObj(databitSource)[0],
            stopbit: model.baseInfo.outer.stopbit,
            stopbit_val: stopbitSource[model.baseInfo.outer.stopbit],
            //停止位
            stopbitSources: Object.values(stopbitSource),
            stopbitSources_key: Object.keys(stopbitSource),
            baudrate: model.baseInfo.outer.baudrate,
            baudrate_val: baudrateSources[model.baseInfo.outer.baudrate],
            //波特率
            baudrateSources: Object.values(baudrateSources),
            baudrateSources_key: Object.keys(baudrateSources),
            parity: model.baseInfo.outer.parity,
            parity_val: paritySources[model.baseInfo.outer.parity],
            //奇偶校验
            paritySources: Object.values(paritySources),
            paritySources_key: Object.keys(paritySources),
            mode: model.baseInfo.outer.mode,
            mode_val: modeSources[model.baseInfo.outer.mode],
            //传输方式
            modeSources: Object.values(modeSources),
            modeSources_key: Object.keys(modeSources),
            masterslave: model.baseInfo.outer.masterslave,
            masterslave_val: masterslaveSources[model.baseInfo.outer.masterslave],
            //设备选择
            masterslaveSources: Object.values(masterslaveSources),
            masterslaveSources_key: Object.keys(masterslaveSources),
            slaveid: model.baseInfo.outer.slaveid //从设备号

          });
        }

        data.push({
          dgm: dgm
        });
      });
    }
  }

  return data;
}
function changeDgm(type, oldDgm, index) {
  var num = index + 1;
  var dgm = {};

  if (type == 11) {
    //mhd主从设置
    dgm.if_output = oldDgm.if_output;
    dgm.mhd_id = oldDgm.mhd_id;
    dgm.byName = oldDgm.byName;
    dgm.byId = oldDgm.byId;
    dgm.mainMhd = oldDgm.mainMhd;
  }

  if (type == 17) {
    //E821主从设置
    dgm.MS_id = oldDgm.MS_id;
    dgm.main821 = oldDgm.main821;
    dgm.SNA = oldDgm.SNA;
    dgm.SN = oldDgm.SN;
    dgm.byName = oldDgm.byName;
    dgm.byId = oldDgm.byId;
    dgm.updateTime = oldDgm.updateTime;
  } else if (type == 10) {
    //前置处理器设置
    dgm.dgm_id = oldDgm.dgm_id;
    dgm.byId = oldDgm.byId;
    dgm.car_id = oldDgm.car_id;
    dgm.dev_id = oldDgm.dev_id;
    dgm.byName = oldDgm.byName;
    dgm.pre_id = oldDgm.pre_id;
    dgm.status = oldDgm.status; // dgm.have_cfg=oldDgm.have_cfg;
  } else if (type == 13) {
    //采集设置
    dgm = {
      dgm_id: oldDgm.dgm_id,
      dgm_name: oldDgm.dgm_name,
      ev: oldDgm.ev,
      ext: oldDgm.ext,
      fGain: oldDgm.fGain,
      flm: oldDgm.flm,
      frq: oldDgm.frq,
      gateFlawJudge_gt: oldDgm.gateFlawJudge_gt,
      gateMode_gt: oldDgm.gateMode_gt,
      gateMode_md: oldDgm.gateMode_md,
      iDamping: oldDgm.iDamping,
      iDmp: oldDgm.iDmp,
      iPRF: oldDgm.iPRF,
      iPulseCoarseDly: oldDgm.iPulseCoarseDly,
      iPulseFineDly: oldDgm.iPulseFineDly,
      iPulseWdh: oldDgm.iPulseWdh,
      iSupCnt: oldDgm.iSupCnt,
      jd: oldDgm.jd,
      lg: oldDgm.lg,
      measurementCtx_gt: oldDgm.measurementCtx_gt,
      measurementCtx_md: oldDgm.measurementCtx_md,
      pm: oldDgm.pm,
      pulserCtx_md: oldDgm.pulserCtx_md,
      role: oldDgm.role,
      sl: oldDgm.sl,
      sw: oldDgm.sw,
      swDamping: oldDgm.swDamping,
      swDmpEnb: oldDgm.swDmpEnb,
      swSuppressCnt: oldDgm.swSuppressCnt,
      tm: oldDgm.tm,
      tower_flange_sum: oldDgm.tower_flange_sum,
      trm: oldDgm.trm,
      wkm: oldDgm.wkm,
      wm: oldDgm.wm
    };
  } else if (type == 14) {
    dgm = {
      dgm_id: oldDgm.dgm_id,
      dgm_name: oldDgm.dgm_name,
      bolt_sum: oldDgm.bolt_sum,
      byActivity: oldDgm.byActivity,
      byChannelType: oldDgm.byChannelType,
      byId: oldDgm.byId,
      byName: oldDgm.byName,
      pos_class: oldDgm.pos_class2600,
      pos_loc: oldDgm.pos_loc,
      rowId: oldDgm.rowId,
      updateTime: oldDgm.updateTime
    };
  } else if (type == 15) {
    dgm = {
      bolt_num_beigin: oldDgm.bolt_num_beigin,
      bolt_num_end: oldDgm.bolt_num_end,
      byActivity: oldDgm.byActivity,
      byChannelType: oldDgm.byChannelType,
      byId: oldDgm.byId,
      byName: oldDgm.byName,
      collect_mode: oldDgm.collect_mode,
      dgm_id: oldDgm.dgm_id,
      dgm_name: oldDgm.dgm_name,
      flange_id: oldDgm.flange_id,
      preps_id: oldDgm.preps_id,
      rowId: oldDgm.rowId,
      updateTime: oldDgm.updateTime
    };
  } else {
    dgm.machineId = oldDgm.machineId;
    dgm.updateTime = oldDgm.updateTime;
    dgm.t_root = oldDgm.t_root;

    if (type == 1) {
      dgm.dgm_activity = oldDgm.dgm_activity;
      dgm.dgm_id = oldDgm.dgm_id;
      dgm.dgm_ip = oldDgm.dgm_ip;
      dgm.dgm_name = oldDgm.dgm_name;
      dgm.dgm_type = oldDgm.dgm_type;
      dgm.config_state = oldDgm.config_state;
      dgm.dgm_state = oldDgm.dgm_state_val; //同步状态：0成功；1失败

      dgm.dgm_state_time = oldDgm.dgm_state_time; //同步时间

      dgm.change_channels = oldDgm.change_channels;
      dgm.number = oldDgm.number; // 2000v1的字段

      dgm.deleteType = oldDgm.deleteType; // 采集器是否可删除

      dgm.baseInfo = {
        // need_save_corr: oldDgm.need_save_corr,//need_save_corr
        byBlack_Data_intrvl: oldDgm.byBlack_Data_intrvl,
        byRealtime_TZ_intrvl: oldDgm.byRealtime_TZ_intrvl,
        byRealtime_Wave_intrvl: oldDgm.byRealtime_Wave_intrvl,
        byVector_TZ_intrvl: oldDgm.byVector_TZ_intrvl,
        byVector_Wave_intrvl: oldDgm.byVector_Wave_intrvl,
        flash_intrvl: oldDgm.flash_intrvl,
        hw_ab_ver: oldDgm.hw_ab_ver,
        hw_ch_type: oldDgm.hw_ch_type,
        hw_db_ver: oldDgm.hw_db_ver,
        hw_options: oldDgm.hw_options,
        hw_range_type: oldDgm.hw_range_type,
        sf_fix_ver: oldDgm.sf_fix_ver,
        sf_main_ver: oldDgm.sf_main_ver,
        if_output: oldDgm.if_output,
        hw_mb_ver: oldDgm.hw_mb_ver,
        //mhd采集器的mb版本号
        hw_fp_ver: oldDgm.hw_fp_ver,
        //mhd采集器的fp
        change_channels: oldDgm.change_channels //16个通道，0代表振动，4代表温度

      };

      if (oldDgm.dgm_type == 7) {
        //暂时只有tms可以设置这个值：修改校正系数
        dgm.baseInfo.need_save_corr = oldDgm.need_save_corr;
        dgm.baseInfo.mvb_car_id = oldDgm.mvb_car_id;
        dgm.baseInfo.host_car_type = oldDgm.host_car_type;
      }
    } else {
      dgm.ch_activity = oldDgm.ch_activity;
      dgm.ch_class = oldDgm.ch_class;
      dgm.ch_id = oldDgm.ch_id;
      dgm.ch_name = oldDgm.ch_name;
      dgm.ch_type = oldDgm.ch_type;
      dgm.rowId = oldDgm.rowId;
      dgm.same_pre = oldDgm.same_pre;
      dgm.dgmInfo = {
        dgm_id: oldDgm.dgm_id,
        dgm_name: oldDgm.dgm_name,
        dgm_type: oldDgm.dgm_type,
        hw_ab_ver: oldDgm.hw_ab_ver,
        hw_db_ver: oldDgm.hw_db_ver,
        hw_range_type: oldDgm.hw_range_type
      };

      if (type == 2) {
        dgm.pre_id = oldDgm.pre_id;
        dgm.hw_mb_ver = oldDgm.hw_mb_ver;
        dgm.bind_count = oldDgm.bind_count; //该通道是否绑定了测点0表示没有，1表示有

        dgm.trans_ch_type = oldDgm.trans_ch_type;
        dgm.baseInfo = {};
        dgm.baseInfo.vib = {
          byHwIntegral: oldDgm.byHwIntegral,
          byHw_Filter: oldDgm.byHw_Filter,
          byIntegral: oldDgm.byIntegral,
          bySensorType: oldDgm.bySensorType,
          bySw_Filter: oldDgm.bySw_Filter,
          byUnit: oldDgm.byUnit,
          byUnitName: oldDgm.byUnitName,
          byVib_Signal_Zoom: oldDgm.byVib_Signal_Zoom,
          dwRef_gap: oldDgm.dwRef_gap,
          dwVib_Scale: oldDgm.dwVib_Scale,
          order_filter: oldDgm.order_filter,
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.pos_loc,
          pos_part: oldDgm.pos_part,
          power_a: oldDgm.power_a,
          power_b: oldDgm.power_b,
          power_time: oldDgm.power_time,
          scale_unit: oldDgm.scale_unit_val,
          shHi_vol: oldDgm.shHi_vol,
          shLo_vil: oldDgm.shLo_vil,
          int_zoom: oldDgm.int_zoom,
          null_shift: oldDgm.null_shift,
          //零漂
          ac_corr: oldDgm.ac_corr,
          //交流校正系数
          dc_corr: oldDgm.dc_corr,
          //直流校正系数

          /*tms采集器*/
          byId: oldDgm.byId,
          //
          dwVib_Null_shift: oldDgm.dwVib_Null_shift,
          //vib 零漂
          dwVib_Ac_corr: oldDgm.dwVib_Ac_corr,
          //振动交流矫正参数；3.5；必须大于0
          dwVib_Dc_corr: oldDgm.dwVib_Dc_corr,
          //振动直流矫正参数；3.5；必须大于0
          dwVib_Ac_integ1_corr: oldDgm.dwVib_Ac_integ1_corr,
          //振动交流一次积分矫正参数；3.5；必须大于0
          dwVib_AC_integ2_corr: oldDgm.dwVib_AC_integ2_corr,
          //振动交流二次积分矫正参数；3.5；必须大于0
          conn_mode: oldDgm.conn_mode,
          //接线方式 0 2线　 1 3线
          supply_voltage: oldDgm.supply_voltage //供电电压 0 +24V 1 -24V

        };
      }

      if (type == 3) {
        dgm.pre_id = oldDgm.pre_id;
        dgm.bind_count = oldDgm.bind_count; //该通道是否绑定了测点0表示没有，1表示有

        dgm.trans_ch_type = oldDgm.trans_ch_type;
        dgm.baseInfo = {};
        dgm.baseInfo.temp = {
          bySensorType: oldDgm.bySensorType,
          byStaType: oldDgm.byStaType,
          byUnit: oldDgm.byUnit,
          byUnitName: oldDgm.byUnitName,
          dwHi_eng_value: oldDgm.dwHi_eng_value,
          dwHi_signal_value: oldDgm.dwHi_signal_value,
          dwLow_eng_value: oldDgm.dwLow_eng_value,
          dwLow_signal_value: oldDgm.dwLow_signal_value,
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.pos_loc,
          range: oldDgm.range,

          /*tms*/
          conn_mode: oldDgm.conn_mode,
          //
          supply_voltage: oldDgm.supply_voltage,
          dwNull_shift: oldDgm.dwNull_shift,
          dwCorr: oldDgm.dwCorr
        };
      }

      if (type == 4) {
        dgm.baseInfo = {};
        dgm.baseInfo.sta = {
          rowName: oldDgm.rowName,
          bySensorType: oldDgm.bySensorType,
          byStaType: oldDgm.byStaType,
          byUnit: oldDgm.byUnit,
          byUnitName: oldDgm.byUnitName_val,
          dwHi_eng_value: oldDgm.dwHi_eng_value,
          dwHi_signal_value: oldDgm.dwHi_signal_value,
          dwLow_eng_value: oldDgm.dwLow_eng_value,
          dwLow_signal_value: oldDgm.dwLow_signal_value,
          dwNull_shift: oldDgm.dwNull_shift,
          //零漂
          dwCorr: oldDgm.dwCorr,
          //校正系数
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.pos_loc
        };
      }

      if (type == 5) {
        dgm.baseInfo = {};
        dgm.baseInfo.speed = {
          bySensorType: oldDgm.bySensorType,
          reverse: oldDgm.reverse,
          byStrong: oldDgm.byStrong,
          byUnit: oldDgm.byUnit,
          byUnitName: oldDgm.byUnitName_val,
          dwCompre_volt: oldDgm.dwCompre_volt,
          high_density: oldDgm.high_density,
          max_speed: oldDgm.max_speed,
          min_speed: oldDgm.min_speed,
          polar: oldDgm.polar,
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.pos_loc,
          shHi_vol: oldDgm.shHi_vol,
          shLo_vil: oldDgm.shLo_vil,
          null_shift: oldDgm.null_shift,
          //零漂

          /*tms*/
          byId: oldDgm.byId,
          dwSpeed_Ac_corr: oldDgm.dwSpeed_Ac_corr,
          //交流校正系数	float
          dwSpeed_Dc_corr: oldDgm.dwSpeed_Dc_corr,
          //直流校正系数	float
          dwSpeed_Null_shift: oldDgm.dwSpeed_Null_shift //直流零点偏移	float

        };

        if (oldDgm.dgm_type == 7) {
          dgm.baseInfo.speed.chan_type = oldDgm.chan_type; //tms采集器才有这个数据来源设置
        }
      }

      if (type == 6) {
        dgm.baseInfo = {};
        dgm.baseInfo.digital = {
          byDigitalType: oldDgm.byDigitalType,
          bySensorType: oldDgm.bySensorType,
          byUnit: oldDgm.byUnit,
          byUnitName: oldDgm.byUnitName_val,
          bybindch: oldDgm.bybindch,
          bybindtype: oldDgm.bybindtype,
          byifalarm: oldDgm.byifalarm,
          byifpower: oldDgm.byifpower,
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.pos_loc
        };
      }

      if (type == 7) {
        dgm.baseInfo = {};
        dgm.baseInfo.outer = {
          baudrate: oldDgm.baudrate,
          databit: oldDgm.databit,
          dest_ip: oldDgm.dest_ip,
          dest_port: oldDgm.dest_port,
          dest_type: oldDgm.dest_type,
          masterslave: oldDgm.masterslave,
          mode: oldDgm.mode,
          parity: oldDgm.parity,
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.pos_loc,
          slaveid: oldDgm.slaveid,
          stopbit: oldDgm.stopbit
        };
      }

      if (type == 9) {
        dgm.baseInfo = {};
        dgm.baseInfo.capture = {
          capture_freq: oldDgm.capture_freq,
          capture_time: oldDgm.capture_time,
          capture_type: oldDgm.capture_type,
          ch1: oldDgm.ch1_val,
          ch2: "255",
          ch3: "255",
          ch4: "255"
        };
      }

      if (type == 16) {
        dgm.bind_count = oldDgm.bind_count; //该通道是否绑定了测点0表示没有，1表示有

        dgm.baseInfo = {};
        dgm.baseInfo.bolt = {
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.bolt_pos_loc,
          pos_part: oldDgm.pos_part,
          boltID: oldDgm.boltID,
          //螺栓id
          bySensorType: oldDgm.bySensorType,
          byUnit: oldDgm.byUnit,
          byUnitName: oldDgm.byUnitName,
          flange_id: oldDgm.flange_id,
          //安装位置(法兰id)
          preps_id: oldDgm.preps_id,
          //预处理器控制
          ac_id: oldDgm.ac_id,
          //采集控制id
          b_id: oldDgm.b_id,
          //关联通道
          bolt_num: oldDgm.bolt_num,
          //螺栓计数
          highSamp: oldDgm.highSamp,
          //高密度采样
          scanLength: oldDgm.scanLength,
          //采样长度
          stressType: oldDgm.stressType,
          //测量模式
          readMode: oldDgm.readMode,
          //波形模式
          fBoltLength: oldDgm.fBoltLength,
          //标称长度
          fDiameter: oldDgm.fDiameter,
          //螺栓直径
          fStart: oldDgm.fStart,
          //闸门的起始坐标点
          fWidth: oldDgm.fWidth,
          //闸门的宽度
          fThreshold: oldDgm.fThreshold,
          //闸门的高度
          fGain: oldDgm.fGain,
          //增益
          totalLen: oldDgm.totalLen,
          clampLen: oldDgm.clampLen,
          cableLen: oldDgm.cableLen,
          //电缆长度
          cableCoeff: oldDgm.cableCoeff,
          //电缆系数
          preQuantity: oldDgm.preQuantity,
          //前置数量
          preCoeff: oldDgm.preCoeff,
          //前置系数
          offsetValue: oldDgm.offsetValue,
          //校准数值
          wStart: oldDgm.wStart,
          //波形起始
          wRange: oldDgm.wRange //波形范围

        };
      }

      if (type == 18) {
        dgm.baseInfo = {};
        dgm.operate = oldDgm.operate;
        dgm.bindCount = oldDgm.bindCount;
        dgm.baseInfo.outer = {
          baudrate: oldDgm.baudrate,
          databit: oldDgm.databit,
          dest_ip: oldDgm.dest_ip,
          dest_port: oldDgm.dest_port,
          dest_type: oldDgm.dest_type,
          masterslave: oldDgm.masterslave,
          mode: oldDgm.mode,
          parity: oldDgm.parity,
          pos_class: oldDgm.pos_class,
          pos_loc: oldDgm.pos_loc,
          slaveid: oldDgm.slaveid,
          stopbit: oldDgm.stopbit
        };
      }
    }
  }

  return dgm;
}
function getMHDInfo(res, type) {
  if (res == undefined || type == 11 && (res.mhd_set == undefined || res.mhd_map == undefined) || type == 17 && (res.e821_set == undefined || res.e821_map == undefined)) {
    console.log('数据错误！');
    return [[], false, []];
  } else {
    var _ifOutputSource = {
      '0': '不输出',
      '1': '输出'
    };
    var data = [];
    var dgm = {};
    var mhdList = []; //mhd采集器下拉列表

    var mhdInfo = {}; //从设备列表

    var canBuild; //是否有可建从设备的mhd采集器

    var mhd_id_list = []; //从设备

    if (type == 11) {
      mhdList = res.mhd_set; //mhd采集器下拉列表

      mhdInfo = res.mhd_map; //从设备列表
    } else if (type == 17) {
      mhdList = res.e821_set; //821采集器下拉列表

      mhdInfo = res.e821_map; //从设备列表
    }

    if (mhdList.length === 0) {
      canBuild = false;
    } else {
      canBuild = true;
    }

    if (mhdInfo && !$.isEmptyObject(mhdInfo)) {
      for (var key in mhdInfo) {
        if (!$.isEmptyObject(mhdInfo[key])) {
          var dgmInfo = mhdInfo[key];

          for (var num in dgmInfo) {
            if (!$.isEmptyObject(dgmInfo[num])) {
              if (type == 11) {
                dgm = {
                  operate: 0,
                  mainMhd: key,
                  mhdSources: mhdList,
                  if_output: dgmInfo[num].if_output,
                  if_output_val: _ifOutputSource[dgmInfo[num].if_output],
                  ifOutputSources: Object.values(_ifOutputSource),
                  ifOutputSources_key: Object.keys(_ifOutputSource),
                  mhd_id: dgmInfo[num].mhd_id,
                  byName: dgmInfo[num].byName,
                  byId: dgmInfo[num].byId
                };
              } else if (type == 17) {
                dgm = {
                  operate: 0,
                  MS_id: dgmInfo[num].MS_id,
                  //从采集器id
                  byId: dgmInfo[num].byId,
                  //从采集器编号，
                  byName: dgmInfo[num].byName,
                  //从采集器名称，
                  SNA: dgmInfo[num].SNA,
                  //设备识别码
                  SN: dgmInfo[num].SN,
                  //s/n
                  updateTime: dgmInfo[num].updateTime,
                  //更新时间
                  main821: key,
                  main821Sources: mhdList
                };
              }

              data.push({
                dgm: dgm
              });
            }
          }
        }
      }
    }

    return [data, canBuild, mhdList];
  }
}
function createMHD(mhdList, index) {
  var ifOutputSource = {
    '0': '不输出',
    '1': '输出'
  };
  var dgm = {
    operate: 1,
    mainMhd: '',
    mhdSources: mhdList,
    if_output: '0',
    if_output_val: '不输出',
    ifOutputSources: Object.values(ifOutputSource),
    ifOutputSources_key: Object.keys(ifOutputSource),
    mhd_id: '',
    byName: '',
    byId: '-1'
  };
  return dgm;
}
function createE821(E821List, index) {
  var dgm = {
    operate: 1,
    main821: '',
    main821Sources: E821List,
    MS_id: '',
    //从采集器id
    SNA: '',
    //
    SN: '',
    //
    updateTime: 0,
    //更新时间
    byName: '',
    byId: '-1'
  };
  return dgm;
}
function createFlange(dgmList, index) {
  var posClassSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["getPosLoc"])(5, null);
  var pos_class = Object.keys(posClassSource)[0];
  var posLocSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["posClassToPosLoc"])(pos_class, 5, null);
  var dgm = {
    operate: 1,
    dgm_id: Object.keys(dgmList)[0],
    dgm_name: Object.values(dgmList)[0],
    dgmSources: Object.values(dgmList),
    dgmSources_keys: Object.keys(dgmList),
    bolt_sum: '',
    byActivity: '0',
    byChannelType: '9',
    byId: '-1',
    byName: '',
    pos_class2600: pos_class,
    pos_class2600_val: posClassSource[pos_class],
    posClassSources: Object.values(posClassSource),
    posClassSources_keys: Object.keys(posClassSource),
    pos_loc: Object.keys(posLocSource)[0],
    pos_loc_val: Object.values(posLocSource)[0],
    posLocSources: Object.values(posLocSource),
    posLocSources_key: Object.keys(posLocSource),
    rowId: '-1'
  };
  return dgm;
}
function createPreps(dgmList, flangeList, index) {
  var dgm_id = Object.keys(dgmList)[0];
  var dgm = {
    operate: 1,
    bolt_num_beigin: '',
    bolt_num_end: '',
    byActivity: '0',
    byChannelType: '10',
    byId: '-1',
    byName: '',
    flange_id: Object.keys(flangeList[dgm_id])[0],
    flange_name: Object.values(flangeList[dgm_id])[0],
    flangeSources: Object.values(flangeList[dgm_id]),
    flangeSources_keys: Object.keys(flangeList[dgm_id]),
    collect_mode: '0',
    collect_mode_val: collectModeSource['0'],
    collectModeSources: Object.values(collectModeSource),
    collectModeSources_keys: Object.keys(collectModeSource),
    dgm_name: Object.values(dgmList)[0],
    dgm_id: dgm_id,
    dgmSources: Object.values(dgmList),
    dgmSources_keys: Object.keys(dgmList),
    preps_id: '',
    rowId: '-1'
  };
  return dgm;
}
function createTms(tmsList) {
  var dgmSource = Object.values(tmsList);
  var dgmSources_key = Object.keys(tmsList);
  var dgm = {
    operate: 1,
    dgm_id: '',
    dgm_name: '',
    dgmSources: dgmSource,
    dgmSources_keys: dgmSources_key,
    pre_id: '',
    byName: '',
    byId: '-1',
    status: '1',
    status_val: statusSource['1'],
    have_cfg: '0',
    have_cfg_val: have_cfgSource['0']
  };
  return dgm;
}
function createServerDgm(defaultDgmInfo) {
  //新建一个虚拟采集器通道
  databitSource = Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["destToDatabit"])("1");
  destTypeSources = {
    "PT-04": "1",
    "倾角": "3",
    "JC2300DWCV": "2",
    "JC2301B": "4",
    "JC2301M": "5"
  }; //型号暂时只做了串口，其他先注释

  if (defaultDgmInfo === null || defaultDgmInfo === undefined) {
    //如果没有，则用默认值
    defaultDgmInfo = {
      dgm_name: 'defaultDgm',
      dgm_id: 0,
      dgm_type: 0
    };
  }

  var dgm = {
    operate: 1,
    slaveid: "1",
    pos_class: "0",
    pos_loc: "255",
    dest_type: "1",
    dest_type_val: Object(_dgm_methods_js__WEBPACK_IMPORTED_MODULE_0__["findKey"])("1", destTypeSources),
    //型号
    destTypeSources: Object.keys(destTypeSources),
    destTypeSources_key: Object.values(destTypeSources),
    dest_ip: "",
    //ip地址
    dest_port: "",
    //端口号
    databit: "4",
    databit_val: getArrFromObj(databitSource)[1][getIndexOfArr(getArrFromObj(databitSource)[0], "4")],
    //数据位
    databitSources: getArrFromObj(databitSource)[1],
    databitSources_key: getArrFromObj(databitSource)[0],
    stopbit: "0",
    stopbit_val: stopbitSource["0"],
    //停止位
    stopbitSources: Object.values(stopbitSource),
    stopbitSources_key: Object.keys(stopbitSource),
    baudrate: "115200",
    baudrate_val: baudrateSources["115200"],
    //波特率
    baudrateSources: Object.values(baudrateSources),
    baudrateSources_key: Object.keys(baudrateSources),
    parity: "0",
    parity_val: paritySources["0"],
    //奇偶校验
    paritySources: Object.values(paritySources),
    paritySources_key: Object.keys(paritySources),
    mode: "0",
    mode_val: modeSources["0"],
    //传输方式
    modeSources: Object.values(modeSources),
    modeSources_key: Object.keys(modeSources),
    masterslave: "0",
    masterslave_val: masterslaveSources["0"],
    //设备选择
    masterslaveSources: Object.values(masterslaveSources),
    masterslaveSources_key: Object.keys(masterslaveSources),
    ch_activity: "0",
    ch_class: "1",
    ch_id: "0",
    ch_name: "",
    ch_type: "14",
    dgm_name: defaultDgmInfo.dgm_name,
    dgm_id: defaultDgmInfo.dgm_id,
    dgm_type: defaultDgmInfo.dgm_type,
    rowId: "0",
    same_pre: "-1",
    updateTime: 0
  };
  return dgm;
} //获取二维数组的key 和 value数组

function getArrFromObj(arr) {
  var keys = [];
  var values = [];

  if (arr.length > 0) {
    arr.forEach(function (item) {
      keys.push(item[0]);
      values.push(item[1]);
    });
  }

  return [keys, values];
} //获取二维数组的key 和 value数组

function getIndexOfArr(arr, value) {
  if (value !== null) {
    value = String(value);
  }

  var index = arr.indexOf(value);
  return index;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ })

}]);
//# sourceMappingURL=5-7735774e7138138e84aa.[ext].js.map