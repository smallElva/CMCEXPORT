{"version":3,"sources":["webpack:///src/components/content/system/position/table/component/svibs/Svibs.vue","webpack:///./src/components/content/system/position/table/component/svibs/Svibs.vue?f0df","webpack:///./src/components/content/system/position/table/component/svibs/Svibs.vue","webpack:///./src/components/content/system/position/table/component/svibs/Svibs.vue?88ab","webpack:///./src/components/content/system/position/table/component/svibs/Svibs.vue?16a2","webpack:///./src/components/content/system/position/table/component/svibs/svibs.js"],"names":["svibsHandsontable","el","vm","F","Func","tableConfig","data","colHeaders","label","colspan","nestedHeaders","columns","readOnly","editor","selectOptions","row","positionName_source_0","code_sources","positionName_source_1","positionName_source_2","afterOnCellMouseUp","beforeChange","afterChange","hdtable","speedList","changeData","changeList","getData","getHot","that","e","coords","td","row_info","getPositionByIndex","console","log","changes","source","change_index","change_prop","change_oldVal","change_newVal","i","length","position","task","slice","sources","includes","set_position_name","swal","title","text","button","set_code","Number","name","key","String","pos_id","codeValue","obj","code_sources_map","getKey","val","forEach","change","speed_pos","mac_id","pos_type","speedkey","speed","group","parseInt","svibs","baseInfo","svibsList","code","rate","position_name","threshold","position_id","index","hot","physicalRow","toPhysicalRow","info"],"mappings":";;;;;;;;;;;;;;;;AAKA,gBACA,KADA,EAEA,IAFA,EAGA,KAHA,EAIA,OAJA,EAKA,IALA,EAMA,MANA,EAOA,KAPA,EAQA,KARA,EASA,KATA,EAUA,KAVA,EAWA,KAXA,EAYA,KAZA,EAaA,KAbA,EAcA,KAdA;AAgBA,eACA,OADA,EAEA,OAFA,EAGA,OAHA,EAIA,KAJA,EAKA,KALA,EAMA,KANA,EAOA,KAPA,EAQA,KARA,EASA,KATA,EAUA,KAVA,EAWA,KAXA;AAaA;AACA,eADA;AAEA,cAFA;AAGA,eAHA;AAIA,kBAJA;AAKA,eALA;AAMA,iBANA;AAOA,gBAPA;AAQA,gBARA;AASA,gBATA;AAUA,gBAVA;AAWA,gBAXA;AAYA,gBAZA;AAaA,gBAbA;AAcA;AAdA;AAgBA;AACA,iBADA;AAEA,iBAFA;AAGA,kBAHA;AAIA,gBAJA;AAKA,gBALA;AAMA,gBANA;AAOA,gBAPA;AAQA,gBARA;AASA,gBATA;AAUA,gBAVA;AAWA;AAXA;AAaA;AACA;AACA,eADA;AACA;AACA,MAFA,kBAEA;AACA;AACA,cADA;AAEA,cAFA;AAEA;AACA,mBAHA;AAGA;AACA,iBAJA;AAIA;AACA;AACA,sBADA,CACA;;AADA,OALA;AAQA,mCARA,CAQA;;AARA;AAUA,GAbA;AAcA,SAdA,qBAcA;AACA;AACA,GAhBA;AAiBA;AACA,eADA,yBACA;AAAA;;AACA,yEADA,CACA;;AACA,yEAFA,CAEA;;AACA,yEAHA,CAGA;;AACA;AACA;;AACA;;AACA;AACA,OAJA;AAKA,KAVA;AAWA,eAXA,uBAWA,GAXA,EAWA;AAAA;;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,iEACA,0CADA,GAEA,IAFA;AAGA;AACA,sCADA;AAEA,0CAFA,CAEA;;AAFA;AAIA,WATA;AAUA,SAXA;AAYA,OAbA;AAcA,KA5BA;AA6BA,eA7BA,uBA6BA,GA7BA,EA6BA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA,iDADA,CACA;;AACA,WAFA;AAGA,SAJA;AAKA,OANA;AAOA;AACA;AACA;AACA,gDADA,CACA;;AACA;AACA,qHAHA,CAIA;;AACA,gBACA,iCACA,wCAFA,EAGA;AACA;;AACA;AACA;AACA;AACA,8BADA;AAEA,2BAFA;AAGA,oCAHA;AAIA,0CAJA;AAKA,kCALA;AAMA,oCANA;AAOA;AAPA;;AASA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;;AAEA,yDA9BA,CA+BA;;AACA;AACA;AAAA,gBACA,SADA,CAjCA,CAmCA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA;AACA,eANA,MAMA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAtBA,CAsBA;;AACA,oEAvBA,CAuBA;;AACA,0DAxBA,CAwBA;;AACA,iDAzBA,CAyBA;;AACA,gEA1BA,CA0BA;;AACA,sDA3BA,CA2BA;;AACA;AACA;AACA,2DAFA,CAEA;;AACA,sEAHA,CAGA;;AACA,+CAJA,CAIA;;AACA;AACA,eANA,MAMA;AACA,sBADA,CACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;;AACA;;AACA;AACA;AACA;AACA,WApFA;AAqFA,SAtFA;AAuFA,OAxFA;AAyFA;AACA,KAjIA;AAmIA,eAnIA,yBAmIA;AACA,yDADA,CAEA;;AACA;AACA;;AACA;AACA;AACA,KA1IA;AA2IA,iBA3IA,2BA2IA;AAAA;;AACA;AACA;AACA,mCADA,CACA;;AACA,OAFA;AAGA,KAhJA;AAiJA,wBAjJA,gCAiJA,GAjJA,EAiJA,IAjJA,EAiJA,MAjJA,EAiJA,KAjJA,EAiJA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA,WAFA,MAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AACA;AACA;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA,WAFA,MAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AACA;AACA;;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA,WAFA,MAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AACA;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","file":"js/54-7735774e7138138e84aa.[ext].js","sourcesContent":["<template>\r\n  <div id=\"HotTable\"></div>\r\n</template>\r\n\r\n<script>\r\nconst vibValue = [\r\n  \"有效值\",\r\n  \"峰值\",\r\n  \"峰峰值\",\r\n  \"能量有效值\",\r\n  \"峭度\",\r\n  \"峰值因素\",\r\n  \"频段1\",\r\n  \"频段2\",\r\n  \"频段3\",\r\n  \"频段4\",\r\n  \"频段5\",\r\n  \"频段6\",\r\n  \"频段7\",\r\n  \"频段8\"\r\n];\r\nconst gdValue = [\r\n  \"包络解调值\",\r\n  \"包络特征值\",\r\n  \"能量有效值\",\r\n  \"频段1\",\r\n  \"频段2\",\r\n  \"频段3\",\r\n  \"频段4\",\r\n  \"频段5\",\r\n  \"频段6\",\r\n  \"频段7\",\r\n  \"频段8\"\r\n];\r\nconst vibCode = {\r\n  \"2000\": \"有效值\",\r\n  \"3000\": \"峰值\",\r\n  \"4000\": \"峰峰值\",\r\n  \"19000\": \"能量有效值\",\r\n  \"24000\": \"峭度\",\r\n  \"15000\": \"峰值因素\",\r\n  \"12001\": \"频段1\",\r\n  \"12002\": \"频段2\",\r\n  \"12003\": \"频段3\",\r\n  \"12004\": \"频段4\",\r\n  \"12005\": \"频段5\",\r\n  \"12006\": \"频段6\",\r\n  \"12007\": \"频段7\",\r\n  \"12008\": \"频段8\"\r\n};\r\nconst gdCode = {\r\n  \"5000\": \"包络解调值\",\r\n  \"6000\": \"包络特征值\",\r\n  \"19000\": \"能量有效值\",\r\n  \"12001\": \"频段1\",\r\n  \"12002\": \"频段2\",\r\n  \"12003\": \"频段3\",\r\n  \"12004\": \"频段4\",\r\n  \"12005\": \"频段5\",\r\n  \"12006\": \"频段6\",\r\n  \"12007\": \"频段7\",\r\n  \"12008\": \"频段8\"\r\n};\r\nimport { svibsHandsontable } from \"./svibs.js\";\r\nexport default {\r\n  name: \"Svibs\", //转速提取界面\r\n  data() {\r\n    return {\r\n      type: -1,\r\n      data: [], //存放列表渲染数据\r\n      speedList: [], //存放转速测点\r\n      dgmList: [], //存在采集器列表(一个测点如果不存在绑定的采集器，则不做显示)\r\n      changeList: {\r\n        changeData: {} //修改的数据\r\n      },\r\n      macId_posType_taskId_list: {} //存放振动和包络测点\r\n    };\r\n  },\r\n  mounted() {\r\n    this.getListData();\r\n  },\r\n  methods: {\r\n    getListData() {\r\n      let p1 = this.$getApi.queryPositionInfo(3, this.$store.state.tids); //振动\r\n      let p2 = this.$getApi.queryPositionInfo(4, this.$store.state.tids); //包络\r\n      let p3 = this.$getApi.queryPositionInfo(1, this.$store.state.tids); //转速\r\n      Promise.all([p1, p2, p3]).then(values => {\r\n        this.getPosition(values[0]);\r\n        this.getPosition(values[1]);\r\n        this.getDateList(values[2]);\r\n      });\r\n    },\r\n    getPosition(res) {\r\n      if (!res.position_list.length) return;\r\n      /* 保存振动和包络测点 */\r\n      res.position_list.forEach(position_list => {\r\n        position_list.machine_info.forEach(machine_info => {\r\n          machine_info.positions.forEach(positions => {\r\n            let key = `${positions.mac_id}_${positions.dgm_id}_${positions.pos_type}_${positions.task_id}`;\r\n            this.macId_posType_taskId_list[key] == undefined\r\n              ? (this.macId_posType_taskId_list[key] = {})\r\n              : null;\r\n            this.macId_posType_taskId_list[key][positions.pos_name] = {\r\n              pos_id: positions.pos_id,\r\n              dgm_type: positions.dgm_type // 一个机组下存在不同采集器的统一类型测点，需要判断，\r\n            };\r\n          });\r\n        });\r\n      });\r\n    },\r\n    getDateList(res) {\r\n      if (!res.position_list.length) return;\r\n      if (!res.new_position_list.length) return;\r\n      res.new_position_list.forEach(position_list => {\r\n        position_list.machine_info.forEach(machine_info => {\r\n          machine_info.bindDgm_list.forEach(dgm_info => {\r\n            this.dgmList.push(dgm_info.dgm_id); //保存所有绑定的dgm_id\r\n          });\r\n        });\r\n      });\r\n      res.position_list.forEach(position_list => {\r\n        position_list.machine_info.forEach(machine_info => {\r\n          machine_info.positions.forEach(positions => {\r\n            if (positions.ch_type != 13) return; //不是转速提取通道的直接return\r\n            if (!this.dgmList.includes(positions.dgm_id)) return;\r\n            let speedKey = `${positions.mac_id}_${positions.pos_type}_${positions.pos_id}`;\r\n            //初始化转速提取\r\n            if (\r\n              !positions.baseInfo.svibsList ||\r\n              positions.baseInfo.svibsList.length == 0\r\n            ) {\r\n              positions.baseInfo.svibsList = [];\r\n              for (let i = 0; i < 18; i++) {\r\n                let task_id = i%3\r\n                let obj = {\r\n                  code: \"2000\",\r\n                  rate: \"1\",\r\n                  position_name: \"无\",\r\n                  task_id: String(task_id),\r\n                  threshold: \"0.1\",\r\n                  position_type: \"3\",\r\n                  position_id: \"-1\"\r\n                };\r\n                if (i > 8) {\r\n                  //包络测点\r\n                  obj.code = \"5000\";\r\n                  obj.position_type = \"4\";\r\n                }\r\n                positions.baseInfo.svibsList.push(obj);\r\n              }\r\n            }\r\n\r\n            let svibsList = positions.baseInfo.svibsList;\r\n            //保存转速测点\r\n            this.speedList[speedKey] = positions;\r\n            let obj = {},\r\n              group = 0;\r\n            //在data中加入数组\r\n            for (let i = 0; i < svibsList.length; i++) {\r\n              let num = i%3\r\n              let key = `${machine_info.mac_id}_${positions.dgm_id}_${svibsList[i].position_type}_${num}`;\r\n              let value = this.macId_posType_taskId_list[key];\r\n              let sources = [];\r\n              if (value) {\r\n                for (let k in value) {\r\n                  //同一个机组下面有不同类型的采集器测点，需要进行筛选\r\n                  sources.push(k);\r\n                }\r\n                sources.unshift(\"无\");\r\n              } else {\r\n                sources = [\"无\"];\r\n              }\r\n              obj.group = group;\r\n              obj.t_name = position_list.t_name;\r\n              obj.mac_me = machine_info.mac_me;\r\n              obj.dgm_name = positions.dgm_name;\r\n              obj.pos_name = positions.pos_name;\r\n              obj.pos_id = positions.pos_id;\r\n              obj.mac_id = positions.mac_id;\r\n              obj.pos_type = positions.pos_type;\r\n              obj[\"positionName_\" + num] = svibsList[i].position_name; //测点名称\r\n              obj[\"position_id_\" + num] = svibsList[i].position_id; //选择测点的id\r\n              obj[\"positionName_source_\" + num] = sources; //测点下拉选项\r\n              obj[\"positionInfo_\" + num] = value; //选项测点的信息\r\n              obj[\"threshold_\" + num] = svibsList[i].threshold; //阈值\r\n              obj[\"rate_\" + num] = svibsList[i].rate; //系数\r\n              if (svibsList[i].position_type == 3) {\r\n                obj.pos_type_value = \"振动测点\";\r\n                obj[\"codeKey_\" + num] = svibsList[i].code; // 特特征值key\r\n                obj[\"codeValue_\" + num] = vibCode[svibsList[i].code]; //特征值value\r\n                obj[\"code_sources\"] = vibValue; //特征值选项  Object.values会打乱顺序，要自己写一个方法\r\n                obj[\"code_sources_map\"] = vibCode;\r\n              } else if (svibsList[i].position_type == 4) {\r\n                break //暂时不显示包络测点\r\n                // obj.pos_type_value = \"包络测点\";\r\n                // obj[\"codeKey_\" + num] = svibsList[i].code;\r\n                // obj[\"codeValue_\" + num] = gdCode[svibsList[i].code];\r\n                // obj[\"code_sources\"] = gdValue;\r\n                // obj[\"code_sources_map\"] = gdCode;\r\n              }\r\n              if (num == 2) {\r\n                group++;\r\n                this.data.push(obj);\r\n                obj = {};\r\n              }\r\n            }\r\n          });\r\n        });\r\n      });\r\n      this.renderTable();\r\n    },\r\n\r\n    renderTable() {\r\n      let HotTable = document.getElementById(\"HotTable\");\r\n      //创建table\r\n      this.hot = new svibsHandsontable(HotTable, this);\r\n      /* 添加行之后选项框错位 */\r\n      this.reRenderSelectOption(this.hot, this.data)\r\n      this.destroyEditor();\r\n    },\r\n    destroyEditor() {\r\n      let wtHolder = document.getElementsByClassName(\"wtHolder\")[0];\r\n      wtHolder.addEventListener(\"scroll\", e => {\r\n        this.hot.destroyEditor(); //处理当选择下拉框后拖动滚动条框框会跟着跑的问题\r\n      });\r\n    },\r\n    reRenderSelectOption(hot, data, newRow, isnew) { //重新渲染selectOption,让每个option\r\n        let cellMeta = hot.getCellMetaAtRow(0);\r\n        let rows = data.length\r\n        cellMeta.forEach(item => {\r\n          if (item.prop == \"positionName_0\") { //测点一\r\n            if (isnew) { //新建行的时候的遍历 一条数据\r\n              hot.setCellMeta(newRow, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].positionName_source_0 })\r\n            } else {\r\n              for (let i = 0; i <= rows; i++) { //第一次创建hot时候的遍历 全部数据\r\n                hot.setCellMeta(i, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].positionName_source_0 })\r\n              }\r\n            }\r\n            return\r\n          }\r\n          if (item.prop == \"codeValue_0\") { //特征值1\r\n            if (isnew) { //新建行的时候的遍历 一条数据\r\n              hot.setCellMeta(newRow, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].code_sources })\r\n            } else {\r\n              for (let i = 0; i <= rows; i++) { //第一次创建hot时候的遍历 全部数据\r\n                hot.setCellMeta(i, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].code_sources })\r\n              }\r\n            }\r\n            return\r\n          }\r\n          if (item.prop == \"positionName_1\") { //测点2\r\n            if (isnew) { //新建行的时候的遍历 一条数据\r\n              hot.setCellMeta(newRow, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].positionName_source_1 })\r\n            } else {\r\n              for (let i = 0; i <= rows; i++) { //第一次创建hot时候的遍历 全部数据\r\n                hot.setCellMeta(i, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].positionName_source_1 })\r\n              }\r\n            }\r\n            return\r\n          }\r\n          if (item.prop == \"codeValue_1\") { //特征值2\r\n            if (isnew) { //新建行的时候的遍历 一条数据\r\n              hot.setCellMeta(newRow, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].code_sources })\r\n            } else {\r\n              for (let i = 0; i <= rows; i++) { //第一次创建hot时候的遍历 全部数据\r\n                hot.setCellMeta(i, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].code_sources })\r\n              }\r\n            }\r\n            return\r\n          }\r\n          if (item.prop == \"positionName_2\") { //测点3\r\n            if (isnew) { //新建行的时候的遍历 一条数据\r\n              hot.setCellMeta(newRow, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].positionName_source_2 })\r\n            } else {\r\n              for (let i = 0; i <= rows; i++) { //第一次创建hot时候的遍历 全部数据\r\n                hot.setCellMeta(i, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].positionName_source_2 })\r\n              }\r\n            }\r\n            return\r\n          }\r\n          if (item.prop == \"codeValue_2\") { //特征值3\r\n            if (isnew) { //新建行的时候的遍历 一条数据\r\n              hot.setCellMeta(newRow, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].code_sources })\r\n            } else {\r\n              for (let i = 0; i <= rows; i++) { //第一次创建hot时候的遍历 全部数据\r\n                hot.setCellMeta(i, item.col, \"selectOptions\", row => { return data[hot.toPhysicalRow(row)].code_sources })\r\n              }\r\n            }\r\n            return\r\n          }\r\n        })\r\n    },\r\n    getData() {\r\n      return this.data;\r\n    },\r\n    /* 获取hot实例 */\r\n    getHot() {\r\n      return this.hot;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n</style>\r\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { attrs: { id: \"HotTable\" } })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./Svibs.vue?vue&type=template&id=36c19a30&scoped=true&\"\nimport script from \"./Svibs.vue?vue&type=script&lang=js&\"\nexport * from \"./Svibs.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"36c19a30\",\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"D:\\\\工作\\\\CCCCCCCCCC\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('36c19a30')) {\n      api.createRecord('36c19a30', component.options)\n    } else {\n      api.reload('36c19a30', component.options)\n    }\n    module.hot.accept(\"./Svibs.vue?vue&type=template&id=36c19a30&scoped=true&\", function () {\n      api.rerender('36c19a30', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/content/system/position/table/component/svibs/Svibs.vue\"\nexport default component.exports","import mod from \"-!../../../../../../../../node_modules/babel-loader/lib/index.js??ref--1-0!../../../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Svibs.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../../../node_modules/babel-loader/lib/index.js??ref--1-0!../../../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Svibs.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Svibs.vue?vue&type=template&id=36c19a30&scoped=true&\"","import hdtable from 'common/hdtable.js'\r\nexport function svibsHandsontable(el, vm) {\r\n\r\n  let F = new Func(vm)\r\n  let tableConfig = {\r\n    // 表格右键菜单\r\n    // contextMenu: F.contextMenu(),\r\n    // 表格显示的数据\r\n    data: vm.data,\r\n    //表格的列\r\n    colHeaders: [\r\n      { label: '基本设置', colspan: 5 }, { label: '任务一', colspan: 4 }, { label: '任务二', colspan: 4 }, { label: '任务三', colspan: 4 }\r\n    ],\r\n    //表格的列头自定义\r\n    nestedHeaders: [\r\n      [\r\n        { label: '基本设置', colspan: 5 }, { label: '任务一', colspan: 4 }, { label: '任务二', colspan: 4 }, { label: '任务三', colspan: 4 }\r\n      ], [\r\n        '组织名称',\r\n        '机组名称',\r\n        '监测采集器',\r\n        '测点名称',\r\n        '测点类型',\r\n        '测点',\r\n        '特征值',\r\n        '阈值',\r\n        '系数',\r\n        '测点',\r\n        '特征值',\r\n        '阈值',\r\n        '系数',\r\n        '测点',\r\n        '特征值',\r\n        '阈值',\r\n        '系数'\r\n      ]\r\n    ],\r\n    //数据渲染renderData\r\n    columns: [\r\n      { data: `t_name`, readOnly: true }, //组织名称\r\n      { data: `mac_me`, readOnly: true }, //机组名称\r\n      { data: `dgm_name`, readOnly: true }, //采集器名称\r\n      { data: `pos_name`, readOnly: true }, //测点名称\r\n      { data: `pos_type_value`, readOnly: true },//测点类型\r\n\r\n      {\r\n        data: `positionName_0`, //任务一测点\r\n        editor: 'select',\r\n        selectOptions: row => vm.data[row].positionName_source_0\r\n      },\r\n      {\r\n        data: `codeValue_0`, //任务一特征值（下拉框）\r\n        editor: 'select',\r\n        selectOptions: row => vm.data[row].code_sources\r\n      },\r\n      { data: `threshold_0` },//任务一阈值\r\n      { data: `rate_0` },//任务一系数\r\n\r\n      {\r\n        data: `positionName_1`, //任务二测点\r\n        editor: 'select',\r\n        selectOptions: row => vm.data[row].positionName_source_1\r\n      },\r\n\r\n      {\r\n        data: `codeValue_1`, //任务二特征值（下拉框）\r\n        editor: 'select',\r\n        selectOptions: row => vm.data[row].code_sources\r\n      },\r\n      { data: `threshold_1` },//任务二阈值\r\n      { data: `rate_1` },//任务二系数\r\n\r\n      {\r\n        data: `positionName_2`, //任务三测点\r\n        editor: 'select',\r\n        selectOptions: row => vm.data[row].positionName_source_2\r\n      },\r\n\r\n      {\r\n        data: `codeValue_2`, //任务三特征值（下拉框）\r\n        editor: 'select',\r\n        selectOptions: row => vm.data[row].code_sources\r\n      },\r\n      { data: `threshold_2` },//任务三阈值\r\n      { data: `rate_2` },//任务三系数\r\n\r\n\r\n    ],\r\n    // //单元格属性设置\r\n    // cells: F.cells(),\r\n    // //单击单元格或行/列标题后触发。如果单击行/列标题，则坐标索引为负。\r\n    afterOnCellMouseUp: F.afterOnCellMouseUp(),\r\n    // //过滤之后\r\n    // afterFilter: F.afterFilter(),\r\n    beforeChange: F.beforeChange(),\r\n    afterChange: F.afterChange(),\r\n\r\n  }\r\n  return hdtable(el, tableConfig)\r\n}\r\n\r\nclass Func {\r\n  constructor(vm) {\r\n    this.speedList = vm.speedList\r\n    this.changeData = vm.changeList.changeData\r\n    this.getData = vm.getData\r\n    this.getHot = vm.getHot\r\n  }\r\n  afterOnCellMouseUp() {\r\n    let that = this\r\n    return function (e, coords, td) {\r\n      if (coords.row >= 0) {\r\n        let row_info = that.getPositionByIndex(coords.row)\r\n        console.log(row_info);\r\n      }\r\n    }\r\n  }\r\n  beforeChange() {\r\n    let that = this\r\n    return function (changes, source) {\r\n      let change_index\r\n      let change_prop\r\n      let change_oldVal\r\n      let change_newVal\r\n      for (let i = 0; i < changes.length; i++) {\r\n        change_index = changes[i][0]\r\n        change_prop = changes[i][1]\r\n        change_oldVal = changes[i][2]\r\n        change_newVal = changes[i][3]\r\n        /* 如果选定的值没有改变 返回false */\r\n        if (change_oldVal == change_newVal) {\r\n          continue\r\n        }\r\n        let position = that.getPositionByIndex(change_index)\r\n        /* 选择测点 */\r\n        if (change_prop == \"positionName_0\" || change_prop == \"positionName_1\" || change_prop == \"positionName_2\") {  //任务一测点\r\n          let task = change_prop.slice(-1)\r\n          let sources = position[\"positionName_source_\" + task]\r\n          if (sources.includes(change_newVal)) {\r\n            that.set_position_name(position, task, change_newVal)\r\n          } else {\r\n            swal({\r\n              title: \"提示\",\r\n              text: `第${change_index + 1}行不存在该选项`,\r\n              button: \"确认\"\r\n            })\r\n            return false\r\n          }\r\n          /* 选择特征值 */\r\n        } else if (change_prop == \"codeValue_0\" || change_prop == \"codeValue_1\" || change_prop == \"codeValue_2\") {  //任务一测点\r\n          let task = change_prop.slice(-1)\r\n          let sources = position.code_sources\r\n          if (sources.includes(change_newVal)) {\r\n            that.set_code(position, task, change_newVal)\r\n          } else {\r\n            swal({\r\n              title: \"提示\",\r\n              text: `第${change_index + 1}行不存在该选项`,\r\n              button: \"确认\"\r\n            })\r\n            return false\r\n          }\r\n        } else if (change_prop == \"threshold_0\" || change_prop == \"threshold_1\" || change_prop == \"threshold_2\") {\r\n          if (Number(change_newVal) != change_newVal) {\r\n            swal({\r\n              title: \"提示\",\r\n              text: `第${change_index + 1}阈值必须是数字`,\r\n              button: \"确认\"\r\n            })\r\n            return false\r\n          }\r\n        } else if (change_prop == \"rate_0\" || change_prop == \"rate_1\" || change_prop == \"rate_2\") {\r\n          if (Number(change_newVal) != change_newVal) {\r\n            swal({\r\n              title: \"提示\",\r\n              text: `第${change_index + 1}系数必须是数字`,\r\n              button: \"确认\"\r\n            })\r\n            return false\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  set_position_name(position, task, name) {\r\n    let key = \"position_id_\" + task\r\n    if (name == \"无\") {\r\n      position[key] = \"-1\"  //选择无的讲id 置为-1\r\n    } else {\r\n      let source = position[\"positionInfo_\" + task]\r\n      position[key] = String(source[name].pos_id) //设置测点id\r\n    }\r\n  }\r\n  set_code(position, task, codeValue) {\r\n    let obj = position.code_sources_map\r\n    position['codeKey_' + task] = this.getKey(codeValue, obj)\r\n  }\r\n  getKey(val,obj){ //根据value通过映射找key\r\n    for(let key in obj){\r\n      if(obj[key] === val){\r\n        return key\r\n      }\r\n    }\r\n  }\r\n  afterChange() {\r\n    let that = this\r\n    let changeData = this.changeData\r\n    return function (changes) {\r\n      if (changes) {\r\n        changes.forEach(change => {\r\n          let task = change[1].slice(-1)\r\n          let position = that.getPositionByIndex(change[0])\r\n          let speed_pos = that.speed_pos(position, task)\r\n          changeData[speed_pos.mac_id + \"_\" + speed_pos.pos_type + \"_\" + speed_pos.pos_id] = speed_pos;\r\n\r\n        })\r\n      }\r\n    }\r\n  }\r\n  /* 返回转速测点 */\r\n  speed_pos(position, task) {\r\n    let speedkey = `${position.mac_id}_${position.pos_type}_${position.pos_id}`\r\n    let speed = this.speedList[speedkey]\r\n    let key = position.group * 3 + parseInt(task)\r\n    let svibs = speed.baseInfo.svibsList[key]\r\n    svibs.code = position['codeKey_' + task]\r\n    svibs.rate = position['rate_' + task]\r\n    svibs.position_name = position['positionName_' + task]\r\n    svibs.threshold = position['threshold_' + task]\r\n    svibs.position_id = position['position_id_' + task]\r\n    return speed\r\n  }\r\n\r\n  getPositionByIndex(index) {\r\n    let hot = this.getHot()\r\n    let data = this.getData()\r\n    let physicalRow = hot.toPhysicalRow(index);\r\n    let info = data[physicalRow];\r\n    return info\r\n  }\r\n}"],"sourceRoot":""}